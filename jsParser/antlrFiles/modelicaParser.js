// Generated from modelica.g4 by ANTLR 4.7.2
// jshint ignore: start
const antlr4 = require('antlr4/index')
const modelicaListener = require('./modelicaListener').modelicaListener
const modelicaVisitor = require('./modelicaVisitor').modelicaVisitor

const grammarFileName = 'modelica.g4'

const serializedATN = ['\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964',
  '\u0003`\u0408\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t',
  '\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004',
  '\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004',
  '\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004',
  '\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t',
  '\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004',
  '\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t',
  '\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004',
  '\u001f\t\u001f\u0004 \t \u0004!\t!\u0004"\t"\u0004#\t#\u0004$\t$\u0004',
  "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
  ',\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004',
  '3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004',
  ':\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004',
  'A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004',
  'H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004',
  'O\tO\u0003\u0002\u0003\u0002\u0005\u0002\u00a1\n\u0002\u0003\u0002\u0005',
  '\u0002\u00a4\n\u0002\u0003\u0002\u0005\u0002\u00a7\n\u0002\u0003\u0002',
  '\u0003\u0002\u0003\u0002\u0007\u0002\u00ac\n\u0002\f\u0002\u000e\u0002',
  '\u00af\u000b\u0002\u0003\u0003\u0005\u0003\u00b2\n\u0003\u0003\u0003',
  '\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004',
  '\u00ba\n\u0004\u0003\u0005\u0005\u0005\u00bd\n\u0005\u0003\u0005\u0003',
  '\u0005\u0003\u0005\u0005\u0005\u00c2\n\u0005\u0003\u0005\u0003\u0005',
  '\u0003\u0005\u0005\u0005\u00c7\n\u0005\u0003\u0005\u0003\u0005\u0003',
  '\u0005\u0003\u0005\u0005\u0005\u00cd\n\u0005\u0003\u0005\u0005\u0005',
  '\u00d0\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00d4\n\u0005\u0003',
  '\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003',
  '\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u00df\n\u0006\u0003\u0006',
  '\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u00e6\n',
  '\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005',
  '\u0007\u00ed\n\u0007\u0003\u0007\u0005\u0007\u00f0\n\u0007\u0003\u0007',
  '\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007',
  '\u0005\u0007\u00f9\n\u0007\u0003\u0007\u0005\u0007\u00fc\n\u0007\u0003',
  '\u0007\u0003\u0007\u0005\u0007\u0100\n\u0007\u0003\b\u0003\b\u0003\b',
  '\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u010b\n\b\f',
  '\b\u000e\b\u010e\u000b\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003',
  '\n\u0003\n\u0003\n\u0007\n\u0118\n\n\f\n\u000e\n\u011b\u000b\n\u0003',
  '\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003',
  '\f\u0003\f\u0003\f\u0007\f\u0127\n\f\f\f\u000e\f\u012a\u000b\f\u0003',
  '\f\u0003\f\u0005\f\u012e\n\f\u0003\f\u0005\f\u0131\n\f\u0003\f\u0005',
  '\f\u0134\n\f\u0003\f\u0005\f\u0137\n\f\u0003\f\u0003\f\u0003\f\u0005',
  '\f\u013c\n\f\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0005',
  '\u000e\u0143\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e',
  '\u0148\n\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003',
  '\u000f\u0007\u000f\u014f\n\u000f\f\u000f\u000e\u000f\u0152\u000b\u000f',
  '\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0157\n\u0010\u0003',
  '\u0010\u0005\u0010\u015a\n\u0010\u0003\u0010\u0005\u0010\u015d\n\u0010',
  '\u0003\u0010\u0005\u0010\u0160\n\u0010\u0003\u0010\u0003\u0010\u0005',
  '\u0010\u0164\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010',
  '\u0169\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u016e',
  '\n\u0010\u0005\u0010\u0170\n\u0010\u0005\u0010\u0172\n\u0010\u0003\u0011',
  '\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011',
  '\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011',
  '\u0005\u0011\u0181\n\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003',
  '\u0012\u0003\u0012\u0007\u0012\u0188\n\u0012\f\u0012\u000e\u0012\u018b',
  '\u000b\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0190\n',
  '\u0013\u0003\u0013\u0005\u0013\u0193\n\u0013\u0003\u0014\u0003\u0014',
  '\u0003\u0014\u0005\u0014\u0198\n\u0014\u0003\u0015\u0003\u0015\u0003',
  '\u0015\u0005\u0015\u019d\n\u0015\u0003\u0015\u0003\u0015\u0003\u0016',
  '\u0005\u0016\u01a2\n\u0016\u0003\u0016\u0005\u0016\u01a5\n\u0016\u0003',
  '\u0016\u0005\u0016\u01a8\n\u0016\u0003\u0017\u0003\u0017\u0003\u0018',
  '\u0003\u0018\u0003\u0018\u0007\u0018\u01af\n\u0018\f\u0018\u000e\u0018',
  '\u01b2\u000b\u0018\u0003\u0019\u0003\u0019\u0005\u0019\u01b6\n\u0019',
  '\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b',
  '\u0003\u001b\u0005\u001b\u01bf\n\u001b\u0003\u001b\u0005\u001b\u01c2',
  '\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u01c7\n\u001c',
  '\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u01cd\n',
  '\u001c\u0003\u001d\u0003\u001d\u0005\u001d\u01d1\n\u001d\u0003\u001d',
  '\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u01d8\n',
  '\u001e\f\u001e\u000e\u001e\u01db\u000b\u001e\u0003\u001f\u0003\u001f',
  '\u0005\u001f\u01df\n\u001f\u0003 \u0005 \u01e2\n \u0003 \u0005 \u01e5',
  '\n \u0003 \u0003 \u0005 \u01e9\n \u0003!\u0003!\u0005!\u01ed\n!\u0003',
  '!\u0003!\u0003"\u0003"\u0005"\u01f3\n"\u0003"\u0005"\u01f6\n"',
  '\u0003"\u0003"\u0005"\u01fa\n"\u0003"\u0005"\u01fd\n"\u0003#',
  '\u0003#\u0003#\u0005#\u0202\n#\u0003#\u0005#\u0205\n#\u0003$\u0003$',
  "\u0003$\u0003$\u0003%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003\'\u0005",
  "\'\u0212\n\'\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u0218\n\'\f\'\u000e",
  "\'\u021b\u000b\'\u0003(\u0005(\u021e\n(\u0003(\u0003(\u0003(\u0003(",
  '\u0007(\u0224\n(\f(\u000e(\u0227\u000b(\u0003)\u0003)\u0003)\u0003)',
  '\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u0234\n)\u0003',
  ')\u0003)\u0003*\u0003*\u0003*\u0003*\u0005*\u023c\n*\u0003*\u0003*\u0003',
  '*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003',
  '*\u0005*\u024b\n*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003',
  '+\u0007+\u0255\n+\f+\u000e+\u0258\u000b+\u0003+\u0003+\u0003+\u0003',
  '+\u0003+\u0003+\u0007+\u0260\n+\f+\u000e+\u0263\u000b+\u0007+\u0265',
  '\n+\f+\u000e+\u0268\u000b+\u0003+\u0003+\u0003+\u0003+\u0007+\u026e',
  '\n+\f+\u000e+\u0271\u000b+\u0005+\u0273\n+\u0003+\u0003+\u0003+\u0003',
  ',\u0003,\u0003,\u0003,\u0003,\u0003,\u0007,\u027e\n,\f,\u000e,\u0281',
  '\u000b,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0007,\u0289\n,\f',
  ',\u000e,\u028c\u000b,\u0007,\u028e\n,\f,\u000e,\u0291\u000b,\u0003,',
  '\u0003,\u0003,\u0003,\u0007,\u0297\n,\f,\u000e,\u029a\u000b,\u0005,',
  '\u029c\n,\u0003,\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003',
  '-\u0007-\u02a7\n-\f-\u000e-\u02aa\u000b-\u0003-\u0003-\u0003-\u0003',
  '.\u0003.\u0003.\u0003.\u0003.\u0003.\u0007.\u02b5\n.\f.\u000e.\u02b8',
  '\u000b.\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0007/\u02c0\n/\f',
  '/\u000e/\u02c3\u000b/\u00030\u00030\u00030\u00050\u02c8\n0\u00031\u0003',
  '1\u00031\u00031\u00031\u00031\u00071\u02d0\n1\f1\u000e1\u02d3\u000b',
  '1\u00031\u00031\u00031\u00032\u00032\u00032\u00032\u00032\u00032\u0007',
  '2\u02de\n2\f2\u000e2\u02e1\u000b2\u00032\u00032\u00032\u00032\u0003',
  '2\u00032\u00072\u02e9\n2\f2\u000e2\u02ec\u000b2\u00072\u02ee\n2\f2\u000e',
  '2\u02f1\u000b2\u00032\u00032\u00032\u00033\u00033\u00033\u00033\u0003',
  '3\u00033\u00073\u02fc\n3\f3\u000e3\u02ff\u000b3\u00033\u00033\u0003',
  '3\u00033\u00033\u00033\u00073\u0307\n3\f3\u000e3\u030a\u000b3\u0007',
  '3\u030c\n3\f3\u000e3\u030f\u000b3\u00033\u00033\u00033\u00034\u0003',
  '4\u00034\u00034\u00034\u00034\u00034\u00035\u00035\u00035\u00035\u0003',
  '5\u00035\u00035\u00035\u00035\u00035\u00075\u0325\n5\f5\u000e5\u0328',
  '\u000b5\u00035\u00035\u00035\u00055\u032d\n5\u00036\u00036\u00036\u0003',
  '6\u00036\u00056\u0334\n6\u00056\u0336\n6\u00037\u00037\u00037\u0007',
  '7\u033b\n7\f7\u000e7\u033e\u000b7\u00038\u00038\u00038\u00078\u0343',
  '\n8\f8\u000e8\u0346\u000b8\u00039\u00059\u0349\n9\u00039\u00039\u0003',
  ':\u0003:\u0003:\u0003:\u0005:\u0351\n:\u0003;\u0003;\u0003<\u0005<\u0356',
  '\n<\u0003<\u0003<\u0003<\u0003<\u0007<\u035c\n<\f<\u000e<\u035f\u000b',
  '<\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0007>\u0367\n>\f>\u000e',
  '>\u036a\u000b>\u0003?\u0003?\u0003@\u0003@\u0003@\u0005@\u0371\n@\u0003',
  'A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0005A\u037a\nA\u0003A\u0003',
  'A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0007A\u0386',
  '\nA\fA\u000eA\u0389\u000bA\u0003A\u0003A\u0003A\u0003A\u0003A\u0003',
  'A\u0003A\u0005A\u0392\nA\u0003B\u0005B\u0395\nB\u0003B\u0003B\u0003',
  'B\u0007B\u039a\nB\fB\u000eB\u039d\u000bB\u0003C\u0005C\u03a0\nC\u0003',
  'C\u0003C\u0005C\u03a4\nC\u0003C\u0003C\u0003C\u0005C\u03a9\nC\u0007',
  'C\u03ab\nC\fC\u000eC\u03ae\u000bC\u0003D\u0003D\u0005D\u03b2\nD\u0003',
  'D\u0003D\u0003E\u0003E\u0003E\u0003E\u0003E\u0005E\u03bb\nE\u0003E\u0005',
  'E\u03be\nE\u0003F\u0003F\u0003F\u0005F\u03c3\nF\u0003G\u0003G\u0003',
  'G\u0003G\u0003H\u0003H\u0003H\u0003H\u0005H\u03cd\nH\u0003H\u0003H\u0003',
  'H\u0005H\u03d2\nH\u0003I\u0005I\u03d5\nI\u0003I\u0003I\u0005I\u03d9',
  '\nI\u0007I\u03db\nI\fI\u000eI\u03de\u000bI\u0003J\u0003J\u0003J\u0007',
  'J\u03e3\nJ\fJ\u000eJ\u03e6\u000bJ\u0003K\u0003K\u0003K\u0003K\u0007',
  'K\u03ec\nK\fK\u000eK\u03ef\u000bK\u0003K\u0003K\u0003L\u0003L\u0005',
  'L\u03f5\nL\u0003M\u0003M\u0005M\u03f9\nM\u0003N\u0003N\u0003N\u0007',
  'N\u03fe\nN\fN\u000eN\u0401\u000bN\u0005N\u0403\nN\u0003O\u0003O\u0003',
  'O\u0003O\u0002\u0002P\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014',
  '\u0016\u0018\u001a\u001c\u001e "$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd',
  'fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090',
  '\u0092\u0094\u0096\u0098\u009a\u009c\u0002\n\u0004\u0002-->>\u0004\u0002',
  '((CC\u0005\u0002\u0017\u0017\u001a\u001a::\u0004\u00021188\u0003\u0002',
  '\u0003\b\u0004\u0002\t\u000bZZ\u0004\u0002\f\u000eNN\u0003\u0002WX\u0002',
  '\u045f\u0002\u00a3\u0003\u0002\u0002\u0002\u0004\u00b1\u0003\u0002\u0002',
  '\u0002\u0006\u00b9\u0003\u0002\u0002\u0002\b\u00bc\u0003\u0002\u0002',
  '\u0002\n\u00e5\u0003\u0002\u0002\u0002\f\u00ff\u0003\u0002\u0002\u0002',
  '\u000e\u0101\u0003\u0002\u0002\u0002\u0010\u0112\u0003\u0002\u0002\u0002',
  '\u0012\u0114\u0003\u0002\u0002\u0002\u0014\u011c\u0003\u0002\u0002\u0002',
  '\u0016\u011f\u0003\u0002\u0002\u0002\u0018\u013d\u0003\u0002\u0002\u0002',
  '\u001a\u0142\u0003\u0002\u0002\u0002\u001c\u0150\u0003\u0002\u0002\u0002',
  '\u001e\u0171\u0003\u0002\u0002\u0002 \u0173\u0003\u0002\u0002\u0002',
  '"\u0184\u0003\u0002\u0002\u0002$\u018c\u0003\u0002\u0002\u0002&\u0194',
  '\u0003\u0002\u0002\u0002(\u0199\u0003\u0002\u0002\u0002*\u01a1\u0003',
  '\u0002\u0002\u0002,\u01a9\u0003\u0002\u0002\u0002.\u01ab\u0003\u0002',
  '\u0002\u00020\u01b3\u0003\u0002\u0002\u00022\u01b9\u0003\u0002\u0002',
  '\u00024\u01bc\u0003\u0002\u0002\u00026\u01cc\u0003\u0002\u0002\u0002',
  '8\u01ce\u0003\u0002\u0002\u0002:\u01d4\u0003\u0002\u0002\u0002<\u01de',
  '\u0003\u0002\u0002\u0002>\u01e1\u0003\u0002\u0002\u0002@\u01ea\u0003',
  '\u0002\u0002\u0002B\u01f0\u0003\u0002\u0002\u0002D\u01fe\u0003\u0002',
  '\u0002\u0002F\u0206\u0003\u0002\u0002\u0002H\u020a\u0003\u0002\u0002',
  '\u0002J\u020d\u0003\u0002\u0002\u0002L\u0211\u0003\u0002\u0002\u0002',
  'N\u021d\u0003\u0002\u0002\u0002P\u0233\u0003\u0002\u0002\u0002R\u024a',
  '\u0003\u0002\u0002\u0002T\u024e\u0003\u0002\u0002\u0002V\u0277\u0003',
  '\u0002\u0002\u0002X\u02a0\u0003\u0002\u0002\u0002Z\u02ae\u0003\u0002',
  '\u0002\u0002\\\u02bc\u0003\u0002\u0002\u0002^\u02c4\u0003\u0002\u0002',
  '\u0002`\u02c9\u0003\u0002\u0002\u0002b\u02d7\u0003\u0002\u0002\u0002',
  'd\u02f5\u0003\u0002\u0002\u0002f\u0313\u0003\u0002\u0002\u0002h\u032c',
  '\u0003\u0002\u0002\u0002j\u032e\u0003\u0002\u0002\u0002l\u0337\u0003',
  '\u0002\u0002\u0002n\u033f\u0003\u0002\u0002\u0002p\u0348\u0003\u0002',
  '\u0002\u0002r\u034c\u0003\u0002\u0002\u0002t\u0352\u0003\u0002\u0002',
  '\u0002v\u0355\u0003\u0002\u0002\u0002x\u0360\u0003\u0002\u0002\u0002',
  'z\u0362\u0003\u0002\u0002\u0002|\u036b\u0003\u0002\u0002\u0002~\u036d',
  '\u0003\u0002\u0002\u0002\u0080\u0391\u0003\u0002\u0002\u0002\u0082\u0394',
  '\u0003\u0002\u0002\u0002\u0084\u039f\u0003\u0002\u0002\u0002\u0086\u03af',
  '\u0003\u0002\u0002\u0002\u0088\u03bd\u0003\u0002\u0002\u0002\u008a\u03bf',
  '\u0003\u0002\u0002\u0002\u008c\u03c4\u0003\u0002\u0002\u0002\u008e\u03d1',
  '\u0003\u0002\u0002\u0002\u0090\u03d4\u0003\u0002\u0002\u0002\u0092\u03df',
  '\u0003\u0002\u0002\u0002\u0094\u03e7\u0003\u0002\u0002\u0002\u0096\u03f4',
  '\u0003\u0002\u0002\u0002\u0098\u03f6\u0003\u0002\u0002\u0002\u009a\u0402',
  '\u0003\u0002\u0002\u0002\u009c\u0404\u0003\u0002\u0002\u0002\u009e\u00a0',
  '\u0007I\u0002\u0002\u009f\u00a1\u0005\u0082B\u0002\u00a0\u009f\u0003',
  '\u0002\u0002\u0002\u00a0\u00a1\u0003\u0002\u0002\u0002\u00a1\u00a2\u0003',
  '\u0002\u0002\u0002\u00a2\u00a4\u0007J\u0002\u0002\u00a3\u009e\u0003',
  '\u0002\u0002\u0002\u00a3\u00a4\u0003\u0002\u0002\u0002\u00a4\u00ad\u0003',
  "\u0002\u0002\u0002\u00a5\u00a7\u0007\'\u0002\u0002\u00a6\u00a5\u0003",
  '\u0002\u0002\u0002\u00a6\u00a7\u0003\u0002\u0002\u0002\u00a7\u00a8\u0003',
  '\u0002\u0002\u0002\u00a8\u00a9\u0005\u0004\u0003\u0002\u00a9\u00aa\u0007',
  'J\u0002\u0002\u00aa\u00ac\u0003\u0002\u0002\u0002\u00ab\u00a6\u0003',
  '\u0002\u0002\u0002\u00ac\u00af\u0003\u0002\u0002\u0002\u00ad\u00ab\u0003',
  '\u0002\u0002\u0002\u00ad\u00ae\u0003\u0002\u0002\u0002\u00ae\u0003\u0003',
  '\u0002\u0002\u0002\u00af\u00ad\u0003\u0002\u0002\u0002\u00b0\u00b2\u0007',
  '\u001f\u0002\u0002\u00b1\u00b0\u0003\u0002\u0002\u0002\u00b1\u00b2\u0003',
  '\u0002\u0002\u0002\u00b2\u00b3\u0003\u0002\u0002\u0002\u00b3\u00b4\u0005',
  '\b\u0005\u0002\u00b4\u00b5\u0005\u0006\u0004\u0002\u00b5\u0005\u0003',
  '\u0002\u0002\u0002\u00b6\u00ba\u0005\n\u0006\u0002\u00b7\u00ba\u0005',
  '\f\u0007\u0002\u00b8\u00ba\u0005\u000e\b\u0002\u00b9\u00b6\u0003\u0002',
  '\u0002\u0002\u00b9\u00b7\u0003\u0002\u0002\u0002\u00b9\u00b8\u0003\u0002',
  '\u0002\u0002\u00ba\u0007\u0003\u0002\u0002\u0002\u00bb\u00bd\u0007;',
  '\u0002\u0002\u00bc\u00bb\u0003\u0002\u0002\u0002\u00bc\u00bd\u0003\u0002',
  '\u0002\u0002\u00bd\u00d3\u0003\u0002\u0002\u0002\u00be\u00d4\u0007\u0014',
  '\u0002\u0002\u00bf\u00d4\u00073\u0002\u0002\u00c0\u00c2\u00075\u0002',
  '\u0002\u00c1\u00c0\u0003\u0002\u0002\u0002\u00c1\u00c2\u0003\u0002\u0002',
  '\u0002\u00c2\u00c3\u0003\u0002\u0002\u0002\u00c3\u00d4\u0007?\u0002',
  '\u0002\u00c4\u00d4\u0007\u0012\u0002\u0002\u00c5\u00c7\u0007#\u0002',
  '\u0002\u00c6\u00c5\u0003\u0002\u0002\u0002\u00c6\u00c7\u0003\u0002\u0002',
  '\u0002\u00c7\u00c8\u0003\u0002\u0002\u0002\u00c8\u00d4\u0007\u0016\u0002',
  '\u0002\u00c9\u00d4\u0007F\u0002\u0002\u00ca\u00d4\u00079\u0002\u0002',
  '\u00cb\u00cd\t\u0002\u0002\u0002\u00cc\u00cb\u0003\u0002\u0002\u0002',
  '\u00cc\u00cd\u0003\u0002\u0002\u0002\u00cd\u00cf\u0003\u0002\u0002\u0002',
  '\u00ce\u00d0\u00075\u0002\u0002\u00cf\u00ce\u0003\u0002\u0002\u0002',
  '\u00cf\u00d0\u0003\u0002\u0002\u0002\u00d0\u00d1\u0003\u0002\u0002\u0002',
  '\u00d1\u00d4\u0007*\u0002\u0002\u00d2\u00d4\u00075\u0002\u0002\u00d3',
  '\u00be\u0003\u0002\u0002\u0002\u00d3\u00bf\u0003\u0002\u0002\u0002\u00d3',
  '\u00c1\u0003\u0002\u0002\u0002\u00d3\u00c4\u0003\u0002\u0002\u0002\u00d3',
  '\u00c6\u0003\u0002\u0002\u0002\u00d3\u00c9\u0003\u0002\u0002\u0002\u00d3',
  '\u00ca\u0003\u0002\u0002\u0002\u00d3\u00cc\u0003\u0002\u0002\u0002\u00d3',
  '\u00d2\u0003\u0002\u0002\u0002\u00d4\t\u0003\u0002\u0002\u0002\u00d5',
  '\u00d6\u0007[\u0002\u0002\u00d6\u00d7\u0005\u009aN\u0002\u00d7\u00d8',
  '\u0005\u0016\f\u0002\u00d8\u00d9\u0007 \u0002\u0002\u00d9\u00da\u0007',
  '[\u0002\u0002\u00da\u00e6\u0003\u0002\u0002\u0002\u00db\u00dc\u0007',
  '$\u0002\u0002\u00dc\u00de\u0007[\u0002\u0002\u00dd\u00df\u00058\u001d',
  '\u0002\u00de\u00dd\u0003\u0002\u0002\u0002\u00de\u00df\u0003\u0002\u0002',
  '\u0002\u00df\u00e0\u0003\u0002\u0002\u0002\u00e0\u00e1\u0005\u009aN',
  '\u0002\u00e1\u00e2\u0005\u0016\f\u0002\u00e2\u00e3\u0007 \u0002\u0002',
  '\u00e3\u00e4\u0007[\u0002\u0002\u00e4\u00e6\u0003\u0002\u0002\u0002',
  '\u00e5\u00d5\u0003\u0002\u0002\u0002\u00e5\u00db\u0003\u0002\u0002\u0002',
  '\u00e6\u000b\u0003\u0002\u0002\u0002\u00e7\u00e8\u0007[\u0002\u0002',
  '\u00e8\u00e9\u0007K\u0002\u0002\u00e9\u00ea\u0005\u0010\t\u0002\u00ea',
  '\u00ec\u0005\u0082B\u0002\u00eb\u00ed\u0005\u0094K\u0002\u00ec\u00eb',
  '\u0003\u0002\u0002\u0002\u00ec\u00ed\u0003\u0002\u0002\u0002\u00ed\u00ef',
  '\u0003\u0002\u0002\u0002\u00ee\u00f0\u00058\u001d\u0002\u00ef\u00ee',
  '\u0003\u0002\u0002\u0002\u00ef\u00f0\u0003\u0002\u0002\u0002\u00f0\u00f1',
  '\u0003\u0002\u0002\u0002\u00f1\u00f2\u0005\u0098M\u0002\u00f2\u0100',
  '\u0003\u0002\u0002\u0002\u00f3\u00f4\u0007[\u0002\u0002\u00f4\u00f5',
  '\u0007K\u0002\u0002\u00f5\u00f6\u0007!\u0002\u0002\u00f6\u00fb\u0007',
  'O\u0002\u0002\u00f7\u00f9\u0005\u0012\n\u0002\u00f8\u00f7\u0003\u0002',
  '\u0002\u0002\u00f8\u00f9\u0003\u0002\u0002\u0002\u00f9\u00fc\u0003\u0002',
  '\u0002\u0002\u00fa\u00fc\u0007L\u0002\u0002\u00fb\u00f8\u0003\u0002',
  '\u0002\u0002\u00fb\u00fa\u0003\u0002\u0002\u0002\u00fc\u00fd\u0003\u0002',
  '\u0002\u0002\u00fd\u00fe\u0007P\u0002\u0002\u00fe\u0100\u0005\u0098',
  'M\u0002\u00ff\u00e7\u0003\u0002\u0002\u0002\u00ff\u00f3\u0003\u0002',
  '\u0002\u0002\u0100\r\u0003\u0002\u0002\u0002\u0101\u0102\u0007[\u0002',
  '\u0002\u0102\u0103\u0007K\u0002\u0002\u0103\u0104\u0007\u0019\u0002',
  '\u0002\u0104\u0105\u0007O\u0002\u0002\u0105\u0106\u0005\u0082B\u0002',
  '\u0106\u0107\u0007M\u0002\u0002\u0107\u010c\u0007[\u0002\u0002\u0108',
  '\u0109\u0007M\u0002\u0002\u0109\u010b\u0007[\u0002\u0002\u010a\u0108',
  '\u0003\u0002\u0002\u0002\u010b\u010e\u0003\u0002\u0002\u0002\u010c\u010a',
  '\u0003\u0002\u0002\u0002\u010c\u010d\u0003\u0002\u0002\u0002\u010d\u010f',
  '\u0003\u0002\u0002\u0002\u010e\u010c\u0003\u0002\u0002\u0002\u010f\u0110',
  '\u0007O\u0002\u0002\u0110\u0111\u0005\u0098M\u0002\u0111\u000f\u0003',
  '\u0002\u0002\u0002\u0112\u0113\u0005*\u0016\u0002\u0113\u0011\u0003',
  '\u0002\u0002\u0002\u0114\u0119\u0005\u0014\u000b\u0002\u0115\u0116\u0007',
  'M\u0002\u0002\u0116\u0118\u0005\u0014\u000b\u0002\u0117\u0115\u0003',
  '\u0002\u0002\u0002\u0118\u011b\u0003\u0002\u0002\u0002\u0119\u0117\u0003',
  '\u0002\u0002\u0002\u0119\u011a\u0003\u0002\u0002\u0002\u011a\u0013\u0003',
  '\u0002\u0002\u0002\u011b\u0119\u0003\u0002\u0002\u0002\u011c\u011d\u0007',
  '[\u0002\u0002\u011d\u011e\u0005\u0098M\u0002\u011e\u0015\u0003\u0002',
  '\u0002\u0002\u011f\u0128\u0005\u001c\u000f\u0002\u0120\u0121\u0007=',
  '\u0002\u0002\u0121\u0127\u0005\u001c\u000f\u0002\u0122\u0123\u0007<',
  '\u0002\u0002\u0123\u0127\u0005\u001c\u000f\u0002\u0124\u0127\u0005L',
  "\'\u0002\u0125\u0127\u0005N(\u0002\u0126\u0120\u0003\u0002\u0002\u0002",
  '\u0126\u0122\u0003\u0002\u0002\u0002\u0126\u0124\u0003\u0002\u0002\u0002',
  '\u0126\u0125\u0003\u0002\u0002\u0002\u0127\u012a\u0003\u0002\u0002\u0002',
  '\u0128\u0126\u0003\u0002\u0002\u0002\u0128\u0129\u0003\u0002\u0002\u0002',
  '\u0129\u0136\u0003\u0002\u0002\u0002\u012a\u0128\u0003\u0002\u0002\u0002',
  '\u012b\u012d\u0007%\u0002\u0002\u012c\u012e\u0005\u0018\r\u0002\u012d',
  '\u012c\u0003\u0002\u0002\u0002\u012d\u012e\u0003\u0002\u0002\u0002\u012e',
  '\u0130\u0003\u0002\u0002\u0002\u012f\u0131\u0005\u001a\u000e\u0002\u0130',
  '\u012f\u0003\u0002\u0002\u0002\u0130\u0131\u0003\u0002\u0002\u0002\u0131',
  '\u0133\u0003\u0002\u0002\u0002\u0132\u0134\u0005\u009cO\u0002\u0133',
  '\u0132\u0003\u0002\u0002\u0002\u0133\u0134\u0003\u0002\u0002\u0002\u0134',
  '\u0135\u0003\u0002\u0002\u0002\u0135\u0137\u0007J\u0002\u0002\u0136',
  '\u012b\u0003\u0002\u0002\u0002\u0136\u0137\u0003\u0002\u0002\u0002\u0137',
  '\u013b\u0003\u0002\u0002\u0002\u0138\u0139\u0005\u009cO\u0002\u0139',
  '\u013a\u0007J\u0002\u0002\u013a\u013c\u0003\u0002\u0002\u0002\u013b',
  '\u0138\u0003\u0002\u0002\u0002\u013b\u013c\u0003\u0002\u0002\u0002\u013c',
  '\u0017\u0003\u0002\u0002\u0002\u013d\u013e\u0007\\\u0002\u0002\u013e',
  '\u0019\u0003\u0002\u0002\u0002\u013f\u0140\u0005\u0084C\u0002\u0140',
  '\u0141\u0007K\u0002\u0002\u0141\u0143\u0003\u0002\u0002\u0002\u0142',
  '\u013f\u0003\u0002\u0002\u0002\u0142\u0143\u0003\u0002\u0002\u0002\u0143',
  '\u0144\u0003\u0002\u0002\u0002\u0144\u0145\u0007[\u0002\u0002\u0145',
  '\u0147\u0007O\u0002\u0002\u0146\u0148\u0005\u0092J\u0002\u0147\u0146',
  '\u0003\u0002\u0002\u0002\u0147\u0148\u0003\u0002\u0002\u0002\u0148\u0149',
  '\u0003\u0002\u0002\u0002\u0149\u014a\u0007P\u0002\u0002\u014a\u001b',
  '\u0003\u0002\u0002\u0002\u014b\u014c\u0005\u001e\u0010\u0002\u014c\u014d',
  '\u0007J\u0002\u0002\u014d\u014f\u0003\u0002\u0002\u0002\u014e\u014b',
  '\u0003\u0002\u0002\u0002\u014f\u0152\u0003\u0002\u0002\u0002\u0150\u014e',
  '\u0003\u0002\u0002\u0002\u0150\u0151\u0003\u0002\u0002\u0002\u0151\u001d',
  '\u0003\u0002\u0002\u0002\u0152\u0150\u0003\u0002\u0002\u0002\u0153\u0172',
  '\u0005 \u0011\u0002\u0154\u0172\u0005$\u0013\u0002\u0155\u0157\u0007',
  '@\u0002\u0002\u0156\u0155\u0003\u0002\u0002\u0002\u0156\u0157\u0003',
  '\u0002\u0002\u0002\u0157\u0159\u0003\u0002\u0002\u0002\u0158\u015a\u0007',
  "\'\u0002\u0002\u0159\u0158\u0003\u0002\u0002\u0002\u0159\u015a\u0003",
  '\u0002\u0002\u0002\u015a\u015c\u0003\u0002\u0002\u0002\u015b\u015d\u0007',
  '0\u0002\u0002\u015c\u015b\u0003\u0002\u0002\u0002\u015c\u015d\u0003',
  '\u0002\u0002\u0002\u015d\u015f\u0003\u0002\u0002\u0002\u015e\u0160\u0007',
  '7\u0002\u0002\u015f\u015e\u0003\u0002\u0002\u0002\u015f\u0160\u0003',
  '\u0002\u0002\u0002\u0160\u016f\u0003\u0002\u0002\u0002\u0161\u0164\u0005',
  '\u0004\u0003\u0002\u0162\u0164\u0005(\u0015\u0002\u0163\u0161\u0003',
  '\u0002\u0002\u0002\u0163\u0162\u0003\u0002\u0002\u0002\u0164\u0170\u0003',
  '\u0002\u0002\u0002\u0165\u0168\u0007A\u0002\u0002\u0166\u0169\u0005',
  '\u0004\u0003\u0002\u0167\u0169\u0005(\u0015\u0002\u0168\u0166\u0003',
  '\u0002\u0002\u0002\u0168\u0167\u0003\u0002\u0002\u0002\u0169\u016d\u0003',
  '\u0002\u0002\u0002\u016a\u016b\u0005&\u0014\u0002\u016b\u016c\u0005',
  '\u0098M\u0002\u016c\u016e\u0003\u0002\u0002\u0002\u016d\u016a\u0003',
  '\u0002\u0002\u0002\u016d\u016e\u0003\u0002\u0002\u0002\u016e\u0170\u0003',
  '\u0002\u0002\u0002\u016f\u0163\u0003\u0002\u0002\u0002\u016f\u0165\u0003',
  '\u0002\u0002\u0002\u0170\u0172\u0003\u0002\u0002\u0002\u0171\u0153\u0003',
  '\u0002\u0002\u0002\u0171\u0154\u0003\u0002\u0002\u0002\u0171\u0156\u0003',
  '\u0002\u0002\u0002\u0172\u001f\u0003\u0002\u0002\u0002\u0173\u0180\u0007',
  ',\u0002\u0002\u0174\u0175\u0007[\u0002\u0002\u0175\u0176\u0007K\u0002',
  '\u0002\u0176\u0181\u0005\u0082B\u0002\u0177\u0178\u0005\u0082B\u0002',
  '\u0178\u0179\u0007N\u0002\u0002\u0179\u0181\u0003\u0002\u0002\u0002',
  '\u017a\u017b\u0005\u0082B\u0002\u017b\u017c\u0007Q\u0002\u0002\u017c',
  '\u017d\u0005"\u0012\u0002\u017d\u017e\u0007S\u0002\u0002\u017e\u0181',
  '\u0003\u0002\u0002\u0002\u017f\u0181\u0005\u0082B\u0002\u0180\u0174',
  '\u0003\u0002\u0002\u0002\u0180\u0177\u0003\u0002\u0002\u0002\u0180\u017a',
  '\u0003\u0002\u0002\u0002\u0180\u017f\u0003\u0002\u0002\u0002\u0181\u0182',
  '\u0003\u0002\u0002\u0002\u0182\u0183\u0005\u0098M\u0002\u0183!\u0003',
  '\u0002\u0002\u0002\u0184\u0189\u0007[\u0002\u0002\u0185\u0186\u0007',
  'M\u0002\u0002\u0186\u0188\u0007[\u0002\u0002\u0187\u0185\u0003\u0002',
  '\u0002\u0002\u0188\u018b\u0003\u0002\u0002\u0002\u0189\u0187\u0003\u0002',
  '\u0002\u0002\u0189\u018a\u0003\u0002\u0002\u0002\u018a#\u0003\u0002',
  '\u0002\u0002\u018b\u0189\u0003\u0002\u0002\u0002\u018c\u018d\u0007$',
  '\u0002\u0002\u018d\u018f\u0005\u0082B\u0002\u018e\u0190\u00058\u001d',
  '\u0002\u018f\u018e\u0003\u0002\u0002\u0002\u018f\u0190\u0003\u0002\u0002',
  '\u0002\u0190\u0192\u0003\u0002\u0002\u0002\u0191\u0193\u0005\u009cO',
  '\u0002\u0192\u0191\u0003\u0002\u0002\u0002\u0192\u0193\u0003\u0002\u0002',
  '\u0002\u0193%\u0003\u0002\u0002\u0002\u0194\u0195\u0007\u0018\u0002',
  '\u0002\u0195\u0197\u0005\u0082B\u0002\u0196\u0198\u00058\u001d\u0002',
  '\u0197\u0196\u0003\u0002\u0002\u0002\u0197\u0198\u0003\u0002\u0002\u0002',
  "\u0198\'\u0003\u0002\u0002\u0002\u0199\u019a\u0005*\u0016\u0002\u019a",
  '\u019c\u0005,\u0017\u0002\u019b\u019d\u0005\u0094K\u0002\u019c\u019b',
  '\u0003\u0002\u0002\u0002\u019c\u019d\u0003\u0002\u0002\u0002\u019d\u019e',
  '\u0003\u0002\u0002\u0002\u019e\u019f\u0005.\u0018\u0002\u019f)\u0003',
  '\u0002\u0002\u0002\u01a0\u01a2\t\u0003\u0002\u0002\u01a1\u01a0\u0003',
  '\u0002\u0002\u0002\u01a1\u01a2\u0003\u0002\u0002\u0002\u01a2\u01a4\u0003',
  '\u0002\u0002\u0002\u01a3\u01a5\t\u0004\u0002\u0002\u01a4\u01a3\u0003',
  '\u0002\u0002\u0002\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a7\u0003',
  '\u0002\u0002\u0002\u01a6\u01a8\t\u0005\u0002\u0002\u01a7\u01a6\u0003',
  '\u0002\u0002\u0002\u01a7\u01a8\u0003\u0002\u0002\u0002\u01a8+\u0003',
  '\u0002\u0002\u0002\u01a9\u01aa\u0005\u0082B\u0002\u01aa-\u0003\u0002',
  '\u0002\u0002\u01ab\u01b0\u00050\u0019\u0002\u01ac\u01ad\u0007M\u0002',
  '\u0002\u01ad\u01af\u00050\u0019\u0002\u01ae\u01ac\u0003\u0002\u0002',
  '\u0002\u01af\u01b2\u0003\u0002\u0002\u0002\u01b0\u01ae\u0003\u0002\u0002',
  '\u0002\u01b0\u01b1\u0003\u0002\u0002\u0002\u01b1/\u0003\u0002\u0002',
  '\u0002\u01b2\u01b0\u0003\u0002\u0002\u0002\u01b3\u01b5\u00054\u001b',
  '\u0002\u01b4\u01b6\u00052\u001a\u0002\u01b5\u01b4\u0003\u0002\u0002',
  '\u0002\u01b5\u01b6\u0003\u0002\u0002\u0002\u01b6\u01b7\u0003\u0002\u0002',
  '\u0002\u01b7\u01b8\u0005\u0098M\u0002\u01b81\u0003\u0002\u0002\u0002',
  '\u01b9\u01ba\u0007+\u0002\u0002\u01ba\u01bb\u0005h5\u0002\u01bb3\u0003',
  '\u0002\u0002\u0002\u01bc\u01be\u0007[\u0002\u0002\u01bd\u01bf\u0005',
  '\u0094K\u0002\u01be\u01bd\u0003\u0002\u0002\u0002\u01be\u01bf\u0003',
  '\u0002\u0002\u0002\u01bf\u01c1\u0003\u0002\u0002\u0002\u01c0\u01c2\u0005',
  '6\u001c\u0002\u01c1\u01c0\u0003\u0002\u0002\u0002\u01c1\u01c2\u0003',
  '\u0002\u0002\u0002\u01c25\u0003\u0002\u0002\u0002\u01c3\u01c6\u0005',
  '8\u001d\u0002\u01c4\u01c5\u0007K\u0002\u0002\u01c5\u01c7\u0005h5\u0002',
  '\u01c6\u01c4\u0003\u0002\u0002\u0002\u01c6\u01c7\u0003\u0002\u0002\u0002',
  '\u01c7\u01cd\u0003\u0002\u0002\u0002\u01c8\u01c9\u0007K\u0002\u0002',
  '\u01c9\u01cd\u0005h5\u0002\u01ca\u01cb\u0007V\u0002\u0002\u01cb\u01cd',
  '\u0005h5\u0002\u01cc\u01c3\u0003\u0002\u0002\u0002\u01cc\u01c8\u0003',
  '\u0002\u0002\u0002\u01cc\u01ca\u0003\u0002\u0002\u0002\u01cd7\u0003',
  '\u0002\u0002\u0002\u01ce\u01d0\u0007O\u0002\u0002\u01cf\u01d1\u0005',
  ':\u001e\u0002\u01d0\u01cf\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003',
  '\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002\u0002\u0002\u01d2\u01d3\u0007',
  'P\u0002\u0002\u01d39\u0003\u0002\u0002\u0002\u01d4\u01d9\u0005<\u001f',
  '\u0002\u01d5\u01d6\u0007M\u0002\u0002\u01d6\u01d8\u0005<\u001f\u0002',
  '\u01d7\u01d5\u0003\u0002\u0002\u0002\u01d8\u01db\u0003\u0002\u0002\u0002',
  '\u01d9\u01d7\u0003\u0002\u0002\u0002\u01d9\u01da\u0003\u0002\u0002\u0002',
  '\u01da;\u0003\u0002\u0002\u0002\u01db\u01d9\u0003\u0002\u0002\u0002',
  '\u01dc\u01df\u0005> \u0002\u01dd\u01df\u0005B"\u0002\u01de\u01dc\u0003',
  '\u0002\u0002\u0002\u01de\u01dd\u0003\u0002\u0002\u0002\u01df=\u0003',
  '\u0002\u0002\u0002\u01e0\u01e2\u0007\u001b\u0002\u0002\u01e1\u01e0\u0003',
  '\u0002\u0002\u0002\u01e1\u01e2\u0003\u0002\u0002\u0002\u01e2\u01e4\u0003',
  "\u0002\u0002\u0002\u01e3\u01e5\u0007\'\u0002\u0002\u01e4\u01e3\u0003",
  '\u0002\u0002\u0002\u01e4\u01e5\u0003\u0002\u0002\u0002\u01e5\u01e8\u0003',
  '\u0002\u0002\u0002\u01e6\u01e9\u0005@!\u0002\u01e7\u01e9\u0005D#\u0002',
  '\u01e8\u01e6\u0003\u0002\u0002\u0002\u01e8\u01e7\u0003\u0002\u0002\u0002',
  '\u01e9?\u0003\u0002\u0002\u0002\u01ea\u01ec\u0005\u0082B\u0002\u01eb',
  '\u01ed\u00056\u001c\u0002\u01ec\u01eb\u0003\u0002\u0002\u0002\u01ec',
  '\u01ed\u0003\u0002\u0002\u0002\u01ed\u01ee\u0003\u0002\u0002\u0002\u01ee',
  '\u01ef\u0005\u009aN\u0002\u01efA\u0003\u0002\u0002\u0002\u01f0\u01f2',
  '\u0007@\u0002\u0002\u01f1\u01f3\u0007\u001b\u0002\u0002\u01f2\u01f1',
  '\u0003\u0002\u0002\u0002\u01f2\u01f3\u0003\u0002\u0002\u0002\u01f3\u01f5',
  "\u0003\u0002\u0002\u0002\u01f4\u01f6\u0007\'\u0002\u0002\u01f5\u01f4",
  '\u0003\u0002\u0002\u0002\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6\u01fc',
  '\u0003\u0002\u0002\u0002\u01f7\u01fa\u0005J&\u0002\u01f8\u01fa\u0005',
  'F$\u0002\u01f9\u01f7\u0003\u0002\u0002\u0002\u01f9\u01f8\u0003\u0002',
  '\u0002\u0002\u01fa\u01fd\u0003\u0002\u0002\u0002\u01fb\u01fd\u0005D',
  '#\u0002\u01fc\u01f9\u0003\u0002\u0002\u0002\u01fc\u01fb\u0003\u0002',
  '\u0002\u0002\u01fdC\u0003\u0002\u0002\u0002\u01fe\u0201\u0007A\u0002',
  '\u0002\u01ff\u0202\u0005J&\u0002\u0200\u0202\u0005F$\u0002\u0201\u01ff',
  '\u0003\u0002\u0002\u0002\u0201\u0200\u0003\u0002\u0002\u0002\u0202\u0204',
  '\u0003\u0002\u0002\u0002\u0203\u0205\u0005&\u0014\u0002\u0204\u0203',
  '\u0003\u0002\u0002\u0002\u0204\u0205\u0003\u0002\u0002\u0002\u0205E',
  '\u0003\u0002\u0002\u0002\u0206\u0207\u0005*\u0016\u0002\u0207\u0208',
  '\u0005,\u0017\u0002\u0208\u0209\u0005H%\u0002\u0209G\u0003\u0002\u0002',
  '\u0002\u020a\u020b\u00054\u001b\u0002\u020b\u020c\u0005\u0098M\u0002',
  '\u020cI\u0003\u0002\u0002\u0002\u020d\u020e\u0005\b\u0005\u0002\u020e',
  '\u020f\u0005\f\u0007\u0002\u020fK\u0003\u0002\u0002\u0002\u0210\u0212',
  '\u0007/\u0002\u0002\u0211\u0210\u0003\u0002\u0002\u0002\u0211\u0212',
  '\u0003\u0002\u0002\u0002\u0212\u0213\u0003\u0002\u0002\u0002\u0213\u0219',
  '\u0007"\u0002\u0002\u0214\u0215\u0005P)\u0002\u0215\u0216\u0007J\u0002',
  '\u0002\u0216\u0218\u0003\u0002\u0002\u0002\u0217\u0214\u0003\u0002\u0002',
  '\u0002\u0218\u021b\u0003\u0002\u0002\u0002\u0219\u0217\u0003\u0002\u0002',
  '\u0002\u0219\u021a\u0003\u0002\u0002\u0002\u021aM\u0003\u0002\u0002',
  '\u0002\u021b\u0219\u0003\u0002\u0002\u0002\u021c\u021e\u0007/\u0002',
  '\u0002\u021d\u021c\u0003\u0002\u0002\u0002\u021d\u021e\u0003\u0002\u0002',
  '\u0002\u021e\u021f\u0003\u0002\u0002\u0002\u021f\u0225\u0007\u000f\u0002',
  '\u0002\u0220\u0221\u0005R*\u0002\u0221\u0222\u0007J\u0002\u0002\u0222',
  '\u0224\u0003\u0002\u0002\u0002\u0223\u0220\u0003\u0002\u0002\u0002\u0224',
  '\u0227\u0003\u0002\u0002\u0002\u0225\u0223\u0003\u0002\u0002\u0002\u0225',
  '\u0226\u0003\u0002\u0002\u0002\u0226O\u0003\u0002\u0002\u0002\u0227',
  '\u0225\u0003\u0002\u0002\u0002\u0228\u0229\u0005j6\u0002\u0229\u022a',
  '\u0007K\u0002\u0002\u022a\u022b\u0005h5\u0002\u022b\u0234\u0003\u0002',
  '\u0002\u0002\u022c\u0234\u0005T+\u0002\u022d\u0234\u0005X-\u0002\u022e',
  '\u0234\u0005f4\u0002\u022f\u0234\u0005b2\u0002\u0230\u0231\u0005\u0082',
  'B\u0002\u0231\u0232\u0005\u0086D\u0002\u0232\u0234\u0003\u0002\u0002',
  '\u0002\u0233\u0228\u0003\u0002\u0002\u0002\u0233\u022c\u0003\u0002\u0002',
  '\u0002\u0233\u022d\u0003\u0002\u0002\u0002\u0233\u022e\u0003\u0002\u0002',
  '\u0002\u0233\u022f\u0003\u0002\u0002\u0002\u0233\u0230\u0003\u0002\u0002',
  '\u0002\u0234\u0235\u0003\u0002\u0002\u0002\u0235\u0236\u0005\u0098M',
  '\u0002\u0236Q\u0003\u0002\u0002\u0002\u0237\u023b\u0005\u0084C\u0002',
  '\u0238\u0239\u0007V\u0002\u0002\u0239\u023c\u0005h5\u0002\u023a\u023c',
  '\u0005\u0086D\u0002\u023b\u0238\u0003\u0002\u0002\u0002\u023b\u023a',
  '\u0003\u0002\u0002\u0002\u023c\u024b\u0003\u0002\u0002\u0002\u023d\u023e',
  '\u0007O\u0002\u0002\u023e\u023f\u0005\u0090I\u0002\u023f\u0240\u0007',
  'P\u0002\u0002\u0240\u0241\u0007V\u0002\u0002\u0241\u0242\u0005\u0084',
  'C\u0002\u0242\u0243\u0005\u0086D\u0002\u0243\u024b\u0003\u0002\u0002',
  '\u0002\u0244\u024b\u0007\u0013\u0002\u0002\u0245\u024b\u0007B\u0002',
  '\u0002\u0246\u024b\u0005V,\u0002\u0247\u024b\u0005Z.\u0002\u0248\u024b',
  '\u0005`1\u0002\u0249\u024b\u0005d3\u0002\u024a\u0237\u0003\u0002\u0002',
  '\u0002\u024a\u023d\u0003\u0002\u0002\u0002\u024a\u0244\u0003\u0002\u0002',
  '\u0002\u024a\u0245\u0003\u0002\u0002\u0002\u024a\u0246\u0003\u0002\u0002',
  '\u0002\u024a\u0247\u0003\u0002\u0002\u0002\u024a\u0248\u0003\u0002\u0002',
  '\u0002\u024a\u0249\u0003\u0002\u0002\u0002\u024b\u024c\u0003\u0002\u0002',
  '\u0002\u024c\u024d\u0005\u0098M\u0002\u024dS\u0003\u0002\u0002\u0002',
  '\u024e\u024f\u0007+\u0002\u0002\u024f\u0250\u0005h5\u0002\u0250\u0256',
  '\u0007D\u0002\u0002\u0251\u0252\u0005P)\u0002\u0252\u0253\u0007J\u0002',
  '\u0002\u0253\u0255\u0003\u0002\u0002\u0002\u0254\u0251\u0003\u0002\u0002',
  '\u0002\u0255\u0258\u0003\u0002\u0002\u0002\u0256\u0254\u0003\u0002\u0002',
  '\u0002\u0256\u0257\u0003\u0002\u0002\u0002\u0257\u0266\u0003\u0002\u0002',
  '\u0002\u0258\u0256\u0003\u0002\u0002\u0002\u0259\u025a\u0007\u001d\u0002',
  '\u0002\u025a\u025b\u0005h5\u0002\u025b\u0261\u0007D\u0002\u0002\u025c',
  '\u025d\u0005P)\u0002\u025d\u025e\u0007J\u0002\u0002\u025e\u0260\u0003',
  '\u0002\u0002\u0002\u025f\u025c\u0003\u0002\u0002\u0002\u0260\u0263\u0003',
  '\u0002\u0002\u0002\u0261\u025f\u0003\u0002\u0002\u0002\u0261\u0262\u0003',
  '\u0002\u0002\u0002\u0262\u0265\u0003\u0002\u0002\u0002\u0263\u0261\u0003',
  '\u0002\u0002\u0002\u0264\u0259\u0003\u0002\u0002\u0002\u0265\u0268\u0003',
  '\u0002\u0002\u0002\u0266\u0264\u0003\u0002\u0002\u0002\u0266\u0267\u0003',
  '\u0002\u0002\u0002\u0267\u0272\u0003\u0002\u0002\u0002\u0268\u0266\u0003',
  '\u0002\u0002\u0002\u0269\u026f\u0007\u001c\u0002\u0002\u026a\u026b\u0005',
  'P)\u0002\u026b\u026c\u0007J\u0002\u0002\u026c\u026e\u0003\u0002\u0002',
  '\u0002\u026d\u026a\u0003\u0002\u0002\u0002\u026e\u0271\u0003\u0002\u0002',
  '\u0002\u026f\u026d\u0003\u0002\u0002\u0002\u026f\u0270\u0003\u0002\u0002',
  '\u0002\u0270\u0273\u0003\u0002\u0002\u0002\u0271\u026f\u0003\u0002\u0002',
  '\u0002\u0272\u0269\u0003\u0002\u0002\u0002\u0272\u0273\u0003\u0002\u0002',
  '\u0002\u0273\u0274\u0003\u0002\u0002\u0002\u0274\u0275\u0007 \u0002',
  '\u0002\u0275\u0276\u0007+\u0002\u0002\u0276U\u0003\u0002\u0002\u0002',
  '\u0277\u0278\u0007+\u0002\u0002\u0278\u0279\u0005h5\u0002\u0279\u027f',
  '\u0007D\u0002\u0002\u027a\u027b\u0005R*\u0002\u027b\u027c\u0007J\u0002',
  '\u0002\u027c\u027e\u0003\u0002\u0002\u0002\u027d\u027a\u0003\u0002\u0002',
  '\u0002\u027e\u0281\u0003\u0002\u0002\u0002\u027f\u027d\u0003\u0002\u0002',
  '\u0002\u027f\u0280\u0003\u0002\u0002\u0002\u0280\u028f\u0003\u0002\u0002',
  '\u0002\u0281\u027f\u0003\u0002\u0002\u0002\u0282\u0283\u0007\u001d\u0002',
  '\u0002\u0283\u0284\u0005h5\u0002\u0284\u028a\u0007D\u0002\u0002\u0285',
  '\u0286\u0005R*\u0002\u0286\u0287\u0007J\u0002\u0002\u0287\u0289\u0003',
  '\u0002\u0002\u0002\u0288\u0285\u0003\u0002\u0002\u0002\u0289\u028c\u0003',
  '\u0002\u0002\u0002\u028a\u0288\u0003\u0002\u0002\u0002\u028a\u028b\u0003',
  '\u0002\u0002\u0002\u028b\u028e\u0003\u0002\u0002\u0002\u028c\u028a\u0003',
  '\u0002\u0002\u0002\u028d\u0282\u0003\u0002\u0002\u0002\u028e\u0291\u0003',
  '\u0002\u0002\u0002\u028f\u028d\u0003\u0002\u0002\u0002\u028f\u0290\u0003',
  '\u0002\u0002\u0002\u0290\u029b\u0003\u0002\u0002\u0002\u0291\u028f\u0003',
  '\u0002\u0002\u0002\u0292\u0298\u0007\u001c\u0002\u0002\u0293\u0294\u0005',
  'R*\u0002\u0294\u0295\u0007J\u0002\u0002\u0295\u0297\u0003\u0002\u0002',
  '\u0002\u0296\u0293\u0003\u0002\u0002\u0002\u0297\u029a\u0003\u0002\u0002',
  '\u0002\u0298\u0296\u0003\u0002\u0002\u0002\u0298\u0299\u0003\u0002\u0002',
  '\u0002\u0299\u029c\u0003\u0002\u0002\u0002\u029a\u0298\u0003\u0002\u0002',
  '\u0002\u029b\u0292\u0003\u0002\u0002\u0002\u029b\u029c\u0003\u0002\u0002',
  '\u0002\u029c\u029d\u0003\u0002\u0002\u0002\u029d\u029e\u0007 \u0002',
  '\u0002\u029e\u029f\u0007+\u0002\u0002\u029fW\u0003\u0002\u0002\u0002',
  '\u02a0\u02a1\u0007)\u0002\u0002\u02a1\u02a2\u0005\\/\u0002\u02a2\u02a8',
  '\u00072\u0002\u0002\u02a3\u02a4\u0005P)\u0002\u02a4\u02a5\u0007J\u0002',
  '\u0002\u02a5\u02a7\u0003\u0002\u0002\u0002\u02a6\u02a3\u0003\u0002\u0002',
  '\u0002\u02a7\u02aa\u0003\u0002\u0002\u0002\u02a8\u02a6\u0003\u0002\u0002',
  '\u0002\u02a8\u02a9\u0003\u0002\u0002\u0002\u02a9\u02ab\u0003\u0002\u0002',
  '\u0002\u02aa\u02a8\u0003\u0002\u0002\u0002\u02ab\u02ac\u0007 \u0002',
  '\u0002\u02ac\u02ad\u0007)\u0002\u0002\u02adY\u0003\u0002\u0002\u0002',
  '\u02ae\u02af\u0007)\u0002\u0002\u02af\u02b0\u0005\\/\u0002\u02b0\u02b6',
  '\u00072\u0002\u0002\u02b1\u02b2\u0005R*\u0002\u02b2\u02b3\u0007J\u0002',
  '\u0002\u02b3\u02b5\u0003\u0002\u0002\u0002\u02b4\u02b1\u0003\u0002\u0002',
  '\u0002\u02b5\u02b8\u0003\u0002\u0002\u0002\u02b6\u02b4\u0003\u0002\u0002',
  '\u0002\u02b6\u02b7\u0003\u0002\u0002\u0002\u02b7\u02b9\u0003\u0002\u0002',
  '\u0002\u02b8\u02b6\u0003\u0002\u0002\u0002\u02b9\u02ba\u0007 \u0002',
  '\u0002\u02ba\u02bb\u0007)\u0002\u0002\u02bb[\u0003\u0002\u0002\u0002',
  '\u02bc\u02c1\u0005^0\u0002\u02bd\u02be\u0007M\u0002\u0002\u02be\u02c0',
  '\u0005^0\u0002\u02bf\u02bd\u0003\u0002\u0002\u0002\u02c0\u02c3\u0003',
  '\u0002\u0002\u0002\u02c1\u02bf\u0003\u0002\u0002\u0002\u02c1\u02c2\u0003',
  '\u0002\u0002\u0002\u02c2]\u0003\u0002\u0002\u0002\u02c3\u02c1\u0003',
  '\u0002\u0002\u0002\u02c4\u02c7\u0007[\u0002\u0002\u02c5\u02c6\u0007',
  '.\u0002\u0002\u02c6\u02c8\u0005h5\u0002\u02c7\u02c5\u0003\u0002\u0002',
  '\u0002\u02c7\u02c8\u0003\u0002\u0002\u0002\u02c8_\u0003\u0002\u0002',
  '\u0002\u02c9\u02ca\u0007H\u0002\u0002\u02ca\u02cb\u0005h5\u0002\u02cb',
  '\u02d1\u00072\u0002\u0002\u02cc\u02cd\u0005R*\u0002\u02cd\u02ce\u0007',
  'J\u0002\u0002\u02ce\u02d0\u0003\u0002\u0002\u0002\u02cf\u02cc\u0003',
  '\u0002\u0002\u0002\u02d0\u02d3\u0003\u0002\u0002\u0002\u02d1\u02cf\u0003',
  '\u0002\u0002\u0002\u02d1\u02d2\u0003\u0002\u0002\u0002\u02d2\u02d4\u0003',
  '\u0002\u0002\u0002\u02d3\u02d1\u0003\u0002\u0002\u0002\u02d4\u02d5\u0007',
  ' \u0002\u0002\u02d5\u02d6\u0007H\u0002\u0002\u02d6a\u0003\u0002\u0002',
  '\u0002\u02d7\u02d8\u0007G\u0002\u0002\u02d8\u02d9\u0005h5\u0002\u02d9',
  '\u02df\u0007D\u0002\u0002\u02da\u02db\u0005P)\u0002\u02db\u02dc\u0007',
  'J\u0002\u0002\u02dc\u02de\u0003\u0002\u0002\u0002\u02dd\u02da\u0003',
  '\u0002\u0002\u0002\u02de\u02e1\u0003\u0002\u0002\u0002\u02df\u02dd\u0003',
  '\u0002\u0002\u0002\u02df\u02e0\u0003\u0002\u0002\u0002\u02e0\u02ef\u0003',
  '\u0002\u0002\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e2\u02e3\u0007',
  '\u001e\u0002\u0002\u02e3\u02e4\u0005h5\u0002\u02e4\u02ea\u0007D\u0002',
  '\u0002\u02e5\u02e6\u0005P)\u0002\u02e6\u02e7\u0007J\u0002\u0002\u02e7',
  '\u02e9\u0003\u0002\u0002\u0002\u02e8\u02e5\u0003\u0002\u0002\u0002\u02e9',
  '\u02ec\u0003\u0002\u0002\u0002\u02ea\u02e8\u0003\u0002\u0002\u0002\u02ea',
  '\u02eb\u0003\u0002\u0002\u0002\u02eb\u02ee\u0003\u0002\u0002\u0002\u02ec',
  '\u02ea\u0003\u0002\u0002\u0002\u02ed\u02e2\u0003\u0002\u0002\u0002\u02ee',
  '\u02f1\u0003\u0002\u0002\u0002\u02ef\u02ed\u0003\u0002\u0002\u0002\u02ef',
  '\u02f0\u0003\u0002\u0002\u0002\u02f0\u02f2\u0003\u0002\u0002\u0002\u02f1',
  '\u02ef\u0003\u0002\u0002\u0002\u02f2\u02f3\u0007 \u0002\u0002\u02f3',
  '\u02f4\u0007G\u0002\u0002\u02f4c\u0003\u0002\u0002\u0002\u02f5\u02f6',
  '\u0007G\u0002\u0002\u02f6\u02f7\u0005h5\u0002\u02f7\u02fd\u0007D\u0002',
  '\u0002\u02f8\u02f9\u0005R*\u0002\u02f9\u02fa\u0007J\u0002\u0002\u02fa',
  '\u02fc\u0003\u0002\u0002\u0002\u02fb\u02f8\u0003\u0002\u0002\u0002\u02fc',
  '\u02ff\u0003\u0002\u0002\u0002\u02fd\u02fb\u0003\u0002\u0002\u0002\u02fd',
  '\u02fe\u0003\u0002\u0002\u0002\u02fe\u030d\u0003\u0002\u0002\u0002\u02ff',
  '\u02fd\u0003\u0002\u0002\u0002\u0300\u0301\u0007\u001e\u0002\u0002\u0301',
  '\u0302\u0005h5\u0002\u0302\u0308\u0007D\u0002\u0002\u0303\u0304\u0005',
  'R*\u0002\u0304\u0305\u0007J\u0002\u0002\u0305\u0307\u0003\u0002\u0002',
  '\u0002\u0306\u0303\u0003\u0002\u0002\u0002\u0307\u030a\u0003\u0002\u0002',
  '\u0002\u0308\u0306\u0003\u0002\u0002\u0002\u0308\u0309\u0003\u0002\u0002',
  '\u0002\u0309\u030c\u0003\u0002\u0002\u0002\u030a\u0308\u0003\u0002\u0002',
  '\u0002\u030b\u0300\u0003\u0002\u0002\u0002\u030c\u030f\u0003\u0002\u0002',
  '\u0002\u030d\u030b\u0003\u0002\u0002\u0002\u030d\u030e\u0003\u0002\u0002',
  '\u0002\u030e\u0310\u0003\u0002\u0002\u0002\u030f\u030d\u0003\u0002\u0002',
  '\u0002\u0310\u0311\u0007 \u0002\u0002\u0311\u0312\u0007G\u0002\u0002',
  '\u0312e\u0003\u0002\u0002\u0002\u0313\u0314\u0007\u0015\u0002\u0002',
  '\u0314\u0315\u0007O\u0002\u0002\u0315\u0316\u0005\u0084C\u0002\u0316',
  '\u0317\u0007M\u0002\u0002\u0317\u0318\u0005\u0084C\u0002\u0318\u0319',
  '\u0007P\u0002\u0002\u0319g\u0003\u0002\u0002\u0002\u031a\u032d\u0005',
  'j6\u0002\u031b\u031c\u0007+\u0002\u0002\u031c\u031d\u0005h5\u0002\u031d',
  '\u031e\u0007D\u0002\u0002\u031e\u0326\u0005h5\u0002\u031f\u0320\u0007',
  '\u001d\u0002\u0002\u0320\u0321\u0005h5\u0002\u0321\u0322\u0007D\u0002',
  '\u0002\u0322\u0323\u0005h5\u0002\u0323\u0325\u0003\u0002\u0002\u0002',
  '\u0324\u031f\u0003\u0002\u0002\u0002\u0325\u0328\u0003\u0002\u0002\u0002',
  '\u0326\u0324\u0003\u0002\u0002\u0002\u0326\u0327\u0003\u0002\u0002\u0002',
  '\u0327\u0329\u0003\u0002\u0002\u0002\u0328\u0326\u0003\u0002\u0002\u0002',
  '\u0329\u032a\u0007\u001c\u0002\u0002\u032a\u032b\u0005h5\u0002\u032b',
  '\u032d\u0003\u0002\u0002\u0002\u032c\u031a\u0003\u0002\u0002\u0002\u032c',
  '\u031b\u0003\u0002\u0002\u0002\u032di\u0003\u0002\u0002\u0002\u032e',
  '\u0335\u0005l7\u0002\u032f\u0330\u0007L\u0002\u0002\u0330\u0333\u0005',
  'l7\u0002\u0331\u0332\u0007L\u0002\u0002\u0332\u0334\u0005l7\u0002\u0333',
  '\u0331\u0003\u0002\u0002\u0002\u0333\u0334\u0003\u0002\u0002\u0002\u0334',
  '\u0336\u0003\u0002\u0002\u0002\u0335\u032f\u0003\u0002\u0002\u0002\u0335',
  '\u0336\u0003\u0002\u0002\u0002\u0336k\u0003\u0002\u0002\u0002\u0337',
  '\u033c\u0005n8\u0002\u0338\u0339\u00076\u0002\u0002\u0339\u033b\u0005',
  'n8\u0002\u033a\u0338\u0003\u0002\u0002\u0002\u033b\u033e\u0003\u0002',
  '\u0002\u0002\u033c\u033a\u0003\u0002\u0002\u0002\u033c\u033d\u0003\u0002',
  '\u0002\u0002\u033dm\u0003\u0002\u0002\u0002\u033e\u033c\u0003\u0002',
  '\u0002\u0002\u033f\u0344\u0005p9\u0002\u0340\u0341\u0007\u0010\u0002',
  '\u0002\u0341\u0343\u0005p9\u0002\u0342\u0340\u0003\u0002\u0002\u0002',
  '\u0343\u0346\u0003\u0002\u0002\u0002\u0344\u0342\u0003\u0002\u0002\u0002',
  '\u0344\u0345\u0003\u0002\u0002\u0002\u0345o\u0003\u0002\u0002\u0002',
  '\u0346\u0344\u0003\u0002\u0002\u0002\u0347\u0349\u00074\u0002\u0002',
  '\u0348\u0347\u0003\u0002\u0002\u0002\u0348\u0349\u0003\u0002\u0002\u0002',
  '\u0349\u034a\u0003\u0002\u0002\u0002\u034a\u034b\u0005r:\u0002\u034b',
  'q\u0003\u0002\u0002\u0002\u034c\u0350\u0005v<\u0002\u034d\u034e\u0005',
  't;\u0002\u034e\u034f\u0005v<\u0002\u034f\u0351\u0003\u0002\u0002\u0002',
  '\u0350\u034d\u0003\u0002\u0002\u0002\u0350\u0351\u0003\u0002\u0002\u0002',
  '\u0351s\u0003\u0002\u0002\u0002\u0352\u0353\t\u0006\u0002\u0002\u0353',
  'u\u0003\u0002\u0002\u0002\u0354\u0356\u0005x=\u0002\u0355\u0354\u0003',
  '\u0002\u0002\u0002\u0355\u0356\u0003\u0002\u0002\u0002\u0356\u0357\u0003',
  '\u0002\u0002\u0002\u0357\u035d\u0005z>\u0002\u0358\u0359\u0005x=\u0002',
  '\u0359\u035a\u0005z>\u0002\u035a\u035c\u0003\u0002\u0002\u0002\u035b',
  '\u0358\u0003\u0002\u0002\u0002\u035c\u035f\u0003\u0002\u0002\u0002\u035d',
  '\u035b\u0003\u0002\u0002\u0002\u035d\u035e\u0003\u0002\u0002\u0002\u035e',
  'w\u0003\u0002\u0002\u0002\u035f\u035d\u0003\u0002\u0002\u0002\u0360',
  '\u0361\t\u0007\u0002\u0002\u0361y\u0003\u0002\u0002\u0002\u0362\u0368',
  '\u0005~@\u0002\u0363\u0364\u0005|?\u0002\u0364\u0365\u0005~@\u0002\u0365',
  '\u0367\u0003\u0002\u0002\u0002\u0366\u0363\u0003\u0002\u0002\u0002\u0367',
  '\u036a\u0003\u0002\u0002\u0002\u0368\u0366\u0003\u0002\u0002\u0002\u0368',
  '\u0369\u0003\u0002\u0002\u0002\u0369{\u0003\u0002\u0002\u0002\u036a',
  '\u0368\u0003\u0002\u0002\u0002\u036b\u036c\t\b\u0002\u0002\u036c}\u0003',
  '\u0002\u0002\u0002\u036d\u0370\u0005\u0080A\u0002\u036e\u036f\t\t\u0002',
  '\u0002\u036f\u0371\u0005\u0080A\u0002\u0370\u036e\u0003\u0002\u0002',
  '\u0002\u0370\u0371\u0003\u0002\u0002\u0002\u0371\u007f\u0003\u0002\u0002',
  '\u0002\u0372\u0392\u0007]\u0002\u0002\u0373\u0392\u0007\\\u0002\u0002',
  '\u0374\u0392\u0007&\u0002\u0002\u0375\u0392\u0007E\u0002\u0002\u0376',
  '\u037a\u0005\u0082B\u0002\u0377\u037a\u0007\u0019\u0002\u0002\u0378',
  '\u037a\u0007/\u0002\u0002\u0379\u0376\u0003\u0002\u0002\u0002\u0379',
  '\u0377\u0003\u0002\u0002\u0002\u0379\u0378\u0003\u0002\u0002\u0002\u037a',
  '\u037b\u0003\u0002\u0002\u0002\u037b\u0392\u0005\u0086D\u0002\u037c',
  '\u0392\u0005\u0084C\u0002\u037d\u037e\u0007O\u0002\u0002\u037e\u037f',
  '\u0005\u0090I\u0002\u037f\u0380\u0007P\u0002\u0002\u0380\u0392\u0003',
  '\u0002\u0002\u0002\u0381\u0382\u0007T\u0002\u0002\u0382\u0387\u0005',
  '\u0092J\u0002\u0383\u0384\u0007J\u0002\u0002\u0384\u0386\u0005\u0092',
  'J\u0002\u0385\u0383\u0003\u0002\u0002\u0002\u0386\u0389\u0003\u0002',
  '\u0002\u0002\u0387\u0385\u0003\u0002\u0002\u0002\u0387\u0388\u0003\u0002',
  '\u0002\u0002\u0388\u038a\u0003\u0002\u0002\u0002\u0389\u0387\u0003\u0002',
  '\u0002\u0002\u038a\u038b\u0007U\u0002\u0002\u038b\u0392\u0003\u0002',
  '\u0002\u0002\u038c\u038d\u0007R\u0002\u0002\u038d\u038e\u0005\u0088',
  'E\u0002\u038e\u038f\u0007S\u0002\u0002\u038f\u0392\u0003\u0002\u0002',
  '\u0002\u0390\u0392\u0007 \u0002\u0002\u0391\u0372\u0003\u0002\u0002',
  '\u0002\u0391\u0373\u0003\u0002\u0002\u0002\u0391\u0374\u0003\u0002\u0002',
  '\u0002\u0391\u0375\u0003\u0002\u0002\u0002\u0391\u0379\u0003\u0002\u0002',
  '\u0002\u0391\u037c\u0003\u0002\u0002\u0002\u0391\u037d\u0003\u0002\u0002',
  '\u0002\u0391\u0381\u0003\u0002\u0002\u0002\u0391\u038c\u0003\u0002\u0002',
  '\u0002\u0391\u0390\u0003\u0002\u0002\u0002\u0392\u0081\u0003\u0002\u0002',
  '\u0002\u0393\u0395\u0007Y\u0002\u0002\u0394\u0393\u0003\u0002\u0002',
  '\u0002\u0394\u0395\u0003\u0002\u0002\u0002\u0395\u0396\u0003\u0002\u0002',
  '\u0002\u0396\u039b\u0007[\u0002\u0002\u0397\u0398\u0007Y\u0002\u0002',
  '\u0398\u039a\u0007[\u0002\u0002\u0399\u0397\u0003\u0002\u0002\u0002',
  '\u039a\u039d\u0003\u0002\u0002\u0002\u039b\u0399\u0003\u0002\u0002\u0002',
  '\u039b\u039c\u0003\u0002\u0002\u0002\u039c\u0083\u0003\u0002\u0002\u0002',
  '\u039d\u039b\u0003\u0002\u0002\u0002\u039e\u03a0\u0007Y\u0002\u0002',
  '\u039f\u039e\u0003\u0002\u0002\u0002\u039f\u03a0\u0003\u0002\u0002\u0002',
  '\u03a0\u03a1\u0003\u0002\u0002\u0002\u03a1\u03a3\u0007[\u0002\u0002',
  '\u03a2\u03a4\u0005\u0094K\u0002\u03a3\u03a2\u0003\u0002\u0002\u0002',
  '\u03a3\u03a4\u0003\u0002\u0002\u0002\u03a4\u03ac\u0003\u0002\u0002\u0002',
  '\u03a5\u03a6\u0007Y\u0002\u0002\u03a6\u03a8\u0007[\u0002\u0002\u03a7',
  '\u03a9\u0005\u0094K\u0002\u03a8\u03a7\u0003\u0002\u0002\u0002\u03a8',
  '\u03a9\u0003\u0002\u0002\u0002\u03a9\u03ab\u0003\u0002\u0002\u0002\u03aa',
  '\u03a5\u0003\u0002\u0002\u0002\u03ab\u03ae\u0003\u0002\u0002\u0002\u03ac',
  '\u03aa\u0003\u0002\u0002\u0002\u03ac\u03ad\u0003\u0002\u0002\u0002\u03ad',
  '\u0085\u0003\u0002\u0002\u0002\u03ae\u03ac\u0003\u0002\u0002\u0002\u03af',
  '\u03b1\u0007O\u0002\u0002\u03b0\u03b2\u0005\u0088E\u0002\u03b1\u03b0',
  '\u0003\u0002\u0002\u0002\u03b1\u03b2\u0003\u0002\u0002\u0002\u03b2\u03b3',
  '\u0003\u0002\u0002\u0002\u03b3\u03b4\u0007P\u0002\u0002\u03b4\u0087',
  '\u0003\u0002\u0002\u0002\u03b5\u03ba\u0005\u008eH\u0002\u03b6\u03b7',
  '\u0007M\u0002\u0002\u03b7\u03bb\u0005\u0088E\u0002\u03b8\u03b9\u0007',
  ')\u0002\u0002\u03b9\u03bb\u0005\\/\u0002\u03ba\u03b6\u0003\u0002\u0002',
  '\u0002\u03ba\u03b8\u0003\u0002\u0002\u0002\u03ba\u03bb\u0003\u0002\u0002',
  '\u0002\u03bb\u03be\u0003\u0002\u0002\u0002\u03bc\u03be\u0005\u008aF',
  '\u0002\u03bd\u03b5\u0003\u0002\u0002\u0002\u03bd\u03bc\u0003\u0002\u0002',
  '\u0002\u03be\u0089\u0003\u0002\u0002\u0002\u03bf\u03c2\u0005\u008cG',
  '\u0002\u03c0\u03c1\u0007M\u0002\u0002\u03c1\u03c3\u0005\u008aF\u0002',
  '\u03c2\u03c0\u0003\u0002\u0002\u0002\u03c2\u03c3\u0003\u0002\u0002\u0002',
  '\u03c3\u008b\u0003\u0002\u0002\u0002\u03c4\u03c5\u0007[\u0002\u0002',
  '\u03c5\u03c6\u0007K\u0002\u0002\u03c6\u03c7\u0005\u008eH\u0002\u03c7',
  '\u008d\u0003\u0002\u0002\u0002\u03c8\u03c9\u0007*\u0002\u0002\u03c9',
  '\u03ca\u0005\u0082B\u0002\u03ca\u03cc\u0007O\u0002\u0002\u03cb\u03cd',
  '\u0005\u008aF\u0002\u03cc\u03cb\u0003\u0002\u0002\u0002\u03cc\u03cd',
  '\u0003\u0002\u0002\u0002\u03cd\u03ce\u0003\u0002\u0002\u0002\u03ce\u03cf',
  '\u0007P\u0002\u0002\u03cf\u03d2\u0003\u0002\u0002\u0002\u03d0\u03d2',
  '\u0005h5\u0002\u03d1\u03c8\u0003\u0002\u0002\u0002\u03d1\u03d0\u0003',
  '\u0002\u0002\u0002\u03d2\u008f\u0003\u0002\u0002\u0002\u03d3\u03d5\u0005',
  'h5\u0002\u03d4\u03d3\u0003\u0002\u0002\u0002\u03d4\u03d5\u0003\u0002',
  '\u0002\u0002\u03d5\u03dc\u0003\u0002\u0002\u0002\u03d6\u03d8\u0007M',
  '\u0002\u0002\u03d7\u03d9\u0005h5\u0002\u03d8\u03d7\u0003\u0002\u0002',
  '\u0002\u03d8\u03d9\u0003\u0002\u0002\u0002\u03d9\u03db\u0003\u0002\u0002',
  '\u0002\u03da\u03d6\u0003\u0002\u0002\u0002\u03db\u03de\u0003\u0002\u0002',
  '\u0002\u03dc\u03da\u0003\u0002\u0002\u0002\u03dc\u03dd\u0003\u0002\u0002',
  '\u0002\u03dd\u0091\u0003\u0002\u0002\u0002\u03de\u03dc\u0003\u0002\u0002',
  '\u0002\u03df\u03e4\u0005h5\u0002\u03e0\u03e1\u0007M\u0002\u0002\u03e1',
  '\u03e3\u0005h5\u0002\u03e2\u03e0\u0003\u0002\u0002\u0002\u03e3\u03e6',
  '\u0003\u0002\u0002\u0002\u03e4\u03e2\u0003\u0002\u0002\u0002\u03e4\u03e5',
  '\u0003\u0002\u0002\u0002\u03e5\u0093\u0003\u0002\u0002\u0002\u03e6\u03e4',
  '\u0003\u0002\u0002\u0002\u03e7\u03e8\u0007T\u0002\u0002\u03e8\u03ed',
  '\u0005\u0096L\u0002\u03e9\u03ea\u0007M\u0002\u0002\u03ea\u03ec\u0005',
  '\u0096L\u0002\u03eb\u03e9\u0003\u0002\u0002\u0002\u03ec\u03ef\u0003',
  '\u0002\u0002\u0002\u03ed\u03eb\u0003\u0002\u0002\u0002\u03ed\u03ee\u0003',
  '\u0002\u0002\u0002\u03ee\u03f0\u0003\u0002\u0002\u0002\u03ef\u03ed\u0003',
  '\u0002\u0002\u0002\u03f0\u03f1\u0007U\u0002\u0002\u03f1\u0095\u0003',
  '\u0002\u0002\u0002\u03f2\u03f5\u0007L\u0002\u0002\u03f3\u03f5\u0005',
  'h5\u0002\u03f4\u03f2\u0003\u0002\u0002\u0002\u03f4\u03f3\u0003\u0002',
  '\u0002\u0002\u03f5\u0097\u0003\u0002\u0002\u0002\u03f6\u03f8\u0005\u009a',
  'N\u0002\u03f7\u03f9\u0005\u009cO\u0002\u03f8\u03f7\u0003\u0002\u0002',
  '\u0002\u03f8\u03f9\u0003\u0002\u0002\u0002\u03f9\u0099\u0003\u0002\u0002',
  '\u0002\u03fa\u03ff\u0007\\\u0002\u0002\u03fb\u03fc\u0007Z\u0002\u0002',
  '\u03fc\u03fe\u0007\\\u0002\u0002\u03fd\u03fb\u0003\u0002\u0002\u0002',
  '\u03fe\u0401\u0003\u0002\u0002\u0002\u03ff\u03fd\u0003\u0002\u0002\u0002',
  '\u03ff\u0400\u0003\u0002\u0002\u0002\u0400\u0403\u0003\u0002\u0002\u0002',
  '\u0401\u03ff\u0003\u0002\u0002\u0002\u0402\u03fa\u0003\u0002\u0002\u0002',
  '\u0402\u0403\u0003\u0002\u0002\u0002\u0403\u009b\u0003\u0002\u0002\u0002',
  '\u0404\u0405\u0007\u0011\u0002\u0002\u0405\u0406\u00058\u001d\u0002',
  '\u0406\u009d\u0003\u0002\u0002\u0002\u0086\u00a0\u00a3\u00a6\u00ad\u00b1',
  '\u00b9\u00bc\u00c1\u00c6\u00cc\u00cf\u00d3\u00de\u00e5\u00ec\u00ef\u00f8',
  '\u00fb\u00ff\u010c\u0119\u0126\u0128\u012d\u0130\u0133\u0136\u013b\u0142',
  '\u0147\u0150\u0156\u0159\u015c\u015f\u0163\u0168\u016d\u016f\u0171\u0180',
  '\u0189\u018f\u0192\u0197\u019c\u01a1\u01a4\u01a7\u01b0\u01b5\u01be\u01c1',
  '\u01c6\u01cc\u01d0\u01d9\u01de\u01e1\u01e4\u01e8\u01ec\u01f2\u01f5\u01f9',
  '\u01fc\u0201\u0204\u0211\u0219\u021d\u0225\u0233\u023b\u024a\u0256\u0261',
  '\u0266\u026f\u0272\u027f\u028a\u028f\u0298\u029b\u02a8\u02b6\u02c1\u02c7',
  '\u02d1\u02df\u02ea\u02ef\u02fd\u0308\u030d\u0326\u032c\u0333\u0335\u033c',
  '\u0344\u0348\u0350\u0355\u035d\u0368\u0370\u0379\u0387\u0391\u0394\u039b',
  '\u039f\u03a3\u03a8\u03ac\u03b1\u03ba\u03bd\u03c2\u03cc\u03d1\u03d4\u03d8',
  '\u03dc\u03e4\u03ed\u03f4\u03f8\u03ff\u0402'].join('')

const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN)

const decisionsToDFA = atn.decisionToState.map(function (ds, index) { return new antlr4.dfa.DFA(ds, index) })

const sharedContextCache = new antlr4.PredictionContextCache()

const literalNames = [null, "'<'", "'<='", "'>'", "'>='", "'=='", "'<>'",
  "'-'", "'.+'", "'.-'", "'*'", "'/'", "'./'", "'algorithm'",
  "'and'", "'annotation'", "'block'", "'break'", "'class'",
  "'connect'", "'connector'", "'constant'", "'constrainedby'",
  "'der'", "'discrete'", "'each'", "'else'", "'elseif'",
  "'elsewhen'", "'encapsulated'", "'end'", "'enumeration'",
  "'equation'", "'expandable'", "'extends'", "'external'",
  "'false'", "'final'", "'flow'", "'for'", "'function'",
  "'if'", "'import'", "'impure'", "'in'", "'initial'",
  "'inner'", "'input'", "'loop'", "'model'", "'not'",
  "'operator'", "'or'", "'outer'", "'output'", "'package'",
  "'parameter'", "'partial'", "'protected'", "'public'",
  "'pure'", "'record'", "'redeclare'", "'replaceable'",
  "'return'", "'stream'", "'then'", "'true'", "'type'",
  "'when'", "'while'", "'within'", "';'", "'='", "':'",
  "','", "'.*'", "'('", "')'", "'.{'", "'{'", "'}'",
  "'['", "']'", "':='", "'^'", "'.^'", "'.'", "'+'"]

const symbolicNames = [null, null, null, null, null, null, null, null, null,
  null, null, null, null, 'ALGORITHM', 'AND', 'ANNOTATION',
  'BLOCK', 'BREAK', 'CLASS', 'CONNECT', 'CONNECTOR',
  'CONSTANT', 'CONSTRAINEDBY', 'DER', 'DISCRETE', 'EACH',
  'ELSE', 'ELSEIF', 'ELSEWHEN', 'ENCAPSULATED', 'END',
  'ENUMERATION', 'EQUATION', 'EXPANDABLE', 'EXTENDS',
  'EXTERNAL', 'FALSE', 'FINAL', 'FLOW', 'FOR', 'FUNCTION',
  'IF', 'IMPORT', 'IMPURE', 'IN', 'INITIAL', 'INNER',
  'INPUT', 'LOOP', 'MODEL', 'NOT', 'OPERATOR', 'OR',
  'OUTER', 'OUTPUT', 'PACKAGE', 'PARAMETER', 'PARTIAL',
  'PROTECTED', 'PUBLIC', 'PURE', 'RECORD', 'REDECLARE',
  'REPLACEABLE', 'RETURN', 'STREAM', 'THEN', 'TRUE',
  'TYPE', 'WHEN', 'WHILE', 'WITHIN', 'SYMBOL_SEMICOLON',
  'SYMBOL_EQUAL', 'SYMBOL_COLON', 'SYMBOL_COMMA', 'SYMBOL_DOTSTAR',
  'SYMBOL_LRBRACKET', 'SYMBOL_RRBRACKET', 'SYMBOL_DOTLCBRACKET',
  'SYMBOL_LCBRACKET', 'SYMBOL_RCBRACKET', 'SYMBOL_LSBRACKET',
  'SYMBOL_RSBRACKET', 'SYMBOL_COLONEQUAL', 'SYMBOL_CARET',
  'SYMBOL_DOTCARET', 'SYMBOL_DOT', 'SYMBOL_PLUS', 'IDENT',
  'STRING', 'UNSIGNED_NUMBER', 'WS', 'COMMENT', 'LINE_COMMENT']

const ruleNames = ['stored_definition', 'class_definition', 'class_specifier',
  'class_prefixes', 'long_class_specifier', 'short_class_specifier',
  'der_class_specifier', 'base_prefix', 'enum_list', 'enumeration_literal',
  'composition', 'language_specification', 'external_function_call',
  'element_list', 'element', 'import_clause', 'import_list',
  'extends_clause', 'constraining_clause', 'component_clause',
  'type_prefix', 'type_specifier', 'component_list', 'component_declaration',
  'condition_attribute', 'declaration', 'modification',
  'class_modification', 'argument_list', 'argument', 'element_modification_or_replaceable',
  'element_modification', 'element_redeclaration', 'element_replaceable',
  'component_clause1', 'component_declaration1', 'short_class_definition',
  'equation_section', 'algorithm_section', 'equation',
  'statement', 'if_equation', 'if_statement', 'for_equation',
  'for_statement', 'for_indices', 'for_index', 'while_statement',
  'when_equation', 'when_statement', 'connect_clause',
  'expression', 'simple_expression', 'logical_expression',
  'logical_term', 'logical_factor', 'relation', 'rel_op',
  'arithmetic_expression', 'add_op', 'term', 'mul_op',
  'factor', 'primary', 'name', 'component_reference', 'function_call_args',
  'function_arguments', 'named_arguments', 'named_argument',
  'function_argument', 'output_expression_list', 'expression_list',
  'array_subscripts', 'subscript', 'comment', 'string_comment',
  'annotation']

function modelicaParser (input) {
  antlr4.Parser.call(this, input)
  this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache)
  this.ruleNames = ruleNames
  this.literalNames = literalNames
  this.symbolicNames = symbolicNames
  return this
}

modelicaParser.prototype = Object.create(antlr4.Parser.prototype)
modelicaParser.prototype.constructor = modelicaParser

Object.defineProperty(modelicaParser.prototype, 'atn', {
  get: function () {
    return atn
  }
})

modelicaParser.EOF = antlr4.Token.EOF
modelicaParser.T__0 = 1
modelicaParser.T__1 = 2
modelicaParser.T__2 = 3
modelicaParser.T__3 = 4
modelicaParser.T__4 = 5
modelicaParser.T__5 = 6
modelicaParser.T__6 = 7
modelicaParser.T__7 = 8
modelicaParser.T__8 = 9
modelicaParser.T__9 = 10
modelicaParser.T__10 = 11
modelicaParser.T__11 = 12
modelicaParser.ALGORITHM = 13
modelicaParser.AND = 14
modelicaParser.ANNOTATION = 15
modelicaParser.BLOCK = 16
modelicaParser.BREAK = 17
modelicaParser.CLASS = 18
modelicaParser.CONNECT = 19
modelicaParser.CONNECTOR = 20
modelicaParser.CONSTANT = 21
modelicaParser.CONSTRAINEDBY = 22
modelicaParser.DER = 23
modelicaParser.DISCRETE = 24
modelicaParser.EACH = 25
modelicaParser.ELSE = 26
modelicaParser.ELSEIF = 27
modelicaParser.ELSEWHEN = 28
modelicaParser.ENCAPSULATED = 29
modelicaParser.END = 30
modelicaParser.ENUMERATION = 31
modelicaParser.EQUATION = 32
modelicaParser.EXPANDABLE = 33
modelicaParser.EXTENDS = 34
modelicaParser.EXTERNAL = 35
modelicaParser.FALSE = 36
modelicaParser.FINAL = 37
modelicaParser.FLOW = 38
modelicaParser.FOR = 39
modelicaParser.FUNCTION = 40
modelicaParser.IF = 41
modelicaParser.IMPORT = 42
modelicaParser.IMPURE = 43
modelicaParser.IN = 44
modelicaParser.INITIAL = 45
modelicaParser.INNER = 46
modelicaParser.INPUT = 47
modelicaParser.LOOP = 48
modelicaParser.MODEL = 49
modelicaParser.NOT = 50
modelicaParser.OPERATOR = 51
modelicaParser.OR = 52
modelicaParser.OUTER = 53
modelicaParser.OUTPUT = 54
modelicaParser.PACKAGE = 55
modelicaParser.PARAMETER = 56
modelicaParser.PARTIAL = 57
modelicaParser.PROTECTED = 58
modelicaParser.PUBLIC = 59
modelicaParser.PURE = 60
modelicaParser.RECORD = 61
modelicaParser.REDECLARE = 62
modelicaParser.REPLACEABLE = 63
modelicaParser.RETURN = 64
modelicaParser.STREAM = 65
modelicaParser.THEN = 66
modelicaParser.TRUE = 67
modelicaParser.TYPE = 68
modelicaParser.WHEN = 69
modelicaParser.WHILE = 70
modelicaParser.WITHIN = 71
modelicaParser.SYMBOL_SEMICOLON = 72
modelicaParser.SYMBOL_EQUAL = 73
modelicaParser.SYMBOL_COLON = 74
modelicaParser.SYMBOL_COMMA = 75
modelicaParser.SYMBOL_DOTSTAR = 76
modelicaParser.SYMBOL_LRBRACKET = 77
modelicaParser.SYMBOL_RRBRACKET = 78
modelicaParser.SYMBOL_DOTLCBRACKET = 79
modelicaParser.SYMBOL_LCBRACKET = 80
modelicaParser.SYMBOL_RCBRACKET = 81
modelicaParser.SYMBOL_LSBRACKET = 82
modelicaParser.SYMBOL_RSBRACKET = 83
modelicaParser.SYMBOL_COLONEQUAL = 84
modelicaParser.SYMBOL_CARET = 85
modelicaParser.SYMBOL_DOTCARET = 86
modelicaParser.SYMBOL_DOT = 87
modelicaParser.SYMBOL_PLUS = 88
modelicaParser.IDENT = 89
modelicaParser.STRING = 90
modelicaParser.UNSIGNED_NUMBER = 91
modelicaParser.WS = 92
modelicaParser.COMMENT = 93
modelicaParser.LINE_COMMENT = 94

modelicaParser.RULE_stored_definition = 0
modelicaParser.RULE_class_definition = 1
modelicaParser.RULE_class_specifier = 2
modelicaParser.RULE_class_prefixes = 3
modelicaParser.RULE_long_class_specifier = 4
modelicaParser.RULE_short_class_specifier = 5
modelicaParser.RULE_der_class_specifier = 6
modelicaParser.RULE_base_prefix = 7
modelicaParser.RULE_enum_list = 8
modelicaParser.RULE_enumeration_literal = 9
modelicaParser.RULE_composition = 10
modelicaParser.RULE_language_specification = 11
modelicaParser.RULE_external_function_call = 12
modelicaParser.RULE_element_list = 13
modelicaParser.RULE_element = 14
modelicaParser.RULE_import_clause = 15
modelicaParser.RULE_import_list = 16
modelicaParser.RULE_extends_clause = 17
modelicaParser.RULE_constraining_clause = 18
modelicaParser.RULE_component_clause = 19
modelicaParser.RULE_type_prefix = 20
modelicaParser.RULE_type_specifier = 21
modelicaParser.RULE_component_list = 22
modelicaParser.RULE_component_declaration = 23
modelicaParser.RULE_condition_attribute = 24
modelicaParser.RULE_declaration = 25
modelicaParser.RULE_modification = 26
modelicaParser.RULE_class_modification = 27
modelicaParser.RULE_argument_list = 28
modelicaParser.RULE_argument = 29
modelicaParser.RULE_element_modification_or_replaceable = 30
modelicaParser.RULE_element_modification = 31
modelicaParser.RULE_element_redeclaration = 32
modelicaParser.RULE_element_replaceable = 33
modelicaParser.RULE_component_clause1 = 34
modelicaParser.RULE_component_declaration1 = 35
modelicaParser.RULE_short_class_definition = 36
modelicaParser.RULE_equation_section = 37
modelicaParser.RULE_algorithm_section = 38
modelicaParser.RULE_equation = 39
modelicaParser.RULE_statement = 40
modelicaParser.RULE_if_equation = 41
modelicaParser.RULE_if_statement = 42
modelicaParser.RULE_for_equation = 43
modelicaParser.RULE_for_statement = 44
modelicaParser.RULE_for_indices = 45
modelicaParser.RULE_for_index = 46
modelicaParser.RULE_while_statement = 47
modelicaParser.RULE_when_equation = 48
modelicaParser.RULE_when_statement = 49
modelicaParser.RULE_connect_clause = 50
modelicaParser.RULE_expression = 51
modelicaParser.RULE_simple_expression = 52
modelicaParser.RULE_logical_expression = 53
modelicaParser.RULE_logical_term = 54
modelicaParser.RULE_logical_factor = 55
modelicaParser.RULE_relation = 56
modelicaParser.RULE_rel_op = 57
modelicaParser.RULE_arithmetic_expression = 58
modelicaParser.RULE_add_op = 59
modelicaParser.RULE_term = 60
modelicaParser.RULE_mul_op = 61
modelicaParser.RULE_factor = 62
modelicaParser.RULE_primary = 63
modelicaParser.RULE_name = 64
modelicaParser.RULE_component_reference = 65
modelicaParser.RULE_function_call_args = 66
modelicaParser.RULE_function_arguments = 67
modelicaParser.RULE_named_arguments = 68
modelicaParser.RULE_named_argument = 69
modelicaParser.RULE_function_argument = 70
modelicaParser.RULE_output_expression_list = 71
modelicaParser.RULE_expression_list = 72
modelicaParser.RULE_array_subscripts = 73
modelicaParser.RULE_subscript = 74
modelicaParser.RULE_comment = 75
modelicaParser.RULE_string_comment = 76
modelicaParser.RULE_annotation = 77

function Stored_definitionContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_stored_definition
  return this
}

Stored_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Stored_definitionContext.prototype.constructor = Stored_definitionContext

Stored_definitionContext.prototype.WITHIN = function () {
  return this.getToken(modelicaParser.WITHIN, 0)
}

Stored_definitionContext.prototype.SYMBOL_SEMICOLON = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_SEMICOLON)
  } else {
    return this.getToken(modelicaParser.SYMBOL_SEMICOLON, i)
  }
}

Stored_definitionContext.prototype.class_definition = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(Class_definitionContext)
  } else {
    return this.getTypedRuleContext(Class_definitionContext, i)
  }
}

Stored_definitionContext.prototype.name = function () {
  return this.getTypedRuleContext(NameContext, 0)
}

Stored_definitionContext.prototype.FINAL = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.FINAL)
  } else {
    return this.getToken(modelicaParser.FINAL, i)
  }
}

Stored_definitionContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterStored_definition(this)
  }
}

Stored_definitionContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitStored_definition(this)
  }
}

Stored_definitionContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitStored_definition(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Stored_definitionContext = Stored_definitionContext

modelicaParser.prototype.stored_definition = function () {
  const localctx = new Stored_definitionContext(this, this._ctx, this.state)
  this.enterRule(localctx, 0, modelicaParser.RULE_stored_definition)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 161
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.WITHIN) {
      this.state = 156
      this.match(modelicaParser.WITHIN)
      this.state = 158
      this._errHandler.sync(this)
      _la = this._input.LA(1)
      if (_la === modelicaParser.SYMBOL_DOT || _la === modelicaParser.IDENT) {
        this.state = 157
        this.name()
      }

      this.state = 160
      this.match(modelicaParser.SYMBOL_SEMICOLON)
    }

    this.state = 171
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (((((_la - 16)) & ~0x1f) == 0 && ((1 << (_la - 16)) & ((1 << (modelicaParser.BLOCK - 16)) | (1 << (modelicaParser.CLASS - 16)) | (1 << (modelicaParser.CONNECTOR - 16)) | (1 << (modelicaParser.ENCAPSULATED - 16)) | (1 << (modelicaParser.EXPANDABLE - 16)) | (1 << (modelicaParser.FINAL - 16)) | (1 << (modelicaParser.FUNCTION - 16)) | (1 << (modelicaParser.IMPURE - 16)))) !== 0) || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (modelicaParser.MODEL - 49)) | (1 << (modelicaParser.OPERATOR - 49)) | (1 << (modelicaParser.PACKAGE - 49)) | (1 << (modelicaParser.PARTIAL - 49)) | (1 << (modelicaParser.PURE - 49)) | (1 << (modelicaParser.RECORD - 49)) | (1 << (modelicaParser.TYPE - 49)))) !== 0)) {
      this.state = 164
      this._errHandler.sync(this)
      _la = this._input.LA(1)
      if (_la === modelicaParser.FINAL) {
        this.state = 163
        this.match(modelicaParser.FINAL)
      }

      this.state = 166
      this.class_definition()
      this.state = 167
      this.match(modelicaParser.SYMBOL_SEMICOLON)
      this.state = 173
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Class_definitionContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_class_definition
  return this
}

Class_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Class_definitionContext.prototype.constructor = Class_definitionContext

Class_definitionContext.prototype.class_prefixes = function () {
  return this.getTypedRuleContext(Class_prefixesContext, 0)
}

Class_definitionContext.prototype.class_specifier = function () {
  return this.getTypedRuleContext(Class_specifierContext, 0)
}

Class_definitionContext.prototype.ENCAPSULATED = function () {
  return this.getToken(modelicaParser.ENCAPSULATED, 0)
}

Class_definitionContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterClass_definition(this)
  }
}

Class_definitionContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitClass_definition(this)
  }
}

Class_definitionContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitClass_definition(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Class_definitionContext = Class_definitionContext

modelicaParser.prototype.class_definition = function () {
  const localctx = new Class_definitionContext(this, this._ctx, this.state)
  this.enterRule(localctx, 2, modelicaParser.RULE_class_definition)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 175
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.ENCAPSULATED) {
      this.state = 174
      this.match(modelicaParser.ENCAPSULATED)
    }

    this.state = 177
    this.class_prefixes()
    this.state = 178
    this.class_specifier()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Class_specifierContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_class_specifier
  return this
}

Class_specifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Class_specifierContext.prototype.constructor = Class_specifierContext

Class_specifierContext.prototype.long_class_specifier = function () {
  return this.getTypedRuleContext(Long_class_specifierContext, 0)
}

Class_specifierContext.prototype.short_class_specifier = function () {
  return this.getTypedRuleContext(Short_class_specifierContext, 0)
}

Class_specifierContext.prototype.der_class_specifier = function () {
  return this.getTypedRuleContext(Der_class_specifierContext, 0)
}

Class_specifierContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterClass_specifier(this)
  }
}

Class_specifierContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitClass_specifier(this)
  }
}

Class_specifierContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitClass_specifier(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Class_specifierContext = Class_specifierContext

modelicaParser.prototype.class_specifier = function () {
  const localctx = new Class_specifierContext(this, this._ctx, this.state)
  this.enterRule(localctx, 4, modelicaParser.RULE_class_specifier)
  try {
    this.state = 183
    this._errHandler.sync(this)
    const la_ = this._interp.adaptivePredict(this._input, 5, this._ctx)
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1)
        this.state = 180
        this.long_class_specifier()
        break

      case 2:
        this.enterOuterAlt(localctx, 2)
        this.state = 181
        this.short_class_specifier()
        break

      case 3:
        this.enterOuterAlt(localctx, 3)
        this.state = 182
        this.der_class_specifier()
        break
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Class_prefixesContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_class_prefixes
  return this
}

Class_prefixesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Class_prefixesContext.prototype.constructor = Class_prefixesContext

Class_prefixesContext.prototype.CLASS = function () {
  return this.getToken(modelicaParser.CLASS, 0)
}

Class_prefixesContext.prototype.MODEL = function () {
  return this.getToken(modelicaParser.MODEL, 0)
}

Class_prefixesContext.prototype.RECORD = function () {
  return this.getToken(modelicaParser.RECORD, 0)
}

Class_prefixesContext.prototype.BLOCK = function () {
  return this.getToken(modelicaParser.BLOCK, 0)
}

Class_prefixesContext.prototype.CONNECTOR = function () {
  return this.getToken(modelicaParser.CONNECTOR, 0)
}

Class_prefixesContext.prototype.TYPE = function () {
  return this.getToken(modelicaParser.TYPE, 0)
}

Class_prefixesContext.prototype.PACKAGE = function () {
  return this.getToken(modelicaParser.PACKAGE, 0)
}

Class_prefixesContext.prototype.FUNCTION = function () {
  return this.getToken(modelicaParser.FUNCTION, 0)
}

Class_prefixesContext.prototype.OPERATOR = function () {
  return this.getToken(modelicaParser.OPERATOR, 0)
}

Class_prefixesContext.prototype.PARTIAL = function () {
  return this.getToken(modelicaParser.PARTIAL, 0)
}

Class_prefixesContext.prototype.EXPANDABLE = function () {
  return this.getToken(modelicaParser.EXPANDABLE, 0)
}

Class_prefixesContext.prototype.PURE = function () {
  return this.getToken(modelicaParser.PURE, 0)
}

Class_prefixesContext.prototype.IMPURE = function () {
  return this.getToken(modelicaParser.IMPURE, 0)
}

Class_prefixesContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterClass_prefixes(this)
  }
}

Class_prefixesContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitClass_prefixes(this)
  }
}

Class_prefixesContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitClass_prefixes(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Class_prefixesContext = Class_prefixesContext

modelicaParser.prototype.class_prefixes = function () {
  const localctx = new Class_prefixesContext(this, this._ctx, this.state)
  this.enterRule(localctx, 6, modelicaParser.RULE_class_prefixes)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 186
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.PARTIAL) {
      this.state = 185
      this.match(modelicaParser.PARTIAL)
    }

    this.state = 209
    this._errHandler.sync(this)
    const la_ = this._interp.adaptivePredict(this._input, 11, this._ctx)
    switch (la_) {
      case 1:
        this.state = 188
        this.match(modelicaParser.CLASS)
        break

      case 2:
        this.state = 189
        this.match(modelicaParser.MODEL)
        break

      case 3:
        this.state = 191
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        if (_la === modelicaParser.OPERATOR) {
          this.state = 190
          this.match(modelicaParser.OPERATOR)
        }

        this.state = 193
        this.match(modelicaParser.RECORD)
        break

      case 4:
        this.state = 194
        this.match(modelicaParser.BLOCK)
        break

      case 5:
        this.state = 196
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        if (_la === modelicaParser.EXPANDABLE) {
          this.state = 195
          this.match(modelicaParser.EXPANDABLE)
        }

        this.state = 198
        this.match(modelicaParser.CONNECTOR)
        break

      case 6:
        this.state = 199
        this.match(modelicaParser.TYPE)
        break

      case 7:
        this.state = 200
        this.match(modelicaParser.PACKAGE)
        break

      case 8:
        this.state = 202
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        if (_la === modelicaParser.IMPURE || _la === modelicaParser.PURE) {
          this.state = 201
          _la = this._input.LA(1)
          if (!(_la === modelicaParser.IMPURE || _la === modelicaParser.PURE)) {
            this._errHandler.recoverInline(this)
          } else {
                	this._errHandler.reportMatch(this)
            this.consume()
          }
        }

        this.state = 205
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        if (_la === modelicaParser.OPERATOR) {
          this.state = 204
          this.match(modelicaParser.OPERATOR)
        }

        this.state = 207
        this.match(modelicaParser.FUNCTION)
        break

      case 9:
        this.state = 208
        this.match(modelicaParser.OPERATOR)
        break
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Long_class_specifierContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_long_class_specifier
  return this
}

Long_class_specifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Long_class_specifierContext.prototype.constructor = Long_class_specifierContext

Long_class_specifierContext.prototype.IDENT = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.IDENT)
  } else {
    return this.getToken(modelicaParser.IDENT, i)
  }
}

Long_class_specifierContext.prototype.string_comment = function () {
  return this.getTypedRuleContext(String_commentContext, 0)
}

Long_class_specifierContext.prototype.composition = function () {
  return this.getTypedRuleContext(CompositionContext, 0)
}

Long_class_specifierContext.prototype.END = function () {
  return this.getToken(modelicaParser.END, 0)
}

Long_class_specifierContext.prototype.EXTENDS = function () {
  return this.getToken(modelicaParser.EXTENDS, 0)
}

Long_class_specifierContext.prototype.class_modification = function () {
  return this.getTypedRuleContext(Class_modificationContext, 0)
}

Long_class_specifierContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterLong_class_specifier(this)
  }
}

Long_class_specifierContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitLong_class_specifier(this)
  }
}

Long_class_specifierContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitLong_class_specifier(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Long_class_specifierContext = Long_class_specifierContext

modelicaParser.prototype.long_class_specifier = function () {
  const localctx = new Long_class_specifierContext(this, this._ctx, this.state)
  this.enterRule(localctx, 8, modelicaParser.RULE_long_class_specifier)
  let _la = 0 // Token type
  try {
    this.state = 227
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case modelicaParser.IDENT:
        this.enterOuterAlt(localctx, 1)
        this.state = 211
        this.match(modelicaParser.IDENT)
        this.state = 212
        this.string_comment()
        this.state = 213
        this.composition()
        this.state = 214
        this.match(modelicaParser.END)
        this.state = 215
        this.match(modelicaParser.IDENT)
        break
      case modelicaParser.EXTENDS:
        this.enterOuterAlt(localctx, 2)
        this.state = 217
        this.match(modelicaParser.EXTENDS)
        this.state = 218
        this.match(modelicaParser.IDENT)
        this.state = 220
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        if (_la === modelicaParser.SYMBOL_LRBRACKET) {
          this.state = 219
          this.class_modification()
        }

        this.state = 222
        this.string_comment()
        this.state = 223
        this.composition()
        this.state = 224
        this.match(modelicaParser.END)
        this.state = 225
        this.match(modelicaParser.IDENT)
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Short_class_specifierContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_short_class_specifier
  return this
}

Short_class_specifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Short_class_specifierContext.prototype.constructor = Short_class_specifierContext

Short_class_specifierContext.prototype.IDENT = function () {
  return this.getToken(modelicaParser.IDENT, 0)
}

Short_class_specifierContext.prototype.SYMBOL_EQUAL = function () {
  return this.getToken(modelicaParser.SYMBOL_EQUAL, 0)
}

Short_class_specifierContext.prototype.base_prefix = function () {
  return this.getTypedRuleContext(Base_prefixContext, 0)
}

Short_class_specifierContext.prototype.name = function () {
  return this.getTypedRuleContext(NameContext, 0)
}

Short_class_specifierContext.prototype.comment = function () {
  return this.getTypedRuleContext(CommentContext, 0)
}

Short_class_specifierContext.prototype.array_subscripts = function () {
  return this.getTypedRuleContext(Array_subscriptsContext, 0)
}

Short_class_specifierContext.prototype.class_modification = function () {
  return this.getTypedRuleContext(Class_modificationContext, 0)
}

Short_class_specifierContext.prototype.ENUMERATION = function () {
  return this.getToken(modelicaParser.ENUMERATION, 0)
}

Short_class_specifierContext.prototype.SYMBOL_LRBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_LRBRACKET, 0)
}

Short_class_specifierContext.prototype.SYMBOL_RRBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_RRBRACKET, 0)
}

Short_class_specifierContext.prototype.SYMBOL_COLON = function () {
  return this.getToken(modelicaParser.SYMBOL_COLON, 0)
}

Short_class_specifierContext.prototype.enum_list = function () {
  return this.getTypedRuleContext(Enum_listContext, 0)
}

Short_class_specifierContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterShort_class_specifier(this)
  }
}

Short_class_specifierContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitShort_class_specifier(this)
  }
}

Short_class_specifierContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitShort_class_specifier(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Short_class_specifierContext = Short_class_specifierContext

modelicaParser.prototype.short_class_specifier = function () {
  const localctx = new Short_class_specifierContext(this, this._ctx, this.state)
  this.enterRule(localctx, 10, modelicaParser.RULE_short_class_specifier)
  let _la = 0 // Token type
  try {
    this.state = 253
    this._errHandler.sync(this)
    const la_ = this._interp.adaptivePredict(this._input, 18, this._ctx)
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1)
        this.state = 229
        this.match(modelicaParser.IDENT)
        this.state = 230
        this.match(modelicaParser.SYMBOL_EQUAL)
        this.state = 231
        this.base_prefix()
        this.state = 232
        this.name()
        this.state = 234
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        if (_la === modelicaParser.SYMBOL_LSBRACKET) {
          this.state = 233
          this.array_subscripts()
        }

        this.state = 237
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        if (_la === modelicaParser.SYMBOL_LRBRACKET) {
          this.state = 236
          this.class_modification()
        }

        this.state = 239
        this.comment()
        break

      case 2:
        this.enterOuterAlt(localctx, 2)
        this.state = 241
        this.match(modelicaParser.IDENT)
        this.state = 242
        this.match(modelicaParser.SYMBOL_EQUAL)
        this.state = 243
        this.match(modelicaParser.ENUMERATION)
        this.state = 244
        this.match(modelicaParser.SYMBOL_LRBRACKET)
        this.state = 249
        this._errHandler.sync(this)
        switch (this._input.LA(1)) {
          case modelicaParser.SYMBOL_RRBRACKET:
          case modelicaParser.IDENT:
            this.state = 246
            this._errHandler.sync(this)
            _la = this._input.LA(1)
            if (_la === modelicaParser.IDENT) {
              this.state = 245
              this.enum_list()
            }

            break
          case modelicaParser.SYMBOL_COLON:
            this.state = 248
            this.match(modelicaParser.SYMBOL_COLON)
            break
          default:
            throw new antlr4.error.NoViableAltException(this)
        }
        this.state = 251
        this.match(modelicaParser.SYMBOL_RRBRACKET)
        this.state = 252
        this.comment()
        break
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Der_class_specifierContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_der_class_specifier
  return this
}

Der_class_specifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Der_class_specifierContext.prototype.constructor = Der_class_specifierContext

Der_class_specifierContext.prototype.IDENT = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.IDENT)
  } else {
    return this.getToken(modelicaParser.IDENT, i)
  }
}

Der_class_specifierContext.prototype.SYMBOL_EQUAL = function () {
  return this.getToken(modelicaParser.SYMBOL_EQUAL, 0)
}

Der_class_specifierContext.prototype.DER = function () {
  return this.getToken(modelicaParser.DER, 0)
}

Der_class_specifierContext.prototype.SYMBOL_LRBRACKET = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_LRBRACKET)
  } else {
    return this.getToken(modelicaParser.SYMBOL_LRBRACKET, i)
  }
}

Der_class_specifierContext.prototype.name = function () {
  return this.getTypedRuleContext(NameContext, 0)
}

Der_class_specifierContext.prototype.SYMBOL_COMMA = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_COMMA)
  } else {
    return this.getToken(modelicaParser.SYMBOL_COMMA, i)
  }
}

Der_class_specifierContext.prototype.comment = function () {
  return this.getTypedRuleContext(CommentContext, 0)
}

Der_class_specifierContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterDer_class_specifier(this)
  }
}

Der_class_specifierContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitDer_class_specifier(this)
  }
}

Der_class_specifierContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitDer_class_specifier(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Der_class_specifierContext = Der_class_specifierContext

modelicaParser.prototype.der_class_specifier = function () {
  const localctx = new Der_class_specifierContext(this, this._ctx, this.state)
  this.enterRule(localctx, 12, modelicaParser.RULE_der_class_specifier)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 255
    this.match(modelicaParser.IDENT)
    this.state = 256
    this.match(modelicaParser.SYMBOL_EQUAL)
    this.state = 257
    this.match(modelicaParser.DER)
    this.state = 258
    this.match(modelicaParser.SYMBOL_LRBRACKET)
    this.state = 259
    this.name()
    this.state = 260
    this.match(modelicaParser.SYMBOL_COMMA)
    this.state = 261
    this.match(modelicaParser.IDENT)
    this.state = 266
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.SYMBOL_COMMA) {
      this.state = 262
      this.match(modelicaParser.SYMBOL_COMMA)
      this.state = 263
      this.match(modelicaParser.IDENT)
      this.state = 268
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
    this.state = 269
    this.match(modelicaParser.SYMBOL_LRBRACKET)
    this.state = 270
    this.comment()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Base_prefixContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_base_prefix
  return this
}

Base_prefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Base_prefixContext.prototype.constructor = Base_prefixContext

Base_prefixContext.prototype.type_prefix = function () {
  return this.getTypedRuleContext(Type_prefixContext, 0)
}

Base_prefixContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterBase_prefix(this)
  }
}

Base_prefixContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitBase_prefix(this)
  }
}

Base_prefixContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitBase_prefix(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Base_prefixContext = Base_prefixContext

modelicaParser.prototype.base_prefix = function () {
  const localctx = new Base_prefixContext(this, this._ctx, this.state)
  this.enterRule(localctx, 14, modelicaParser.RULE_base_prefix)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 272
    this.type_prefix()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Enum_listContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_enum_list
  return this
}

Enum_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Enum_listContext.prototype.constructor = Enum_listContext

Enum_listContext.prototype.enumeration_literal = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(Enumeration_literalContext)
  } else {
    return this.getTypedRuleContext(Enumeration_literalContext, i)
  }
}

Enum_listContext.prototype.SYMBOL_COMMA = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_COMMA)
  } else {
    return this.getToken(modelicaParser.SYMBOL_COMMA, i)
  }
}

Enum_listContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterEnum_list(this)
  }
}

Enum_listContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitEnum_list(this)
  }
}

Enum_listContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitEnum_list(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Enum_listContext = Enum_listContext

modelicaParser.prototype.enum_list = function () {
  const localctx = new Enum_listContext(this, this._ctx, this.state)
  this.enterRule(localctx, 16, modelicaParser.RULE_enum_list)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 274
    this.enumeration_literal()
    this.state = 279
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.SYMBOL_COMMA) {
      this.state = 275
      this.match(modelicaParser.SYMBOL_COMMA)
      this.state = 276
      this.enumeration_literal()
      this.state = 281
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Enumeration_literalContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_enumeration_literal
  return this
}

Enumeration_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Enumeration_literalContext.prototype.constructor = Enumeration_literalContext

Enumeration_literalContext.prototype.IDENT = function () {
  return this.getToken(modelicaParser.IDENT, 0)
}

Enumeration_literalContext.prototype.comment = function () {
  return this.getTypedRuleContext(CommentContext, 0)
}

Enumeration_literalContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterEnumeration_literal(this)
  }
}

Enumeration_literalContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitEnumeration_literal(this)
  }
}

Enumeration_literalContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitEnumeration_literal(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Enumeration_literalContext = Enumeration_literalContext

modelicaParser.prototype.enumeration_literal = function () {
  const localctx = new Enumeration_literalContext(this, this._ctx, this.state)
  this.enterRule(localctx, 18, modelicaParser.RULE_enumeration_literal)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 282
    this.match(modelicaParser.IDENT)
    this.state = 283
    this.comment()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function CompositionContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_composition
  return this
}

CompositionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
CompositionContext.prototype.constructor = CompositionContext

CompositionContext.prototype.element_list = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(Element_listContext)
  } else {
    return this.getTypedRuleContext(Element_listContext, i)
  }
}

CompositionContext.prototype.PUBLIC = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.PUBLIC)
  } else {
    return this.getToken(modelicaParser.PUBLIC, i)
  }
}

CompositionContext.prototype.PROTECTED = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.PROTECTED)
  } else {
    return this.getToken(modelicaParser.PROTECTED, i)
  }
}

CompositionContext.prototype.equation_section = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(Equation_sectionContext)
  } else {
    return this.getTypedRuleContext(Equation_sectionContext, i)
  }
}

CompositionContext.prototype.algorithm_section = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(Algorithm_sectionContext)
  } else {
    return this.getTypedRuleContext(Algorithm_sectionContext, i)
  }
}

CompositionContext.prototype.EXTERNAL = function () {
  return this.getToken(modelicaParser.EXTERNAL, 0)
}

CompositionContext.prototype.SYMBOL_SEMICOLON = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_SEMICOLON)
  } else {
    return this.getToken(modelicaParser.SYMBOL_SEMICOLON, i)
  }
}

CompositionContext.prototype.annotation = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(AnnotationContext)
  } else {
    return this.getTypedRuleContext(AnnotationContext, i)
  }
}

CompositionContext.prototype.language_specification = function () {
  return this.getTypedRuleContext(Language_specificationContext, 0)
}

CompositionContext.prototype.external_function_call = function () {
  return this.getTypedRuleContext(External_function_callContext, 0)
}

CompositionContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterComposition(this)
  }
}

CompositionContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitComposition(this)
  }
}

CompositionContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitComposition(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.CompositionContext = CompositionContext

modelicaParser.prototype.composition = function () {
  const localctx = new CompositionContext(this, this._ctx, this.state)
  this.enterRule(localctx, 20, modelicaParser.RULE_composition)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 285
    this.element_list()
    this.state = 294
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.ALGORITHM || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (modelicaParser.EQUATION - 32)) | (1 << (modelicaParser.INITIAL - 32)) | (1 << (modelicaParser.PROTECTED - 32)) | (1 << (modelicaParser.PUBLIC - 32)))) !== 0)) {
      this.state = 292
      this._errHandler.sync(this)
      const la_ = this._interp.adaptivePredict(this._input, 21, this._ctx)
      switch (la_) {
        case 1:
          this.state = 286
          this.match(modelicaParser.PUBLIC)
          this.state = 287
          this.element_list()
          break

        case 2:
          this.state = 288
          this.match(modelicaParser.PROTECTED)
          this.state = 289
          this.element_list()
          break

        case 3:
          this.state = 290
          this.equation_section()
          break

        case 4:
          this.state = 291
          this.algorithm_section()
          break
      }
      this.state = 296
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
    this.state = 308
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.EXTERNAL) {
      this.state = 297
      this.match(modelicaParser.EXTERNAL)
      this.state = 299
      this._errHandler.sync(this)
      _la = this._input.LA(1)
      if (_la === modelicaParser.STRING) {
        this.state = 298
        this.language_specification()
      }

      this.state = 302
      this._errHandler.sync(this)
      _la = this._input.LA(1)
      if (_la === modelicaParser.SYMBOL_DOT || _la === modelicaParser.IDENT) {
        this.state = 301
        this.external_function_call()
      }

      this.state = 305
      this._errHandler.sync(this)
      _la = this._input.LA(1)
      if (_la === modelicaParser.ANNOTATION) {
        this.state = 304
        this.annotation()
      }

      this.state = 307
      this.match(modelicaParser.SYMBOL_SEMICOLON)
    }

    this.state = 313
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.ANNOTATION) {
      this.state = 310
      this.annotation()
      this.state = 311
      this.match(modelicaParser.SYMBOL_SEMICOLON)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Language_specificationContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_language_specification
  return this
}

Language_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Language_specificationContext.prototype.constructor = Language_specificationContext

Language_specificationContext.prototype.STRING = function () {
  return this.getToken(modelicaParser.STRING, 0)
}

Language_specificationContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterLanguage_specification(this)
  }
}

Language_specificationContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitLanguage_specification(this)
  }
}

Language_specificationContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitLanguage_specification(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Language_specificationContext = Language_specificationContext

modelicaParser.prototype.language_specification = function () {
  const localctx = new Language_specificationContext(this, this._ctx, this.state)
  this.enterRule(localctx, 22, modelicaParser.RULE_language_specification)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 315
    this.match(modelicaParser.STRING)
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function External_function_callContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_external_function_call
  return this
}

External_function_callContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
External_function_callContext.prototype.constructor = External_function_callContext

External_function_callContext.prototype.IDENT = function () {
  return this.getToken(modelicaParser.IDENT, 0)
}

External_function_callContext.prototype.SYMBOL_LRBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_LRBRACKET, 0)
}

External_function_callContext.prototype.SYMBOL_RRBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_RRBRACKET, 0)
}

External_function_callContext.prototype.component_reference = function () {
  return this.getTypedRuleContext(Component_referenceContext, 0)
}

External_function_callContext.prototype.SYMBOL_EQUAL = function () {
  return this.getToken(modelicaParser.SYMBOL_EQUAL, 0)
}

External_function_callContext.prototype.expression_list = function () {
  return this.getTypedRuleContext(Expression_listContext, 0)
}

External_function_callContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterExternal_function_call(this)
  }
}

External_function_callContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitExternal_function_call(this)
  }
}

External_function_callContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitExternal_function_call(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.External_function_callContext = External_function_callContext

modelicaParser.prototype.external_function_call = function () {
  const localctx = new External_function_callContext(this, this._ctx, this.state)
  this.enterRule(localctx, 24, modelicaParser.RULE_external_function_call)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 320
    this._errHandler.sync(this)
    const la_ = this._interp.adaptivePredict(this._input, 28, this._ctx)
    if (la_ === 1) {
      this.state = 317
      this.component_reference()
      this.state = 318
      this.match(modelicaParser.SYMBOL_EQUAL)
    }
    this.state = 322
    this.match(modelicaParser.IDENT)
    this.state = 323
    this.match(modelicaParser.SYMBOL_LRBRACKET)
    this.state = 325
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << modelicaParser.T__6) | (1 << modelicaParser.T__7) | (1 << modelicaParser.T__8) | (1 << modelicaParser.DER) | (1 << modelicaParser.END))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (modelicaParser.FALSE - 36)) | (1 << (modelicaParser.IF - 36)) | (1 << (modelicaParser.INITIAL - 36)) | (1 << (modelicaParser.NOT - 36)) | (1 << (modelicaParser.TRUE - 36)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (modelicaParser.SYMBOL_LRBRACKET - 77)) | (1 << (modelicaParser.SYMBOL_LCBRACKET - 77)) | (1 << (modelicaParser.SYMBOL_LSBRACKET - 77)) | (1 << (modelicaParser.SYMBOL_DOT - 77)) | (1 << (modelicaParser.SYMBOL_PLUS - 77)) | (1 << (modelicaParser.IDENT - 77)) | (1 << (modelicaParser.STRING - 77)) | (1 << (modelicaParser.UNSIGNED_NUMBER - 77)))) !== 0)) {
      this.state = 324
      this.expression_list()
    }

    this.state = 327
    this.match(modelicaParser.SYMBOL_RRBRACKET)
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Element_listContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_element_list
  return this
}

Element_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Element_listContext.prototype.constructor = Element_listContext

Element_listContext.prototype.element = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(ElementContext)
  } else {
    return this.getTypedRuleContext(ElementContext, i)
  }
}

Element_listContext.prototype.SYMBOL_SEMICOLON = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_SEMICOLON)
  } else {
    return this.getToken(modelicaParser.SYMBOL_SEMICOLON, i)
  }
}

Element_listContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterElement_list(this)
  }
}

Element_listContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitElement_list(this)
  }
}

Element_listContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitElement_list(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Element_listContext = Element_listContext

modelicaParser.prototype.element_list = function () {
  const localctx = new Element_listContext(this, this._ctx, this.state)
  this.enterRule(localctx, 26, modelicaParser.RULE_element_list)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 334
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << modelicaParser.BLOCK) | (1 << modelicaParser.CLASS) | (1 << modelicaParser.CONNECTOR) | (1 << modelicaParser.CONSTANT) | (1 << modelicaParser.DISCRETE) | (1 << modelicaParser.ENCAPSULATED))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (modelicaParser.EXPANDABLE - 33)) | (1 << (modelicaParser.EXTENDS - 33)) | (1 << (modelicaParser.FINAL - 33)) | (1 << (modelicaParser.FLOW - 33)) | (1 << (modelicaParser.FUNCTION - 33)) | (1 << (modelicaParser.IMPORT - 33)) | (1 << (modelicaParser.IMPURE - 33)) | (1 << (modelicaParser.INNER - 33)) | (1 << (modelicaParser.INPUT - 33)) | (1 << (modelicaParser.MODEL - 33)) | (1 << (modelicaParser.OPERATOR - 33)) | (1 << (modelicaParser.OUTER - 33)) | (1 << (modelicaParser.OUTPUT - 33)) | (1 << (modelicaParser.PACKAGE - 33)) | (1 << (modelicaParser.PARAMETER - 33)) | (1 << (modelicaParser.PARTIAL - 33)) | (1 << (modelicaParser.PURE - 33)) | (1 << (modelicaParser.RECORD - 33)) | (1 << (modelicaParser.REDECLARE - 33)) | (1 << (modelicaParser.REPLACEABLE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (modelicaParser.STREAM - 65)) | (1 << (modelicaParser.TYPE - 65)) | (1 << (modelicaParser.SYMBOL_DOT - 65)) | (1 << (modelicaParser.IDENT - 65)))) !== 0)) {
      this.state = 329
      this.element()
      this.state = 330
      this.match(modelicaParser.SYMBOL_SEMICOLON)
      this.state = 336
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ElementContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_element
  return this
}

ElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
ElementContext.prototype.constructor = ElementContext

ElementContext.prototype.import_clause = function () {
  return this.getTypedRuleContext(Import_clauseContext, 0)
}

ElementContext.prototype.extends_clause = function () {
  return this.getTypedRuleContext(Extends_clauseContext, 0)
}

ElementContext.prototype.REPLACEABLE = function () {
  return this.getToken(modelicaParser.REPLACEABLE, 0)
}

ElementContext.prototype.REDECLARE = function () {
  return this.getToken(modelicaParser.REDECLARE, 0)
}

ElementContext.prototype.FINAL = function () {
  return this.getToken(modelicaParser.FINAL, 0)
}

ElementContext.prototype.INNER = function () {
  return this.getToken(modelicaParser.INNER, 0)
}

ElementContext.prototype.OUTER = function () {
  return this.getToken(modelicaParser.OUTER, 0)
}

ElementContext.prototype.class_definition = function () {
  return this.getTypedRuleContext(Class_definitionContext, 0)
}

ElementContext.prototype.component_clause = function () {
  return this.getTypedRuleContext(Component_clauseContext, 0)
}

ElementContext.prototype.constraining_clause = function () {
  return this.getTypedRuleContext(Constraining_clauseContext, 0)
}

ElementContext.prototype.comment = function () {
  return this.getTypedRuleContext(CommentContext, 0)
}

ElementContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterElement(this)
  }
}

ElementContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitElement(this)
  }
}

ElementContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitElement(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.ElementContext = ElementContext

modelicaParser.prototype.element = function () {
  const localctx = new ElementContext(this, this._ctx, this.state)
  this.enterRule(localctx, 28, modelicaParser.RULE_element)
  let _la = 0 // Token type
  try {
    this.state = 367
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case modelicaParser.IMPORT:
        this.enterOuterAlt(localctx, 1)
        this.state = 337
        this.import_clause()
        break
      case modelicaParser.EXTENDS:
        this.enterOuterAlt(localctx, 2)
        this.state = 338
        this.extends_clause()
        break
      case modelicaParser.BLOCK:
      case modelicaParser.CLASS:
      case modelicaParser.CONNECTOR:
      case modelicaParser.CONSTANT:
      case modelicaParser.DISCRETE:
      case modelicaParser.ENCAPSULATED:
      case modelicaParser.EXPANDABLE:
      case modelicaParser.FINAL:
      case modelicaParser.FLOW:
      case modelicaParser.FUNCTION:
      case modelicaParser.IMPURE:
      case modelicaParser.INNER:
      case modelicaParser.INPUT:
      case modelicaParser.MODEL:
      case modelicaParser.OPERATOR:
      case modelicaParser.OUTER:
      case modelicaParser.OUTPUT:
      case modelicaParser.PACKAGE:
      case modelicaParser.PARAMETER:
      case modelicaParser.PARTIAL:
      case modelicaParser.PURE:
      case modelicaParser.RECORD:
      case modelicaParser.REDECLARE:
      case modelicaParser.REPLACEABLE:
      case modelicaParser.STREAM:
      case modelicaParser.TYPE:
      case modelicaParser.SYMBOL_DOT:
      case modelicaParser.IDENT:
        this.enterOuterAlt(localctx, 3)
        this.state = 340
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        if (_la === modelicaParser.REDECLARE) {
          this.state = 339
          this.match(modelicaParser.REDECLARE)
        }

        this.state = 343
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        if (_la === modelicaParser.FINAL) {
          this.state = 342
          this.match(modelicaParser.FINAL)
        }

        this.state = 346
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        if (_la === modelicaParser.INNER) {
          this.state = 345
          this.match(modelicaParser.INNER)
        }

        this.state = 349
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        if (_la === modelicaParser.OUTER) {
          this.state = 348
          this.match(modelicaParser.OUTER)
        }

        this.state = 365
        this._errHandler.sync(this)
        switch (this._input.LA(1)) {
          case modelicaParser.BLOCK:
          case modelicaParser.CLASS:
          case modelicaParser.CONNECTOR:
          case modelicaParser.CONSTANT:
          case modelicaParser.DISCRETE:
          case modelicaParser.ENCAPSULATED:
          case modelicaParser.EXPANDABLE:
          case modelicaParser.FLOW:
          case modelicaParser.FUNCTION:
          case modelicaParser.IMPURE:
          case modelicaParser.INPUT:
          case modelicaParser.MODEL:
          case modelicaParser.OPERATOR:
          case modelicaParser.OUTPUT:
          case modelicaParser.PACKAGE:
          case modelicaParser.PARAMETER:
          case modelicaParser.PARTIAL:
          case modelicaParser.PURE:
          case modelicaParser.RECORD:
          case modelicaParser.STREAM:
          case modelicaParser.TYPE:
          case modelicaParser.SYMBOL_DOT:
          case modelicaParser.IDENT:
            this.state = 353
            this._errHandler.sync(this)
            switch (this._input.LA(1)) {
              case modelicaParser.BLOCK:
              case modelicaParser.CLASS:
              case modelicaParser.CONNECTOR:
              case modelicaParser.ENCAPSULATED:
              case modelicaParser.EXPANDABLE:
              case modelicaParser.FUNCTION:
              case modelicaParser.IMPURE:
              case modelicaParser.MODEL:
              case modelicaParser.OPERATOR:
              case modelicaParser.PACKAGE:
              case modelicaParser.PARTIAL:
              case modelicaParser.PURE:
              case modelicaParser.RECORD:
              case modelicaParser.TYPE:
                this.state = 351
                this.class_definition()
                break
              case modelicaParser.CONSTANT:
              case modelicaParser.DISCRETE:
              case modelicaParser.FLOW:
              case modelicaParser.INPUT:
              case modelicaParser.OUTPUT:
              case modelicaParser.PARAMETER:
              case modelicaParser.STREAM:
              case modelicaParser.SYMBOL_DOT:
              case modelicaParser.IDENT:
                this.state = 352
                this.component_clause()
                break
              default:
                throw new antlr4.error.NoViableAltException(this)
            }
            break
          case modelicaParser.REPLACEABLE:
            this.state = 355
            this.match(modelicaParser.REPLACEABLE)
            this.state = 358
            this._errHandler.sync(this)
            switch (this._input.LA(1)) {
              case modelicaParser.BLOCK:
              case modelicaParser.CLASS:
              case modelicaParser.CONNECTOR:
              case modelicaParser.ENCAPSULATED:
              case modelicaParser.EXPANDABLE:
              case modelicaParser.FUNCTION:
              case modelicaParser.IMPURE:
              case modelicaParser.MODEL:
              case modelicaParser.OPERATOR:
              case modelicaParser.PACKAGE:
              case modelicaParser.PARTIAL:
              case modelicaParser.PURE:
              case modelicaParser.RECORD:
              case modelicaParser.TYPE:
                this.state = 356
                this.class_definition()
                break
              case modelicaParser.CONSTANT:
              case modelicaParser.DISCRETE:
              case modelicaParser.FLOW:
              case modelicaParser.INPUT:
              case modelicaParser.OUTPUT:
              case modelicaParser.PARAMETER:
              case modelicaParser.STREAM:
              case modelicaParser.SYMBOL_DOT:
              case modelicaParser.IDENT:
                this.state = 357
                this.component_clause()
                break
              default:
                throw new antlr4.error.NoViableAltException(this)
            }
            this.state = 363
            this._errHandler.sync(this)
            _la = this._input.LA(1)
            if (_la === modelicaParser.CONSTRAINEDBY) {
              this.state = 360
              this.constraining_clause()
              this.state = 361
              this.comment()
            }

            break
          default:
            throw new antlr4.error.NoViableAltException(this)
        }
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Import_clauseContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_import_clause
  return this
}

Import_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Import_clauseContext.prototype.constructor = Import_clauseContext

Import_clauseContext.prototype.IMPORT = function () {
  return this.getToken(modelicaParser.IMPORT, 0)
}

Import_clauseContext.prototype.comment = function () {
  return this.getTypedRuleContext(CommentContext, 0)
}

Import_clauseContext.prototype.IDENT = function () {
  return this.getToken(modelicaParser.IDENT, 0)
}

Import_clauseContext.prototype.SYMBOL_EQUAL = function () {
  return this.getToken(modelicaParser.SYMBOL_EQUAL, 0)
}

Import_clauseContext.prototype.name = function () {
  return this.getTypedRuleContext(NameContext, 0)
}

Import_clauseContext.prototype.SYMBOL_DOTSTAR = function () {
  return this.getToken(modelicaParser.SYMBOL_DOTSTAR, 0)
}

Import_clauseContext.prototype.SYMBOL_DOTLCBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_DOTLCBRACKET, 0)
}

Import_clauseContext.prototype.import_list = function () {
  return this.getTypedRuleContext(Import_listContext, 0)
}

Import_clauseContext.prototype.SYMBOL_RCBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_RCBRACKET, 0)
}

Import_clauseContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterImport_clause(this)
  }
}

Import_clauseContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitImport_clause(this)
  }
}

Import_clauseContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitImport_clause(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Import_clauseContext = Import_clauseContext

modelicaParser.prototype.import_clause = function () {
  const localctx = new Import_clauseContext(this, this._ctx, this.state)
  this.enterRule(localctx, 30, modelicaParser.RULE_import_clause)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 369
    this.match(modelicaParser.IMPORT)
    this.state = 382
    this._errHandler.sync(this)
    const la_ = this._interp.adaptivePredict(this._input, 40, this._ctx)
    switch (la_) {
      case 1:
        this.state = 370
        this.match(modelicaParser.IDENT)
        this.state = 371
        this.match(modelicaParser.SYMBOL_EQUAL)
        this.state = 372
        this.name()
        break

      case 2:
        this.state = 373
        this.name()
        this.state = 374
        this.match(modelicaParser.SYMBOL_DOTSTAR)
        break

      case 3:
        this.state = 376
        this.name()
        this.state = 377
        this.match(modelicaParser.SYMBOL_DOTLCBRACKET)
        this.state = 378
        this.import_list()
        this.state = 379
        this.match(modelicaParser.SYMBOL_RCBRACKET)
        break

      case 4:
        this.state = 381
        this.name()
        break
    }
    this.state = 384
    this.comment()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Import_listContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_import_list
  return this
}

Import_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Import_listContext.prototype.constructor = Import_listContext

Import_listContext.prototype.IDENT = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.IDENT)
  } else {
    return this.getToken(modelicaParser.IDENT, i)
  }
}

Import_listContext.prototype.SYMBOL_COMMA = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_COMMA)
  } else {
    return this.getToken(modelicaParser.SYMBOL_COMMA, i)
  }
}

Import_listContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterImport_list(this)
  }
}

Import_listContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitImport_list(this)
  }
}

Import_listContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitImport_list(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Import_listContext = Import_listContext

modelicaParser.prototype.import_list = function () {
  const localctx = new Import_listContext(this, this._ctx, this.state)
  this.enterRule(localctx, 32, modelicaParser.RULE_import_list)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 386
    this.match(modelicaParser.IDENT)
    this.state = 391
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.SYMBOL_COMMA) {
      this.state = 387
      this.match(modelicaParser.SYMBOL_COMMA)
      this.state = 388
      this.match(modelicaParser.IDENT)
      this.state = 393
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Extends_clauseContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_extends_clause
  return this
}

Extends_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Extends_clauseContext.prototype.constructor = Extends_clauseContext

Extends_clauseContext.prototype.EXTENDS = function () {
  return this.getToken(modelicaParser.EXTENDS, 0)
}

Extends_clauseContext.prototype.name = function () {
  return this.getTypedRuleContext(NameContext, 0)
}

Extends_clauseContext.prototype.class_modification = function () {
  return this.getTypedRuleContext(Class_modificationContext, 0)
}

Extends_clauseContext.prototype.annotation = function () {
  return this.getTypedRuleContext(AnnotationContext, 0)
}

Extends_clauseContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterExtends_clause(this)
  }
}

Extends_clauseContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitExtends_clause(this)
  }
}

Extends_clauseContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitExtends_clause(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Extends_clauseContext = Extends_clauseContext

modelicaParser.prototype.extends_clause = function () {
  const localctx = new Extends_clauseContext(this, this._ctx, this.state)
  this.enterRule(localctx, 34, modelicaParser.RULE_extends_clause)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 394
    this.match(modelicaParser.EXTENDS)
    this.state = 395
    this.name()
    this.state = 397
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.SYMBOL_LRBRACKET) {
      this.state = 396
      this.class_modification()
    }

    this.state = 400
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.ANNOTATION) {
      this.state = 399
      this.annotation()
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Constraining_clauseContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_constraining_clause
  return this
}

Constraining_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Constraining_clauseContext.prototype.constructor = Constraining_clauseContext

Constraining_clauseContext.prototype.CONSTRAINEDBY = function () {
  return this.getToken(modelicaParser.CONSTRAINEDBY, 0)
}

Constraining_clauseContext.prototype.name = function () {
  return this.getTypedRuleContext(NameContext, 0)
}

Constraining_clauseContext.prototype.class_modification = function () {
  return this.getTypedRuleContext(Class_modificationContext, 0)
}

Constraining_clauseContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterConstraining_clause(this)
  }
}

Constraining_clauseContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitConstraining_clause(this)
  }
}

Constraining_clauseContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitConstraining_clause(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Constraining_clauseContext = Constraining_clauseContext

modelicaParser.prototype.constraining_clause = function () {
  const localctx = new Constraining_clauseContext(this, this._ctx, this.state)
  this.enterRule(localctx, 36, modelicaParser.RULE_constraining_clause)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 402
    this.match(modelicaParser.CONSTRAINEDBY)
    this.state = 403
    this.name()
    this.state = 405
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.SYMBOL_LRBRACKET) {
      this.state = 404
      this.class_modification()
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Component_clauseContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_component_clause
  return this
}

Component_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Component_clauseContext.prototype.constructor = Component_clauseContext

Component_clauseContext.prototype.type_prefix = function () {
  return this.getTypedRuleContext(Type_prefixContext, 0)
}

Component_clauseContext.prototype.type_specifier = function () {
  return this.getTypedRuleContext(Type_specifierContext, 0)
}

Component_clauseContext.prototype.component_list = function () {
  return this.getTypedRuleContext(Component_listContext, 0)
}

Component_clauseContext.prototype.array_subscripts = function () {
  return this.getTypedRuleContext(Array_subscriptsContext, 0)
}

Component_clauseContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterComponent_clause(this)
  }
}

Component_clauseContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitComponent_clause(this)
  }
}

Component_clauseContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitComponent_clause(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Component_clauseContext = Component_clauseContext

modelicaParser.prototype.component_clause = function () {
  const localctx = new Component_clauseContext(this, this._ctx, this.state)
  this.enterRule(localctx, 38, modelicaParser.RULE_component_clause)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 407
    this.type_prefix()
    this.state = 408
    this.type_specifier()
    this.state = 410
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.SYMBOL_LSBRACKET) {
      this.state = 409
      this.array_subscripts()
    }

    this.state = 412
    this.component_list()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Type_prefixContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_type_prefix
  return this
}

Type_prefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Type_prefixContext.prototype.constructor = Type_prefixContext

Type_prefixContext.prototype.FLOW = function () {
  return this.getToken(modelicaParser.FLOW, 0)
}

Type_prefixContext.prototype.STREAM = function () {
  return this.getToken(modelicaParser.STREAM, 0)
}

Type_prefixContext.prototype.DISCRETE = function () {
  return this.getToken(modelicaParser.DISCRETE, 0)
}

Type_prefixContext.prototype.PARAMETER = function () {
  return this.getToken(modelicaParser.PARAMETER, 0)
}

Type_prefixContext.prototype.CONSTANT = function () {
  return this.getToken(modelicaParser.CONSTANT, 0)
}

Type_prefixContext.prototype.INPUT = function () {
  return this.getToken(modelicaParser.INPUT, 0)
}

Type_prefixContext.prototype.OUTPUT = function () {
  return this.getToken(modelicaParser.OUTPUT, 0)
}

Type_prefixContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterType_prefix(this)
  }
}

Type_prefixContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitType_prefix(this)
  }
}

Type_prefixContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitType_prefix(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Type_prefixContext = Type_prefixContext

modelicaParser.prototype.type_prefix = function () {
  const localctx = new Type_prefixContext(this, this._ctx, this.state)
  this.enterRule(localctx, 40, modelicaParser.RULE_type_prefix)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 415
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.FLOW || _la === modelicaParser.STREAM) {
      this.state = 414
      _la = this._input.LA(1)
      if (!(_la === modelicaParser.FLOW || _la === modelicaParser.STREAM)) {
        this._errHandler.recoverInline(this)
      } else {
            	this._errHandler.reportMatch(this)
        this.consume()
      }
    }

    this.state = 418
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.CONSTANT || _la === modelicaParser.DISCRETE || _la === modelicaParser.PARAMETER) {
      this.state = 417
      _la = this._input.LA(1)
      if (!(_la === modelicaParser.CONSTANT || _la === modelicaParser.DISCRETE || _la === modelicaParser.PARAMETER)) {
        this._errHandler.recoverInline(this)
      } else {
            	this._errHandler.reportMatch(this)
        this.consume()
      }
    }

    this.state = 421
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.INPUT || _la === modelicaParser.OUTPUT) {
      this.state = 420
      _la = this._input.LA(1)
      if (!(_la === modelicaParser.INPUT || _la === modelicaParser.OUTPUT)) {
        this._errHandler.recoverInline(this)
      } else {
            	this._errHandler.reportMatch(this)
        this.consume()
      }
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Type_specifierContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_type_specifier
  return this
}

Type_specifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Type_specifierContext.prototype.constructor = Type_specifierContext

Type_specifierContext.prototype.name = function () {
  return this.getTypedRuleContext(NameContext, 0)
}

Type_specifierContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterType_specifier(this)
  }
}

Type_specifierContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitType_specifier(this)
  }
}

Type_specifierContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitType_specifier(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Type_specifierContext = Type_specifierContext

modelicaParser.prototype.type_specifier = function () {
  const localctx = new Type_specifierContext(this, this._ctx, this.state)
  this.enterRule(localctx, 42, modelicaParser.RULE_type_specifier)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 423
    this.name()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Component_listContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_component_list
  return this
}

Component_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Component_listContext.prototype.constructor = Component_listContext

Component_listContext.prototype.component_declaration = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(Component_declarationContext)
  } else {
    return this.getTypedRuleContext(Component_declarationContext, i)
  }
}

Component_listContext.prototype.SYMBOL_COMMA = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_COMMA)
  } else {
    return this.getToken(modelicaParser.SYMBOL_COMMA, i)
  }
}

Component_listContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterComponent_list(this)
  }
}

Component_listContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitComponent_list(this)
  }
}

Component_listContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitComponent_list(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Component_listContext = Component_listContext

modelicaParser.prototype.component_list = function () {
  const localctx = new Component_listContext(this, this._ctx, this.state)
  this.enterRule(localctx, 44, modelicaParser.RULE_component_list)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 425
    this.component_declaration()
    this.state = 430
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.SYMBOL_COMMA) {
      this.state = 426
      this.match(modelicaParser.SYMBOL_COMMA)
      this.state = 427
      this.component_declaration()
      this.state = 432
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Component_declarationContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_component_declaration
  return this
}

Component_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Component_declarationContext.prototype.constructor = Component_declarationContext

Component_declarationContext.prototype.declaration = function () {
  return this.getTypedRuleContext(DeclarationContext, 0)
}

Component_declarationContext.prototype.comment = function () {
  return this.getTypedRuleContext(CommentContext, 0)
}

Component_declarationContext.prototype.condition_attribute = function () {
  return this.getTypedRuleContext(Condition_attributeContext, 0)
}

Component_declarationContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterComponent_declaration(this)
  }
}

Component_declarationContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitComponent_declaration(this)
  }
}

Component_declarationContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitComponent_declaration(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Component_declarationContext = Component_declarationContext

modelicaParser.prototype.component_declaration = function () {
  const localctx = new Component_declarationContext(this, this._ctx, this.state)
  this.enterRule(localctx, 46, modelicaParser.RULE_component_declaration)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 433
    this.declaration()
    this.state = 435
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.IF) {
      this.state = 434
      this.condition_attribute()
    }

    this.state = 437
    this.comment()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Condition_attributeContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_condition_attribute
  return this
}

Condition_attributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Condition_attributeContext.prototype.constructor = Condition_attributeContext

Condition_attributeContext.prototype.IF = function () {
  return this.getToken(modelicaParser.IF, 0)
}

Condition_attributeContext.prototype.expression = function () {
  return this.getTypedRuleContext(ExpressionContext, 0)
}

Condition_attributeContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterCondition_attribute(this)
  }
}

Condition_attributeContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitCondition_attribute(this)
  }
}

Condition_attributeContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitCondition_attribute(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Condition_attributeContext = Condition_attributeContext

modelicaParser.prototype.condition_attribute = function () {
  const localctx = new Condition_attributeContext(this, this._ctx, this.state)
  this.enterRule(localctx, 48, modelicaParser.RULE_condition_attribute)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 439
    this.match(modelicaParser.IF)
    this.state = 440
    this.expression()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function DeclarationContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_declaration
  return this
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
DeclarationContext.prototype.constructor = DeclarationContext

DeclarationContext.prototype.IDENT = function () {
  return this.getToken(modelicaParser.IDENT, 0)
}

DeclarationContext.prototype.array_subscripts = function () {
  return this.getTypedRuleContext(Array_subscriptsContext, 0)
}

DeclarationContext.prototype.modification = function () {
  return this.getTypedRuleContext(ModificationContext, 0)
}

DeclarationContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterDeclaration(this)
  }
}

DeclarationContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitDeclaration(this)
  }
}

DeclarationContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitDeclaration(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.DeclarationContext = DeclarationContext

modelicaParser.prototype.declaration = function () {
  const localctx = new DeclarationContext(this, this._ctx, this.state)
  this.enterRule(localctx, 50, modelicaParser.RULE_declaration)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 442
    this.match(modelicaParser.IDENT)
    this.state = 444
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.SYMBOL_LSBRACKET) {
      this.state = 443
      this.array_subscripts()
    }

    this.state = 447
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (modelicaParser.SYMBOL_EQUAL - 73)) | (1 << (modelicaParser.SYMBOL_LRBRACKET - 73)) | (1 << (modelicaParser.SYMBOL_COLONEQUAL - 73)))) !== 0)) {
      this.state = 446
      this.modification()
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ModificationContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_modification
  return this
}

ModificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
ModificationContext.prototype.constructor = ModificationContext

ModificationContext.prototype.class_modification = function () {
  return this.getTypedRuleContext(Class_modificationContext, 0)
}

ModificationContext.prototype.SYMBOL_EQUAL = function () {
  return this.getToken(modelicaParser.SYMBOL_EQUAL, 0)
}

ModificationContext.prototype.expression = function () {
  return this.getTypedRuleContext(ExpressionContext, 0)
}

ModificationContext.prototype.SYMBOL_COLONEQUAL = function () {
  return this.getToken(modelicaParser.SYMBOL_COLONEQUAL, 0)
}

ModificationContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterModification(this)
  }
}

ModificationContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitModification(this)
  }
}

ModificationContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitModification(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.ModificationContext = ModificationContext

modelicaParser.prototype.modification = function () {
  const localctx = new ModificationContext(this, this._ctx, this.state)
  this.enterRule(localctx, 52, modelicaParser.RULE_modification)
  let _la = 0 // Token type
  try {
    this.state = 458
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case modelicaParser.SYMBOL_LRBRACKET:
        this.enterOuterAlt(localctx, 1)
        this.state = 449
        this.class_modification()
        this.state = 452
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        if (_la === modelicaParser.SYMBOL_EQUAL) {
          this.state = 450
          this.match(modelicaParser.SYMBOL_EQUAL)
          this.state = 451
          this.expression()
        }

        break
      case modelicaParser.SYMBOL_EQUAL:
        this.enterOuterAlt(localctx, 2)
        this.state = 454
        this.match(modelicaParser.SYMBOL_EQUAL)
        this.state = 455
        this.expression()
        break
      case modelicaParser.SYMBOL_COLONEQUAL:
        this.enterOuterAlt(localctx, 3)
        this.state = 456
        this.match(modelicaParser.SYMBOL_COLONEQUAL)
        this.state = 457
        this.expression()
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Class_modificationContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_class_modification
  return this
}

Class_modificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Class_modificationContext.prototype.constructor = Class_modificationContext

Class_modificationContext.prototype.SYMBOL_LRBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_LRBRACKET, 0)
}

Class_modificationContext.prototype.SYMBOL_RRBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_RRBRACKET, 0)
}

Class_modificationContext.prototype.argument_list = function () {
  return this.getTypedRuleContext(Argument_listContext, 0)
}

Class_modificationContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterClass_modification(this)
  }
}

Class_modificationContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitClass_modification(this)
  }
}

Class_modificationContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitClass_modification(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Class_modificationContext = Class_modificationContext

modelicaParser.prototype.class_modification = function () {
  const localctx = new Class_modificationContext(this, this._ctx, this.state)
  this.enterRule(localctx, 54, modelicaParser.RULE_class_modification)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 460
    this.match(modelicaParser.SYMBOL_LRBRACKET)
    this.state = 462
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.EACH || _la === modelicaParser.FINAL || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (modelicaParser.REDECLARE - 62)) | (1 << (modelicaParser.REPLACEABLE - 62)) | (1 << (modelicaParser.SYMBOL_DOT - 62)) | (1 << (modelicaParser.IDENT - 62)))) !== 0)) {
      this.state = 461
      this.argument_list()
    }

    this.state = 464
    this.match(modelicaParser.SYMBOL_RRBRACKET)
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Argument_listContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_argument_list
  return this
}

Argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Argument_listContext.prototype.constructor = Argument_listContext

Argument_listContext.prototype.argument = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(ArgumentContext)
  } else {
    return this.getTypedRuleContext(ArgumentContext, i)
  }
}

Argument_listContext.prototype.SYMBOL_COMMA = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_COMMA)
  } else {
    return this.getToken(modelicaParser.SYMBOL_COMMA, i)
  }
}

Argument_listContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterArgument_list(this)
  }
}

Argument_listContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitArgument_list(this)
  }
}

Argument_listContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitArgument_list(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Argument_listContext = Argument_listContext

modelicaParser.prototype.argument_list = function () {
  const localctx = new Argument_listContext(this, this._ctx, this.state)
  this.enterRule(localctx, 56, modelicaParser.RULE_argument_list)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 466
    this.argument()
    this.state = 471
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.SYMBOL_COMMA) {
      this.state = 467
      this.match(modelicaParser.SYMBOL_COMMA)
      this.state = 468
      this.argument()
      this.state = 473
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ArgumentContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_argument
  return this
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
ArgumentContext.prototype.constructor = ArgumentContext

ArgumentContext.prototype.element_modification_or_replaceable = function () {
  return this.getTypedRuleContext(Element_modification_or_replaceableContext, 0)
}

ArgumentContext.prototype.element_redeclaration = function () {
  return this.getTypedRuleContext(Element_redeclarationContext, 0)
}

ArgumentContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterArgument(this)
  }
}

ArgumentContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitArgument(this)
  }
}

ArgumentContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitArgument(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.ArgumentContext = ArgumentContext

modelicaParser.prototype.argument = function () {
  const localctx = new ArgumentContext(this, this._ctx, this.state)
  this.enterRule(localctx, 58, modelicaParser.RULE_argument)
  try {
    this.state = 476
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case modelicaParser.EACH:
      case modelicaParser.FINAL:
      case modelicaParser.REPLACEABLE:
      case modelicaParser.SYMBOL_DOT:
      case modelicaParser.IDENT:
        this.enterOuterAlt(localctx, 1)
        this.state = 474
        this.element_modification_or_replaceable()
        break
      case modelicaParser.REDECLARE:
        this.enterOuterAlt(localctx, 2)
        this.state = 475
        this.element_redeclaration()
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Element_modification_or_replaceableContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_element_modification_or_replaceable
  return this
}

Element_modification_or_replaceableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Element_modification_or_replaceableContext.prototype.constructor = Element_modification_or_replaceableContext

Element_modification_or_replaceableContext.prototype.element_modification = function () {
  return this.getTypedRuleContext(Element_modificationContext, 0)
}

Element_modification_or_replaceableContext.prototype.element_replaceable = function () {
  return this.getTypedRuleContext(Element_replaceableContext, 0)
}

Element_modification_or_replaceableContext.prototype.EACH = function () {
  return this.getToken(modelicaParser.EACH, 0)
}

Element_modification_or_replaceableContext.prototype.FINAL = function () {
  return this.getToken(modelicaParser.FINAL, 0)
}

Element_modification_or_replaceableContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterElement_modification_or_replaceable(this)
  }
}

Element_modification_or_replaceableContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitElement_modification_or_replaceable(this)
  }
}

Element_modification_or_replaceableContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitElement_modification_or_replaceable(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Element_modification_or_replaceableContext = Element_modification_or_replaceableContext

modelicaParser.prototype.element_modification_or_replaceable = function () {
  const localctx = new Element_modification_or_replaceableContext(this, this._ctx, this.state)
  this.enterRule(localctx, 60, modelicaParser.RULE_element_modification_or_replaceable)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 479
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.EACH) {
      this.state = 478
      this.match(modelicaParser.EACH)
    }

    this.state = 482
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.FINAL) {
      this.state = 481
      this.match(modelicaParser.FINAL)
    }

    this.state = 486
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case modelicaParser.SYMBOL_DOT:
      case modelicaParser.IDENT:
        this.state = 484
        this.element_modification()
        break
      case modelicaParser.REPLACEABLE:
        this.state = 485
        this.element_replaceable()
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Element_modificationContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_element_modification
  return this
}

Element_modificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Element_modificationContext.prototype.constructor = Element_modificationContext

Element_modificationContext.prototype.name = function () {
  return this.getTypedRuleContext(NameContext, 0)
}

Element_modificationContext.prototype.string_comment = function () {
  return this.getTypedRuleContext(String_commentContext, 0)
}

Element_modificationContext.prototype.modification = function () {
  return this.getTypedRuleContext(ModificationContext, 0)
}

Element_modificationContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterElement_modification(this)
  }
}

Element_modificationContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitElement_modification(this)
  }
}

Element_modificationContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitElement_modification(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Element_modificationContext = Element_modificationContext

modelicaParser.prototype.element_modification = function () {
  const localctx = new Element_modificationContext(this, this._ctx, this.state)
  this.enterRule(localctx, 62, modelicaParser.RULE_element_modification)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 488
    this.name()
    this.state = 490
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (modelicaParser.SYMBOL_EQUAL - 73)) | (1 << (modelicaParser.SYMBOL_LRBRACKET - 73)) | (1 << (modelicaParser.SYMBOL_COLONEQUAL - 73)))) !== 0)) {
      this.state = 489
      this.modification()
    }

    this.state = 492
    this.string_comment()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Element_redeclarationContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_element_redeclaration
  return this
}

Element_redeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Element_redeclarationContext.prototype.constructor = Element_redeclarationContext

Element_redeclarationContext.prototype.REDECLARE = function () {
  return this.getToken(modelicaParser.REDECLARE, 0)
}

Element_redeclarationContext.prototype.element_replaceable = function () {
  return this.getTypedRuleContext(Element_replaceableContext, 0)
}

Element_redeclarationContext.prototype.EACH = function () {
  return this.getToken(modelicaParser.EACH, 0)
}

Element_redeclarationContext.prototype.FINAL = function () {
  return this.getToken(modelicaParser.FINAL, 0)
}

Element_redeclarationContext.prototype.short_class_definition = function () {
  return this.getTypedRuleContext(Short_class_definitionContext, 0)
}

Element_redeclarationContext.prototype.component_clause1 = function () {
  return this.getTypedRuleContext(Component_clause1Context, 0)
}

Element_redeclarationContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterElement_redeclaration(this)
  }
}

Element_redeclarationContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitElement_redeclaration(this)
  }
}

Element_redeclarationContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitElement_redeclaration(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Element_redeclarationContext = Element_redeclarationContext

modelicaParser.prototype.element_redeclaration = function () {
  const localctx = new Element_redeclarationContext(this, this._ctx, this.state)
  this.enterRule(localctx, 64, modelicaParser.RULE_element_redeclaration)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 494
    this.match(modelicaParser.REDECLARE)
    this.state = 496
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.EACH) {
      this.state = 495
      this.match(modelicaParser.EACH)
    }

    this.state = 499
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.FINAL) {
      this.state = 498
      this.match(modelicaParser.FINAL)
    }

    this.state = 506
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case modelicaParser.BLOCK:
      case modelicaParser.CLASS:
      case modelicaParser.CONNECTOR:
      case modelicaParser.CONSTANT:
      case modelicaParser.DISCRETE:
      case modelicaParser.EXPANDABLE:
      case modelicaParser.FLOW:
      case modelicaParser.FUNCTION:
      case modelicaParser.IMPURE:
      case modelicaParser.INPUT:
      case modelicaParser.MODEL:
      case modelicaParser.OPERATOR:
      case modelicaParser.OUTPUT:
      case modelicaParser.PACKAGE:
      case modelicaParser.PARAMETER:
      case modelicaParser.PARTIAL:
      case modelicaParser.PURE:
      case modelicaParser.RECORD:
      case modelicaParser.STREAM:
      case modelicaParser.TYPE:
      case modelicaParser.SYMBOL_DOT:
      case modelicaParser.IDENT:
        this.state = 503
        this._errHandler.sync(this)
        switch (this._input.LA(1)) {
          case modelicaParser.BLOCK:
          case modelicaParser.CLASS:
          case modelicaParser.CONNECTOR:
          case modelicaParser.EXPANDABLE:
          case modelicaParser.FUNCTION:
          case modelicaParser.IMPURE:
          case modelicaParser.MODEL:
          case modelicaParser.OPERATOR:
          case modelicaParser.PACKAGE:
          case modelicaParser.PARTIAL:
          case modelicaParser.PURE:
          case modelicaParser.RECORD:
          case modelicaParser.TYPE:
            this.state = 501
            this.short_class_definition()
            break
          case modelicaParser.CONSTANT:
          case modelicaParser.DISCRETE:
          case modelicaParser.FLOW:
          case modelicaParser.INPUT:
          case modelicaParser.OUTPUT:
          case modelicaParser.PARAMETER:
          case modelicaParser.STREAM:
          case modelicaParser.SYMBOL_DOT:
          case modelicaParser.IDENT:
            this.state = 502
            this.component_clause1()
            break
          default:
            throw new antlr4.error.NoViableAltException(this)
        }
        break
      case modelicaParser.REPLACEABLE:
        this.state = 505
        this.element_replaceable()
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Element_replaceableContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_element_replaceable
  return this
}

Element_replaceableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Element_replaceableContext.prototype.constructor = Element_replaceableContext

Element_replaceableContext.prototype.REPLACEABLE = function () {
  return this.getToken(modelicaParser.REPLACEABLE, 0)
}

Element_replaceableContext.prototype.short_class_definition = function () {
  return this.getTypedRuleContext(Short_class_definitionContext, 0)
}

Element_replaceableContext.prototype.component_clause1 = function () {
  return this.getTypedRuleContext(Component_clause1Context, 0)
}

Element_replaceableContext.prototype.constraining_clause = function () {
  return this.getTypedRuleContext(Constraining_clauseContext, 0)
}

Element_replaceableContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterElement_replaceable(this)
  }
}

Element_replaceableContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitElement_replaceable(this)
  }
}

Element_replaceableContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitElement_replaceable(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Element_replaceableContext = Element_replaceableContext

modelicaParser.prototype.element_replaceable = function () {
  const localctx = new Element_replaceableContext(this, this._ctx, this.state)
  this.enterRule(localctx, 66, modelicaParser.RULE_element_replaceable)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 508
    this.match(modelicaParser.REPLACEABLE)
    this.state = 511
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case modelicaParser.BLOCK:
      case modelicaParser.CLASS:
      case modelicaParser.CONNECTOR:
      case modelicaParser.EXPANDABLE:
      case modelicaParser.FUNCTION:
      case modelicaParser.IMPURE:
      case modelicaParser.MODEL:
      case modelicaParser.OPERATOR:
      case modelicaParser.PACKAGE:
      case modelicaParser.PARTIAL:
      case modelicaParser.PURE:
      case modelicaParser.RECORD:
      case modelicaParser.TYPE:
        this.state = 509
        this.short_class_definition()
        break
      case modelicaParser.CONSTANT:
      case modelicaParser.DISCRETE:
      case modelicaParser.FLOW:
      case modelicaParser.INPUT:
      case modelicaParser.OUTPUT:
      case modelicaParser.PARAMETER:
      case modelicaParser.STREAM:
      case modelicaParser.SYMBOL_DOT:
      case modelicaParser.IDENT:
        this.state = 510
        this.component_clause1()
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
    this.state = 514
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.CONSTRAINEDBY) {
      this.state = 513
      this.constraining_clause()
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Component_clause1Context (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_component_clause1
  return this
}

Component_clause1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Component_clause1Context.prototype.constructor = Component_clause1Context

Component_clause1Context.prototype.type_prefix = function () {
  return this.getTypedRuleContext(Type_prefixContext, 0)
}

Component_clause1Context.prototype.type_specifier = function () {
  return this.getTypedRuleContext(Type_specifierContext, 0)
}

Component_clause1Context.prototype.component_declaration1 = function () {
  return this.getTypedRuleContext(Component_declaration1Context, 0)
}

Component_clause1Context.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterComponent_clause1(this)
  }
}

Component_clause1Context.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitComponent_clause1(this)
  }
}

Component_clause1Context.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitComponent_clause1(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Component_clause1Context = Component_clause1Context

modelicaParser.prototype.component_clause1 = function () {
  const localctx = new Component_clause1Context(this, this._ctx, this.state)
  this.enterRule(localctx, 68, modelicaParser.RULE_component_clause1)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 516
    this.type_prefix()
    this.state = 517
    this.type_specifier()
    this.state = 518
    this.component_declaration1()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Component_declaration1Context (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_component_declaration1
  return this
}

Component_declaration1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Component_declaration1Context.prototype.constructor = Component_declaration1Context

Component_declaration1Context.prototype.declaration = function () {
  return this.getTypedRuleContext(DeclarationContext, 0)
}

Component_declaration1Context.prototype.comment = function () {
  return this.getTypedRuleContext(CommentContext, 0)
}

Component_declaration1Context.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterComponent_declaration1(this)
  }
}

Component_declaration1Context.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitComponent_declaration1(this)
  }
}

Component_declaration1Context.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitComponent_declaration1(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Component_declaration1Context = Component_declaration1Context

modelicaParser.prototype.component_declaration1 = function () {
  const localctx = new Component_declaration1Context(this, this._ctx, this.state)
  this.enterRule(localctx, 70, modelicaParser.RULE_component_declaration1)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 520
    this.declaration()
    this.state = 521
    this.comment()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Short_class_definitionContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_short_class_definition
  return this
}

Short_class_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Short_class_definitionContext.prototype.constructor = Short_class_definitionContext

Short_class_definitionContext.prototype.class_prefixes = function () {
  return this.getTypedRuleContext(Class_prefixesContext, 0)
}

Short_class_definitionContext.prototype.short_class_specifier = function () {
  return this.getTypedRuleContext(Short_class_specifierContext, 0)
}

Short_class_definitionContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterShort_class_definition(this)
  }
}

Short_class_definitionContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitShort_class_definition(this)
  }
}

Short_class_definitionContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitShort_class_definition(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Short_class_definitionContext = Short_class_definitionContext

modelicaParser.prototype.short_class_definition = function () {
  const localctx = new Short_class_definitionContext(this, this._ctx, this.state)
  this.enterRule(localctx, 72, modelicaParser.RULE_short_class_definition)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 523
    this.class_prefixes()
    this.state = 524
    this.short_class_specifier()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Equation_sectionContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_equation_section
  return this
}

Equation_sectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Equation_sectionContext.prototype.constructor = Equation_sectionContext

Equation_sectionContext.prototype.EQUATION = function () {
  return this.getToken(modelicaParser.EQUATION, 0)
}

Equation_sectionContext.prototype.INITIAL = function () {
  return this.getToken(modelicaParser.INITIAL, 0)
}

Equation_sectionContext.prototype.equation = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(EquationContext)
  } else {
    return this.getTypedRuleContext(EquationContext, i)
  }
}

Equation_sectionContext.prototype.SYMBOL_SEMICOLON = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_SEMICOLON)
  } else {
    return this.getToken(modelicaParser.SYMBOL_SEMICOLON, i)
  }
}

Equation_sectionContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterEquation_section(this)
  }
}

Equation_sectionContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitEquation_section(this)
  }
}

Equation_sectionContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitEquation_section(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Equation_sectionContext = Equation_sectionContext

modelicaParser.prototype.equation_section = function () {
  const localctx = new Equation_sectionContext(this, this._ctx, this.state)
  this.enterRule(localctx, 74, modelicaParser.RULE_equation_section)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 527
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.INITIAL) {
      this.state = 526
      this.match(modelicaParser.INITIAL)
    }

    this.state = 529
    this.match(modelicaParser.EQUATION)
    this.state = 535
    this._errHandler.sync(this)
    let _alt = this._interp.adaptivePredict(this._input, 69, this._ctx)
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 530
        this.equation()
        this.state = 531
        this.match(modelicaParser.SYMBOL_SEMICOLON)
      }
      this.state = 537
      this._errHandler.sync(this)
      _alt = this._interp.adaptivePredict(this._input, 69, this._ctx)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Algorithm_sectionContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_algorithm_section
  return this
}

Algorithm_sectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Algorithm_sectionContext.prototype.constructor = Algorithm_sectionContext

Algorithm_sectionContext.prototype.ALGORITHM = function () {
  return this.getToken(modelicaParser.ALGORITHM, 0)
}

Algorithm_sectionContext.prototype.INITIAL = function () {
  return this.getToken(modelicaParser.INITIAL, 0)
}

Algorithm_sectionContext.prototype.statement = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(StatementContext)
  } else {
    return this.getTypedRuleContext(StatementContext, i)
  }
}

Algorithm_sectionContext.prototype.SYMBOL_SEMICOLON = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_SEMICOLON)
  } else {
    return this.getToken(modelicaParser.SYMBOL_SEMICOLON, i)
  }
}

Algorithm_sectionContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterAlgorithm_section(this)
  }
}

Algorithm_sectionContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitAlgorithm_section(this)
  }
}

Algorithm_sectionContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitAlgorithm_section(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Algorithm_sectionContext = Algorithm_sectionContext

modelicaParser.prototype.algorithm_section = function () {
  const localctx = new Algorithm_sectionContext(this, this._ctx, this.state)
  this.enterRule(localctx, 76, modelicaParser.RULE_algorithm_section)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 539
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.INITIAL) {
      this.state = 538
      this.match(modelicaParser.INITIAL)
    }

    this.state = 541
    this.match(modelicaParser.ALGORITHM)
    this.state = 547
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (((((_la - 17)) & ~0x1f) == 0 && ((1 << (_la - 17)) & ((1 << (modelicaParser.BREAK - 17)) | (1 << (modelicaParser.FOR - 17)) | (1 << (modelicaParser.IF - 17)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (modelicaParser.RETURN - 64)) | (1 << (modelicaParser.WHEN - 64)) | (1 << (modelicaParser.WHILE - 64)) | (1 << (modelicaParser.SYMBOL_LRBRACKET - 64)) | (1 << (modelicaParser.SYMBOL_DOT - 64)) | (1 << (modelicaParser.IDENT - 64)))) !== 0)) {
      this.state = 542
      this.statement()
      this.state = 543
      this.match(modelicaParser.SYMBOL_SEMICOLON)
      this.state = 549
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function EquationContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_equation
  return this
}

EquationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
EquationContext.prototype.constructor = EquationContext

EquationContext.prototype.comment = function () {
  return this.getTypedRuleContext(CommentContext, 0)
}

EquationContext.prototype.simple_expression = function () {
  return this.getTypedRuleContext(Simple_expressionContext, 0)
}

EquationContext.prototype.SYMBOL_EQUAL = function () {
  return this.getToken(modelicaParser.SYMBOL_EQUAL, 0)
}

EquationContext.prototype.expression = function () {
  return this.getTypedRuleContext(ExpressionContext, 0)
}

EquationContext.prototype.if_equation = function () {
  return this.getTypedRuleContext(If_equationContext, 0)
}

EquationContext.prototype.for_equation = function () {
  return this.getTypedRuleContext(For_equationContext, 0)
}

EquationContext.prototype.connect_clause = function () {
  return this.getTypedRuleContext(Connect_clauseContext, 0)
}

EquationContext.prototype.when_equation = function () {
  return this.getTypedRuleContext(When_equationContext, 0)
}

EquationContext.prototype.name = function () {
  return this.getTypedRuleContext(NameContext, 0)
}

EquationContext.prototype.function_call_args = function () {
  return this.getTypedRuleContext(Function_call_argsContext, 0)
}

EquationContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterEquation(this)
  }
}

EquationContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitEquation(this)
  }
}

EquationContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitEquation(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.EquationContext = EquationContext

modelicaParser.prototype.equation = function () {
  const localctx = new EquationContext(this, this._ctx, this.state)
  this.enterRule(localctx, 78, modelicaParser.RULE_equation)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 561
    this._errHandler.sync(this)
    const la_ = this._interp.adaptivePredict(this._input, 72, this._ctx)
    switch (la_) {
      case 1:
        this.state = 550
        this.simple_expression()
        this.state = 551
        this.match(modelicaParser.SYMBOL_EQUAL)
        this.state = 552
        this.expression()
        break

      case 2:
        this.state = 554
        this.if_equation()
        break

      case 3:
        this.state = 555
        this.for_equation()
        break

      case 4:
        this.state = 556
        this.connect_clause()
        break

      case 5:
        this.state = 557
        this.when_equation()
        break

      case 6:
        this.state = 558
        this.name()
        this.state = 559
        this.function_call_args()
        break
    }
    this.state = 563
    this.comment()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function StatementContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_statement
  return this
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
StatementContext.prototype.constructor = StatementContext

StatementContext.prototype.comment = function () {
  return this.getTypedRuleContext(CommentContext, 0)
}

StatementContext.prototype.component_reference = function () {
  return this.getTypedRuleContext(Component_referenceContext, 0)
}

StatementContext.prototype.SYMBOL_LRBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_LRBRACKET, 0)
}

StatementContext.prototype.output_expression_list = function () {
  return this.getTypedRuleContext(Output_expression_listContext, 0)
}

StatementContext.prototype.SYMBOL_RRBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_RRBRACKET, 0)
}

StatementContext.prototype.SYMBOL_COLONEQUAL = function () {
  return this.getToken(modelicaParser.SYMBOL_COLONEQUAL, 0)
}

StatementContext.prototype.function_call_args = function () {
  return this.getTypedRuleContext(Function_call_argsContext, 0)
}

StatementContext.prototype.BREAK = function () {
  return this.getToken(modelicaParser.BREAK, 0)
}

StatementContext.prototype.RETURN = function () {
  return this.getToken(modelicaParser.RETURN, 0)
}

StatementContext.prototype.if_statement = function () {
  return this.getTypedRuleContext(If_statementContext, 0)
}

StatementContext.prototype.for_statement = function () {
  return this.getTypedRuleContext(For_statementContext, 0)
}

StatementContext.prototype.while_statement = function () {
  return this.getTypedRuleContext(While_statementContext, 0)
}

StatementContext.prototype.when_statement = function () {
  return this.getTypedRuleContext(When_statementContext, 0)
}

StatementContext.prototype.expression = function () {
  return this.getTypedRuleContext(ExpressionContext, 0)
}

StatementContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterStatement(this)
  }
}

StatementContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitStatement(this)
  }
}

StatementContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitStatement(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.StatementContext = StatementContext

modelicaParser.prototype.statement = function () {
  const localctx = new StatementContext(this, this._ctx, this.state)
  this.enterRule(localctx, 80, modelicaParser.RULE_statement)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 584
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case modelicaParser.SYMBOL_DOT:
      case modelicaParser.IDENT:
        this.state = 565
        this.component_reference()
        this.state = 569
        this._errHandler.sync(this)
        switch (this._input.LA(1)) {
          case modelicaParser.SYMBOL_COLONEQUAL:
            this.state = 566
            this.match(modelicaParser.SYMBOL_COLONEQUAL)
            this.state = 567
            this.expression()
            break
          case modelicaParser.SYMBOL_LRBRACKET:
            this.state = 568
            this.function_call_args()
            break
          default:
            throw new antlr4.error.NoViableAltException(this)
        }
        break
      case modelicaParser.SYMBOL_LRBRACKET:
        this.state = 571
        this.match(modelicaParser.SYMBOL_LRBRACKET)
        this.state = 572
        this.output_expression_list()
        this.state = 573
        this.match(modelicaParser.SYMBOL_RRBRACKET)
        this.state = 574
        this.match(modelicaParser.SYMBOL_COLONEQUAL)
        this.state = 575
        this.component_reference()
        this.state = 576
        this.function_call_args()
        break
      case modelicaParser.BREAK:
        this.state = 578
        this.match(modelicaParser.BREAK)
        break
      case modelicaParser.RETURN:
        this.state = 579
        this.match(modelicaParser.RETURN)
        break
      case modelicaParser.IF:
        this.state = 580
        this.if_statement()
        break
      case modelicaParser.FOR:
        this.state = 581
        this.for_statement()
        break
      case modelicaParser.WHILE:
        this.state = 582
        this.while_statement()
        break
      case modelicaParser.WHEN:
        this.state = 583
        this.when_statement()
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
    this.state = 586
    this.comment()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function If_equationContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_if_equation
  return this
}

If_equationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
If_equationContext.prototype.constructor = If_equationContext

If_equationContext.prototype.IF = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.IF)
  } else {
    return this.getToken(modelicaParser.IF, i)
  }
}

If_equationContext.prototype.expression = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(ExpressionContext)
  } else {
    return this.getTypedRuleContext(ExpressionContext, i)
  }
}

If_equationContext.prototype.THEN = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.THEN)
  } else {
    return this.getToken(modelicaParser.THEN, i)
  }
}

If_equationContext.prototype.END = function () {
  return this.getToken(modelicaParser.END, 0)
}

If_equationContext.prototype.equation = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(EquationContext)
  } else {
    return this.getTypedRuleContext(EquationContext, i)
  }
}

If_equationContext.prototype.SYMBOL_SEMICOLON = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_SEMICOLON)
  } else {
    return this.getToken(modelicaParser.SYMBOL_SEMICOLON, i)
  }
}

If_equationContext.prototype.ELSEIF = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.ELSEIF)
  } else {
    return this.getToken(modelicaParser.ELSEIF, i)
  }
}

If_equationContext.prototype.ELSE = function () {
  return this.getToken(modelicaParser.ELSE, 0)
}

If_equationContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterIf_equation(this)
  }
}

If_equationContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitIf_equation(this)
  }
}

If_equationContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitIf_equation(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.If_equationContext = If_equationContext

modelicaParser.prototype.if_equation = function () {
  const localctx = new If_equationContext(this, this._ctx, this.state)
  this.enterRule(localctx, 82, modelicaParser.RULE_if_equation)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 588
    this.match(modelicaParser.IF)
    this.state = 589
    this.expression()
    this.state = 590
    this.match(modelicaParser.THEN)
    this.state = 596
    this._errHandler.sync(this)
    var _alt = this._interp.adaptivePredict(this._input, 75, this._ctx)
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 591
        this.equation()
        this.state = 592
        this.match(modelicaParser.SYMBOL_SEMICOLON)
      }
      this.state = 598
      this._errHandler.sync(this)
      _alt = this._interp.adaptivePredict(this._input, 75, this._ctx)
    }

    this.state = 612
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.ELSEIF) {
      this.state = 599
      this.match(modelicaParser.ELSEIF)
      this.state = 600
      this.expression()
      this.state = 601
      this.match(modelicaParser.THEN)
      this.state = 607
      this._errHandler.sync(this)
      var _alt = this._interp.adaptivePredict(this._input, 76, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 602
          this.equation()
          this.state = 603
          this.match(modelicaParser.SYMBOL_SEMICOLON)
        }
        this.state = 609
        this._errHandler.sync(this)
        _alt = this._interp.adaptivePredict(this._input, 76, this._ctx)
      }

      this.state = 614
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
    this.state = 624
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.ELSE) {
      this.state = 615
      this.match(modelicaParser.ELSE)
      this.state = 621
      this._errHandler.sync(this)
      var _alt = this._interp.adaptivePredict(this._input, 78, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 616
          this.equation()
          this.state = 617
          this.match(modelicaParser.SYMBOL_SEMICOLON)
        }
        this.state = 623
        this._errHandler.sync(this)
        _alt = this._interp.adaptivePredict(this._input, 78, this._ctx)
      }
    }

    this.state = 626
    this.match(modelicaParser.END)
    this.state = 627
    this.match(modelicaParser.IF)
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function If_statementContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_if_statement
  return this
}

If_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
If_statementContext.prototype.constructor = If_statementContext

If_statementContext.prototype.IF = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.IF)
  } else {
    return this.getToken(modelicaParser.IF, i)
  }
}

If_statementContext.prototype.expression = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(ExpressionContext)
  } else {
    return this.getTypedRuleContext(ExpressionContext, i)
  }
}

If_statementContext.prototype.THEN = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.THEN)
  } else {
    return this.getToken(modelicaParser.THEN, i)
  }
}

If_statementContext.prototype.END = function () {
  return this.getToken(modelicaParser.END, 0)
}

If_statementContext.prototype.statement = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(StatementContext)
  } else {
    return this.getTypedRuleContext(StatementContext, i)
  }
}

If_statementContext.prototype.SYMBOL_SEMICOLON = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_SEMICOLON)
  } else {
    return this.getToken(modelicaParser.SYMBOL_SEMICOLON, i)
  }
}

If_statementContext.prototype.ELSEIF = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.ELSEIF)
  } else {
    return this.getToken(modelicaParser.ELSEIF, i)
  }
}

If_statementContext.prototype.ELSE = function () {
  return this.getToken(modelicaParser.ELSE, 0)
}

If_statementContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterIf_statement(this)
  }
}

If_statementContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitIf_statement(this)
  }
}

If_statementContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitIf_statement(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.If_statementContext = If_statementContext

modelicaParser.prototype.if_statement = function () {
  const localctx = new If_statementContext(this, this._ctx, this.state)
  this.enterRule(localctx, 84, modelicaParser.RULE_if_statement)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 629
    this.match(modelicaParser.IF)
    this.state = 630
    this.expression()
    this.state = 631
    this.match(modelicaParser.THEN)
    this.state = 637
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (((((_la - 17)) & ~0x1f) == 0 && ((1 << (_la - 17)) & ((1 << (modelicaParser.BREAK - 17)) | (1 << (modelicaParser.FOR - 17)) | (1 << (modelicaParser.IF - 17)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (modelicaParser.RETURN - 64)) | (1 << (modelicaParser.WHEN - 64)) | (1 << (modelicaParser.WHILE - 64)) | (1 << (modelicaParser.SYMBOL_LRBRACKET - 64)) | (1 << (modelicaParser.SYMBOL_DOT - 64)) | (1 << (modelicaParser.IDENT - 64)))) !== 0)) {
      this.state = 632
      this.statement()
      this.state = 633
      this.match(modelicaParser.SYMBOL_SEMICOLON)
      this.state = 639
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
    this.state = 653
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.ELSEIF) {
      this.state = 640
      this.match(modelicaParser.ELSEIF)
      this.state = 641
      this.expression()
      this.state = 642
      this.match(modelicaParser.THEN)
      this.state = 648
      this._errHandler.sync(this)
      _la = this._input.LA(1)
      while (((((_la - 17)) & ~0x1f) == 0 && ((1 << (_la - 17)) & ((1 << (modelicaParser.BREAK - 17)) | (1 << (modelicaParser.FOR - 17)) | (1 << (modelicaParser.IF - 17)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (modelicaParser.RETURN - 64)) | (1 << (modelicaParser.WHEN - 64)) | (1 << (modelicaParser.WHILE - 64)) | (1 << (modelicaParser.SYMBOL_LRBRACKET - 64)) | (1 << (modelicaParser.SYMBOL_DOT - 64)) | (1 << (modelicaParser.IDENT - 64)))) !== 0)) {
        this.state = 643
        this.statement()
        this.state = 644
        this.match(modelicaParser.SYMBOL_SEMICOLON)
        this.state = 650
        this._errHandler.sync(this)
        _la = this._input.LA(1)
      }
      this.state = 655
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
    this.state = 665
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.ELSE) {
      this.state = 656
      this.match(modelicaParser.ELSE)
      this.state = 662
      this._errHandler.sync(this)
      _la = this._input.LA(1)
      while (((((_la - 17)) & ~0x1f) == 0 && ((1 << (_la - 17)) & ((1 << (modelicaParser.BREAK - 17)) | (1 << (modelicaParser.FOR - 17)) | (1 << (modelicaParser.IF - 17)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (modelicaParser.RETURN - 64)) | (1 << (modelicaParser.WHEN - 64)) | (1 << (modelicaParser.WHILE - 64)) | (1 << (modelicaParser.SYMBOL_LRBRACKET - 64)) | (1 << (modelicaParser.SYMBOL_DOT - 64)) | (1 << (modelicaParser.IDENT - 64)))) !== 0)) {
        this.state = 657
        this.statement()
        this.state = 658
        this.match(modelicaParser.SYMBOL_SEMICOLON)
        this.state = 664
        this._errHandler.sync(this)
        _la = this._input.LA(1)
      }
    }

    this.state = 667
    this.match(modelicaParser.END)
    this.state = 668
    this.match(modelicaParser.IF)
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function For_equationContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_for_equation
  return this
}

For_equationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
For_equationContext.prototype.constructor = For_equationContext

For_equationContext.prototype.FOR = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.FOR)
  } else {
    return this.getToken(modelicaParser.FOR, i)
  }
}

For_equationContext.prototype.for_indices = function () {
  return this.getTypedRuleContext(For_indicesContext, 0)
}

For_equationContext.prototype.LOOP = function () {
  return this.getToken(modelicaParser.LOOP, 0)
}

For_equationContext.prototype.END = function () {
  return this.getToken(modelicaParser.END, 0)
}

For_equationContext.prototype.equation = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(EquationContext)
  } else {
    return this.getTypedRuleContext(EquationContext, i)
  }
}

For_equationContext.prototype.SYMBOL_SEMICOLON = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_SEMICOLON)
  } else {
    return this.getToken(modelicaParser.SYMBOL_SEMICOLON, i)
  }
}

For_equationContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterFor_equation(this)
  }
}

For_equationContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitFor_equation(this)
  }
}

For_equationContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitFor_equation(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.For_equationContext = For_equationContext

modelicaParser.prototype.for_equation = function () {
  const localctx = new For_equationContext(this, this._ctx, this.state)
  this.enterRule(localctx, 86, modelicaParser.RULE_for_equation)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 670
    this.match(modelicaParser.FOR)
    this.state = 671
    this.for_indices()
    this.state = 672
    this.match(modelicaParser.LOOP)
    this.state = 678
    this._errHandler.sync(this)
    let _alt = this._interp.adaptivePredict(this._input, 85, this._ctx)
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 673
        this.equation()
        this.state = 674
        this.match(modelicaParser.SYMBOL_SEMICOLON)
      }
      this.state = 680
      this._errHandler.sync(this)
      _alt = this._interp.adaptivePredict(this._input, 85, this._ctx)
    }

    this.state = 681
    this.match(modelicaParser.END)
    this.state = 682
    this.match(modelicaParser.FOR)
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function For_statementContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_for_statement
  return this
}

For_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
For_statementContext.prototype.constructor = For_statementContext

For_statementContext.prototype.FOR = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.FOR)
  } else {
    return this.getToken(modelicaParser.FOR, i)
  }
}

For_statementContext.prototype.for_indices = function () {
  return this.getTypedRuleContext(For_indicesContext, 0)
}

For_statementContext.prototype.LOOP = function () {
  return this.getToken(modelicaParser.LOOP, 0)
}

For_statementContext.prototype.END = function () {
  return this.getToken(modelicaParser.END, 0)
}

For_statementContext.prototype.statement = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(StatementContext)
  } else {
    return this.getTypedRuleContext(StatementContext, i)
  }
}

For_statementContext.prototype.SYMBOL_SEMICOLON = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_SEMICOLON)
  } else {
    return this.getToken(modelicaParser.SYMBOL_SEMICOLON, i)
  }
}

For_statementContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterFor_statement(this)
  }
}

For_statementContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitFor_statement(this)
  }
}

For_statementContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitFor_statement(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.For_statementContext = For_statementContext

modelicaParser.prototype.for_statement = function () {
  const localctx = new For_statementContext(this, this._ctx, this.state)
  this.enterRule(localctx, 88, modelicaParser.RULE_for_statement)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 684
    this.match(modelicaParser.FOR)
    this.state = 685
    this.for_indices()
    this.state = 686
    this.match(modelicaParser.LOOP)
    this.state = 692
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (((((_la - 17)) & ~0x1f) == 0 && ((1 << (_la - 17)) & ((1 << (modelicaParser.BREAK - 17)) | (1 << (modelicaParser.FOR - 17)) | (1 << (modelicaParser.IF - 17)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (modelicaParser.RETURN - 64)) | (1 << (modelicaParser.WHEN - 64)) | (1 << (modelicaParser.WHILE - 64)) | (1 << (modelicaParser.SYMBOL_LRBRACKET - 64)) | (1 << (modelicaParser.SYMBOL_DOT - 64)) | (1 << (modelicaParser.IDENT - 64)))) !== 0)) {
      this.state = 687
      this.statement()
      this.state = 688
      this.match(modelicaParser.SYMBOL_SEMICOLON)
      this.state = 694
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
    this.state = 695
    this.match(modelicaParser.END)
    this.state = 696
    this.match(modelicaParser.FOR)
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function For_indicesContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_for_indices
  return this
}

For_indicesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
For_indicesContext.prototype.constructor = For_indicesContext

For_indicesContext.prototype.for_index = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(For_indexContext)
  } else {
    return this.getTypedRuleContext(For_indexContext, i)
  }
}

For_indicesContext.prototype.SYMBOL_COMMA = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_COMMA)
  } else {
    return this.getToken(modelicaParser.SYMBOL_COMMA, i)
  }
}

For_indicesContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterFor_indices(this)
  }
}

For_indicesContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitFor_indices(this)
  }
}

For_indicesContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitFor_indices(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.For_indicesContext = For_indicesContext

modelicaParser.prototype.for_indices = function () {
  const localctx = new For_indicesContext(this, this._ctx, this.state)
  this.enterRule(localctx, 90, modelicaParser.RULE_for_indices)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 698
    this.for_index()
    this.state = 703
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.SYMBOL_COMMA) {
      this.state = 699
      this.match(modelicaParser.SYMBOL_COMMA)
      this.state = 700
      this.for_index()
      this.state = 705
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function For_indexContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_for_index
  return this
}

For_indexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
For_indexContext.prototype.constructor = For_indexContext

For_indexContext.prototype.IDENT = function () {
  return this.getToken(modelicaParser.IDENT, 0)
}

For_indexContext.prototype.IN = function () {
  return this.getToken(modelicaParser.IN, 0)
}

For_indexContext.prototype.expression = function () {
  return this.getTypedRuleContext(ExpressionContext, 0)
}

For_indexContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterFor_index(this)
  }
}

For_indexContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitFor_index(this)
  }
}

For_indexContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitFor_index(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.For_indexContext = For_indexContext

modelicaParser.prototype.for_index = function () {
  const localctx = new For_indexContext(this, this._ctx, this.state)
  this.enterRule(localctx, 92, modelicaParser.RULE_for_index)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 706
    this.match(modelicaParser.IDENT)
    this.state = 709
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.IN) {
      this.state = 707
      this.match(modelicaParser.IN)
      this.state = 708
      this.expression()
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function While_statementContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_while_statement
  return this
}

While_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
While_statementContext.prototype.constructor = While_statementContext

While_statementContext.prototype.WHILE = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.WHILE)
  } else {
    return this.getToken(modelicaParser.WHILE, i)
  }
}

While_statementContext.prototype.expression = function () {
  return this.getTypedRuleContext(ExpressionContext, 0)
}

While_statementContext.prototype.LOOP = function () {
  return this.getToken(modelicaParser.LOOP, 0)
}

While_statementContext.prototype.END = function () {
  return this.getToken(modelicaParser.END, 0)
}

While_statementContext.prototype.statement = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(StatementContext)
  } else {
    return this.getTypedRuleContext(StatementContext, i)
  }
}

While_statementContext.prototype.SYMBOL_SEMICOLON = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_SEMICOLON)
  } else {
    return this.getToken(modelicaParser.SYMBOL_SEMICOLON, i)
  }
}

While_statementContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterWhile_statement(this)
  }
}

While_statementContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitWhile_statement(this)
  }
}

While_statementContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitWhile_statement(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.While_statementContext = While_statementContext

modelicaParser.prototype.while_statement = function () {
  const localctx = new While_statementContext(this, this._ctx, this.state)
  this.enterRule(localctx, 94, modelicaParser.RULE_while_statement)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 711
    this.match(modelicaParser.WHILE)
    this.state = 712
    this.expression()
    this.state = 713
    this.match(modelicaParser.LOOP)
    this.state = 719
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (((((_la - 17)) & ~0x1f) == 0 && ((1 << (_la - 17)) & ((1 << (modelicaParser.BREAK - 17)) | (1 << (modelicaParser.FOR - 17)) | (1 << (modelicaParser.IF - 17)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (modelicaParser.RETURN - 64)) | (1 << (modelicaParser.WHEN - 64)) | (1 << (modelicaParser.WHILE - 64)) | (1 << (modelicaParser.SYMBOL_LRBRACKET - 64)) | (1 << (modelicaParser.SYMBOL_DOT - 64)) | (1 << (modelicaParser.IDENT - 64)))) !== 0)) {
      this.state = 714
      this.statement()
      this.state = 715
      this.match(modelicaParser.SYMBOL_SEMICOLON)
      this.state = 721
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
    this.state = 722
    this.match(modelicaParser.END)
    this.state = 723
    this.match(modelicaParser.WHILE)
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function When_equationContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_when_equation
  return this
}

When_equationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
When_equationContext.prototype.constructor = When_equationContext

When_equationContext.prototype.WHEN = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.WHEN)
  } else {
    return this.getToken(modelicaParser.WHEN, i)
  }
}

When_equationContext.prototype.expression = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(ExpressionContext)
  } else {
    return this.getTypedRuleContext(ExpressionContext, i)
  }
}

When_equationContext.prototype.THEN = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.THEN)
  } else {
    return this.getToken(modelicaParser.THEN, i)
  }
}

When_equationContext.prototype.END = function () {
  return this.getToken(modelicaParser.END, 0)
}

When_equationContext.prototype.equation = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(EquationContext)
  } else {
    return this.getTypedRuleContext(EquationContext, i)
  }
}

When_equationContext.prototype.SYMBOL_SEMICOLON = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_SEMICOLON)
  } else {
    return this.getToken(modelicaParser.SYMBOL_SEMICOLON, i)
  }
}

When_equationContext.prototype.ELSEWHEN = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.ELSEWHEN)
  } else {
    return this.getToken(modelicaParser.ELSEWHEN, i)
  }
}

When_equationContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterWhen_equation(this)
  }
}

When_equationContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitWhen_equation(this)
  }
}

When_equationContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitWhen_equation(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.When_equationContext = When_equationContext

modelicaParser.prototype.when_equation = function () {
  const localctx = new When_equationContext(this, this._ctx, this.state)
  this.enterRule(localctx, 96, modelicaParser.RULE_when_equation)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 725
    this.match(modelicaParser.WHEN)
    this.state = 726
    this.expression()
    this.state = 727
    this.match(modelicaParser.THEN)
    this.state = 733
    this._errHandler.sync(this)
    var _alt = this._interp.adaptivePredict(this._input, 90, this._ctx)
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 728
        this.equation()
        this.state = 729
        this.match(modelicaParser.SYMBOL_SEMICOLON)
      }
      this.state = 735
      this._errHandler.sync(this)
      _alt = this._interp.adaptivePredict(this._input, 90, this._ctx)
    }

    this.state = 749
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.ELSEWHEN) {
      this.state = 736
      this.match(modelicaParser.ELSEWHEN)
      this.state = 737
      this.expression()
      this.state = 738
      this.match(modelicaParser.THEN)
      this.state = 744
      this._errHandler.sync(this)
      var _alt = this._interp.adaptivePredict(this._input, 91, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 739
          this.equation()
          this.state = 740
          this.match(modelicaParser.SYMBOL_SEMICOLON)
        }
        this.state = 746
        this._errHandler.sync(this)
        _alt = this._interp.adaptivePredict(this._input, 91, this._ctx)
      }

      this.state = 751
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
    this.state = 752
    this.match(modelicaParser.END)
    this.state = 753
    this.match(modelicaParser.WHEN)
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function When_statementContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_when_statement
  return this
}

When_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
When_statementContext.prototype.constructor = When_statementContext

When_statementContext.prototype.WHEN = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.WHEN)
  } else {
    return this.getToken(modelicaParser.WHEN, i)
  }
}

When_statementContext.prototype.expression = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(ExpressionContext)
  } else {
    return this.getTypedRuleContext(ExpressionContext, i)
  }
}

When_statementContext.prototype.THEN = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.THEN)
  } else {
    return this.getToken(modelicaParser.THEN, i)
  }
}

When_statementContext.prototype.END = function () {
  return this.getToken(modelicaParser.END, 0)
}

When_statementContext.prototype.statement = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(StatementContext)
  } else {
    return this.getTypedRuleContext(StatementContext, i)
  }
}

When_statementContext.prototype.SYMBOL_SEMICOLON = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_SEMICOLON)
  } else {
    return this.getToken(modelicaParser.SYMBOL_SEMICOLON, i)
  }
}

When_statementContext.prototype.ELSEWHEN = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.ELSEWHEN)
  } else {
    return this.getToken(modelicaParser.ELSEWHEN, i)
  }
}

When_statementContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterWhen_statement(this)
  }
}

When_statementContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitWhen_statement(this)
  }
}

When_statementContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitWhen_statement(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.When_statementContext = When_statementContext

modelicaParser.prototype.when_statement = function () {
  const localctx = new When_statementContext(this, this._ctx, this.state)
  this.enterRule(localctx, 98, modelicaParser.RULE_when_statement)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 755
    this.match(modelicaParser.WHEN)
    this.state = 756
    this.expression()
    this.state = 757
    this.match(modelicaParser.THEN)
    this.state = 763
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (((((_la - 17)) & ~0x1f) == 0 && ((1 << (_la - 17)) & ((1 << (modelicaParser.BREAK - 17)) | (1 << (modelicaParser.FOR - 17)) | (1 << (modelicaParser.IF - 17)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (modelicaParser.RETURN - 64)) | (1 << (modelicaParser.WHEN - 64)) | (1 << (modelicaParser.WHILE - 64)) | (1 << (modelicaParser.SYMBOL_LRBRACKET - 64)) | (1 << (modelicaParser.SYMBOL_DOT - 64)) | (1 << (modelicaParser.IDENT - 64)))) !== 0)) {
      this.state = 758
      this.statement()
      this.state = 759
      this.match(modelicaParser.SYMBOL_SEMICOLON)
      this.state = 765
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
    this.state = 779
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.ELSEWHEN) {
      this.state = 766
      this.match(modelicaParser.ELSEWHEN)
      this.state = 767
      this.expression()
      this.state = 768
      this.match(modelicaParser.THEN)
      this.state = 774
      this._errHandler.sync(this)
      _la = this._input.LA(1)
      while (((((_la - 17)) & ~0x1f) == 0 && ((1 << (_la - 17)) & ((1 << (modelicaParser.BREAK - 17)) | (1 << (modelicaParser.FOR - 17)) | (1 << (modelicaParser.IF - 17)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (modelicaParser.RETURN - 64)) | (1 << (modelicaParser.WHEN - 64)) | (1 << (modelicaParser.WHILE - 64)) | (1 << (modelicaParser.SYMBOL_LRBRACKET - 64)) | (1 << (modelicaParser.SYMBOL_DOT - 64)) | (1 << (modelicaParser.IDENT - 64)))) !== 0)) {
        this.state = 769
        this.statement()
        this.state = 770
        this.match(modelicaParser.SYMBOL_SEMICOLON)
        this.state = 776
        this._errHandler.sync(this)
        _la = this._input.LA(1)
      }
      this.state = 781
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
    this.state = 782
    this.match(modelicaParser.END)
    this.state = 783
    this.match(modelicaParser.WHEN)
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Connect_clauseContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_connect_clause
  return this
}

Connect_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Connect_clauseContext.prototype.constructor = Connect_clauseContext

Connect_clauseContext.prototype.CONNECT = function () {
  return this.getToken(modelicaParser.CONNECT, 0)
}

Connect_clauseContext.prototype.SYMBOL_LRBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_LRBRACKET, 0)
}

Connect_clauseContext.prototype.component_reference = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(Component_referenceContext)
  } else {
    return this.getTypedRuleContext(Component_referenceContext, i)
  }
}

Connect_clauseContext.prototype.SYMBOL_COMMA = function () {
  return this.getToken(modelicaParser.SYMBOL_COMMA, 0)
}

Connect_clauseContext.prototype.SYMBOL_RRBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_RRBRACKET, 0)
}

Connect_clauseContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterConnect_clause(this)
  }
}

Connect_clauseContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitConnect_clause(this)
  }
}

Connect_clauseContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitConnect_clause(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Connect_clauseContext = Connect_clauseContext

modelicaParser.prototype.connect_clause = function () {
  const localctx = new Connect_clauseContext(this, this._ctx, this.state)
  this.enterRule(localctx, 100, modelicaParser.RULE_connect_clause)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 785
    this.match(modelicaParser.CONNECT)
    this.state = 786
    this.match(modelicaParser.SYMBOL_LRBRACKET)
    this.state = 787
    this.component_reference()
    this.state = 788
    this.match(modelicaParser.SYMBOL_COMMA)
    this.state = 789
    this.component_reference()
    this.state = 790
    this.match(modelicaParser.SYMBOL_RRBRACKET)
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ExpressionContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_expression
  return this
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
ExpressionContext.prototype.constructor = ExpressionContext

ExpressionContext.prototype.simple_expression = function () {
  return this.getTypedRuleContext(Simple_expressionContext, 0)
}

ExpressionContext.prototype.IF = function () {
  return this.getToken(modelicaParser.IF, 0)
}

ExpressionContext.prototype.expression = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(ExpressionContext)
  } else {
    return this.getTypedRuleContext(ExpressionContext, i)
  }
}

ExpressionContext.prototype.THEN = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.THEN)
  } else {
    return this.getToken(modelicaParser.THEN, i)
  }
}

ExpressionContext.prototype.ELSE = function () {
  return this.getToken(modelicaParser.ELSE, 0)
}

ExpressionContext.prototype.ELSEIF = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.ELSEIF)
  } else {
    return this.getToken(modelicaParser.ELSEIF, i)
  }
}

ExpressionContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterExpression(this)
  }
}

ExpressionContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitExpression(this)
  }
}

ExpressionContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitExpression(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.ExpressionContext = ExpressionContext

modelicaParser.prototype.expression = function () {
  const localctx = new ExpressionContext(this, this._ctx, this.state)
  this.enterRule(localctx, 102, modelicaParser.RULE_expression)
  let _la = 0 // Token type
  try {
    this.state = 810
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case modelicaParser.T__6:
      case modelicaParser.T__7:
      case modelicaParser.T__8:
      case modelicaParser.DER:
      case modelicaParser.END:
      case modelicaParser.FALSE:
      case modelicaParser.INITIAL:
      case modelicaParser.NOT:
      case modelicaParser.TRUE:
      case modelicaParser.SYMBOL_LRBRACKET:
      case modelicaParser.SYMBOL_LCBRACKET:
      case modelicaParser.SYMBOL_LSBRACKET:
      case modelicaParser.SYMBOL_DOT:
      case modelicaParser.SYMBOL_PLUS:
      case modelicaParser.IDENT:
      case modelicaParser.STRING:
      case modelicaParser.UNSIGNED_NUMBER:
        this.enterOuterAlt(localctx, 1)
        this.state = 792
        this.simple_expression()
        break
      case modelicaParser.IF:
        this.enterOuterAlt(localctx, 2)
        this.state = 793
        this.match(modelicaParser.IF)
        this.state = 794
        this.expression()
        this.state = 795
        this.match(modelicaParser.THEN)
        this.state = 796
        this.expression()
        this.state = 804
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        while (_la === modelicaParser.ELSEIF) {
          this.state = 797
          this.match(modelicaParser.ELSEIF)
          this.state = 798
          this.expression()
          this.state = 799
          this.match(modelicaParser.THEN)
          this.state = 800
          this.expression()
          this.state = 806
          this._errHandler.sync(this)
          _la = this._input.LA(1)
        }
        this.state = 807
        this.match(modelicaParser.ELSE)
        this.state = 808
        this.expression()
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Simple_expressionContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_simple_expression
  return this
}

Simple_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Simple_expressionContext.prototype.constructor = Simple_expressionContext

Simple_expressionContext.prototype.logical_expression = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(Logical_expressionContext)
  } else {
    return this.getTypedRuleContext(Logical_expressionContext, i)
  }
}

Simple_expressionContext.prototype.SYMBOL_COLON = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_COLON)
  } else {
    return this.getToken(modelicaParser.SYMBOL_COLON, i)
  }
}

Simple_expressionContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterSimple_expression(this)
  }
}

Simple_expressionContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitSimple_expression(this)
  }
}

Simple_expressionContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitSimple_expression(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Simple_expressionContext = Simple_expressionContext

modelicaParser.prototype.simple_expression = function () {
  const localctx = new Simple_expressionContext(this, this._ctx, this.state)
  this.enterRule(localctx, 104, modelicaParser.RULE_simple_expression)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 812
    this.logical_expression()
    this.state = 819
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.SYMBOL_COLON) {
      this.state = 813
      this.match(modelicaParser.SYMBOL_COLON)
      this.state = 814
      this.logical_expression()
      this.state = 817
      this._errHandler.sync(this)
      _la = this._input.LA(1)
      if (_la === modelicaParser.SYMBOL_COLON) {
        this.state = 815
        this.match(modelicaParser.SYMBOL_COLON)
        this.state = 816
        this.logical_expression()
      }
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Logical_expressionContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_logical_expression
  return this
}

Logical_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Logical_expressionContext.prototype.constructor = Logical_expressionContext

Logical_expressionContext.prototype.logical_term = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(Logical_termContext)
  } else {
    return this.getTypedRuleContext(Logical_termContext, i)
  }
}

Logical_expressionContext.prototype.OR = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.OR)
  } else {
    return this.getToken(modelicaParser.OR, i)
  }
}

Logical_expressionContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterLogical_expression(this)
  }
}

Logical_expressionContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitLogical_expression(this)
  }
}

Logical_expressionContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitLogical_expression(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Logical_expressionContext = Logical_expressionContext

modelicaParser.prototype.logical_expression = function () {
  const localctx = new Logical_expressionContext(this, this._ctx, this.state)
  this.enterRule(localctx, 106, modelicaParser.RULE_logical_expression)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 821
    this.logical_term()
    this.state = 826
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.OR) {
      this.state = 822
      this.match(modelicaParser.OR)
      this.state = 823
      this.logical_term()
      this.state = 828
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Logical_termContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_logical_term
  return this
}

Logical_termContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Logical_termContext.prototype.constructor = Logical_termContext

Logical_termContext.prototype.logical_factor = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(Logical_factorContext)
  } else {
    return this.getTypedRuleContext(Logical_factorContext, i)
  }
}

Logical_termContext.prototype.AND = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.AND)
  } else {
    return this.getToken(modelicaParser.AND, i)
  }
}

Logical_termContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterLogical_term(this)
  }
}

Logical_termContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitLogical_term(this)
  }
}

Logical_termContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitLogical_term(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Logical_termContext = Logical_termContext

modelicaParser.prototype.logical_term = function () {
  const localctx = new Logical_termContext(this, this._ctx, this.state)
  this.enterRule(localctx, 108, modelicaParser.RULE_logical_term)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 829
    this.logical_factor()
    this.state = 834
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.AND) {
      this.state = 830
      this.match(modelicaParser.AND)
      this.state = 831
      this.logical_factor()
      this.state = 836
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Logical_factorContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_logical_factor
  return this
}

Logical_factorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Logical_factorContext.prototype.constructor = Logical_factorContext

Logical_factorContext.prototype.relation = function () {
  return this.getTypedRuleContext(RelationContext, 0)
}

Logical_factorContext.prototype.NOT = function () {
  return this.getToken(modelicaParser.NOT, 0)
}

Logical_factorContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterLogical_factor(this)
  }
}

Logical_factorContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitLogical_factor(this)
  }
}

Logical_factorContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitLogical_factor(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Logical_factorContext = Logical_factorContext

modelicaParser.prototype.logical_factor = function () {
  const localctx = new Logical_factorContext(this, this._ctx, this.state)
  this.enterRule(localctx, 110, modelicaParser.RULE_logical_factor)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 838
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.NOT) {
      this.state = 837
      this.match(modelicaParser.NOT)
    }

    this.state = 840
    this.relation()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function RelationContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_relation
  return this
}

RelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
RelationContext.prototype.constructor = RelationContext

RelationContext.prototype.arithmetic_expression = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(Arithmetic_expressionContext)
  } else {
    return this.getTypedRuleContext(Arithmetic_expressionContext, i)
  }
}

RelationContext.prototype.rel_op = function () {
  return this.getTypedRuleContext(Rel_opContext, 0)
}

RelationContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterRelation(this)
  }
}

RelationContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitRelation(this)
  }
}

RelationContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitRelation(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.RelationContext = RelationContext

modelicaParser.prototype.relation = function () {
  const localctx = new RelationContext(this, this._ctx, this.state)
  this.enterRule(localctx, 112, modelicaParser.RULE_relation)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 842
    this.arithmetic_expression()
    this.state = 846
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << modelicaParser.T__0) | (1 << modelicaParser.T__1) | (1 << modelicaParser.T__2) | (1 << modelicaParser.T__3) | (1 << modelicaParser.T__4) | (1 << modelicaParser.T__5))) !== 0)) {
      this.state = 843
      this.rel_op()
      this.state = 844
      this.arithmetic_expression()
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Rel_opContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_rel_op
  return this
}

Rel_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Rel_opContext.prototype.constructor = Rel_opContext

Rel_opContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterRel_op(this)
  }
}

Rel_opContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitRel_op(this)
  }
}

Rel_opContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitRel_op(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Rel_opContext = Rel_opContext

modelicaParser.prototype.rel_op = function () {
  const localctx = new Rel_opContext(this, this._ctx, this.state)
  this.enterRule(localctx, 114, modelicaParser.RULE_rel_op)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 848
    _la = this._input.LA(1)
    if (!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << modelicaParser.T__0) | (1 << modelicaParser.T__1) | (1 << modelicaParser.T__2) | (1 << modelicaParser.T__3) | (1 << modelicaParser.T__4) | (1 << modelicaParser.T__5))) !== 0))) {
      this._errHandler.recoverInline(this)
    } else {
        	this._errHandler.reportMatch(this)
      this.consume()
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Arithmetic_expressionContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_arithmetic_expression
  return this
}

Arithmetic_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Arithmetic_expressionContext.prototype.constructor = Arithmetic_expressionContext

Arithmetic_expressionContext.prototype.term = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(TermContext)
  } else {
    return this.getTypedRuleContext(TermContext, i)
  }
}

Arithmetic_expressionContext.prototype.add_op = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(Add_opContext)
  } else {
    return this.getTypedRuleContext(Add_opContext, i)
  }
}

Arithmetic_expressionContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterArithmetic_expression(this)
  }
}

Arithmetic_expressionContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitArithmetic_expression(this)
  }
}

Arithmetic_expressionContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitArithmetic_expression(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Arithmetic_expressionContext = Arithmetic_expressionContext

modelicaParser.prototype.arithmetic_expression = function () {
  const localctx = new Arithmetic_expressionContext(this, this._ctx, this.state)
  this.enterRule(localctx, 116, modelicaParser.RULE_arithmetic_expression)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 851
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << modelicaParser.T__6) | (1 << modelicaParser.T__7) | (1 << modelicaParser.T__8))) !== 0) || _la === modelicaParser.SYMBOL_PLUS) {
      this.state = 850
      this.add_op()
    }

    this.state = 853
    this.term()
    this.state = 859
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << modelicaParser.T__6) | (1 << modelicaParser.T__7) | (1 << modelicaParser.T__8))) !== 0) || _la === modelicaParser.SYMBOL_PLUS) {
      this.state = 854
      this.add_op()
      this.state = 855
      this.term()
      this.state = 861
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Add_opContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_add_op
  return this
}

Add_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Add_opContext.prototype.constructor = Add_opContext

Add_opContext.prototype.SYMBOL_PLUS = function () {
  return this.getToken(modelicaParser.SYMBOL_PLUS, 0)
}

Add_opContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterAdd_op(this)
  }
}

Add_opContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitAdd_op(this)
  }
}

Add_opContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitAdd_op(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Add_opContext = Add_opContext

modelicaParser.prototype.add_op = function () {
  const localctx = new Add_opContext(this, this._ctx, this.state)
  this.enterRule(localctx, 118, modelicaParser.RULE_add_op)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 862
    _la = this._input.LA(1)
    if (!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << modelicaParser.T__6) | (1 << modelicaParser.T__7) | (1 << modelicaParser.T__8))) !== 0) || _la === modelicaParser.SYMBOL_PLUS)) {
      this._errHandler.recoverInline(this)
    } else {
        	this._errHandler.reportMatch(this)
      this.consume()
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function TermContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_term
  return this
}

TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
TermContext.prototype.constructor = TermContext

TermContext.prototype.factor = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(FactorContext)
  } else {
    return this.getTypedRuleContext(FactorContext, i)
  }
}

TermContext.prototype.mul_op = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(Mul_opContext)
  } else {
    return this.getTypedRuleContext(Mul_opContext, i)
  }
}

TermContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterTerm(this)
  }
}

TermContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitTerm(this)
  }
}

TermContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitTerm(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.TermContext = TermContext

modelicaParser.prototype.term = function () {
  const localctx = new TermContext(this, this._ctx, this.state)
  this.enterRule(localctx, 120, modelicaParser.RULE_term)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 864
    this.factor()
    this.state = 870
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << modelicaParser.T__9) | (1 << modelicaParser.T__10) | (1 << modelicaParser.T__11))) !== 0) || _la === modelicaParser.SYMBOL_DOTSTAR) {
      this.state = 865
      this.mul_op()
      this.state = 866
      this.factor()
      this.state = 872
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Mul_opContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_mul_op
  return this
}

Mul_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Mul_opContext.prototype.constructor = Mul_opContext

Mul_opContext.prototype.SYMBOL_DOTSTAR = function () {
  return this.getToken(modelicaParser.SYMBOL_DOTSTAR, 0)
}

Mul_opContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterMul_op(this)
  }
}

Mul_opContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitMul_op(this)
  }
}

Mul_opContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitMul_op(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Mul_opContext = Mul_opContext

modelicaParser.prototype.mul_op = function () {
  const localctx = new Mul_opContext(this, this._ctx, this.state)
  this.enterRule(localctx, 122, modelicaParser.RULE_mul_op)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 873
    _la = this._input.LA(1)
    if (!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << modelicaParser.T__9) | (1 << modelicaParser.T__10) | (1 << modelicaParser.T__11))) !== 0) || _la === modelicaParser.SYMBOL_DOTSTAR)) {
      this._errHandler.recoverInline(this)
    } else {
        	this._errHandler.reportMatch(this)
      this.consume()
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function FactorContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_factor
  return this
}

FactorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
FactorContext.prototype.constructor = FactorContext

FactorContext.prototype.primary = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(PrimaryContext)
  } else {
    return this.getTypedRuleContext(PrimaryContext, i)
  }
}

FactorContext.prototype.SYMBOL_CARET = function () {
  return this.getToken(modelicaParser.SYMBOL_CARET, 0)
}

FactorContext.prototype.SYMBOL_DOTCARET = function () {
  return this.getToken(modelicaParser.SYMBOL_DOTCARET, 0)
}

FactorContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterFactor(this)
  }
}

FactorContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitFactor(this)
  }
}

FactorContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitFactor(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.FactorContext = FactorContext

modelicaParser.prototype.factor = function () {
  const localctx = new FactorContext(this, this._ctx, this.state)
  this.enterRule(localctx, 124, modelicaParser.RULE_factor)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 875
    this.primary()
    this.state = 878
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.SYMBOL_CARET || _la === modelicaParser.SYMBOL_DOTCARET) {
      this.state = 876
      _la = this._input.LA(1)
      if (!(_la === modelicaParser.SYMBOL_CARET || _la === modelicaParser.SYMBOL_DOTCARET)) {
        this._errHandler.recoverInline(this)
      } else {
            	this._errHandler.reportMatch(this)
        this.consume()
      }
      this.state = 877
      this.primary()
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function PrimaryContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_primary
  return this
}

PrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
PrimaryContext.prototype.constructor = PrimaryContext

PrimaryContext.prototype.UNSIGNED_NUMBER = function () {
  return this.getToken(modelicaParser.UNSIGNED_NUMBER, 0)
}

PrimaryContext.prototype.STRING = function () {
  return this.getToken(modelicaParser.STRING, 0)
}

PrimaryContext.prototype.FALSE = function () {
  return this.getToken(modelicaParser.FALSE, 0)
}

PrimaryContext.prototype.TRUE = function () {
  return this.getToken(modelicaParser.TRUE, 0)
}

PrimaryContext.prototype.function_call_args = function () {
  return this.getTypedRuleContext(Function_call_argsContext, 0)
}

PrimaryContext.prototype.name = function () {
  return this.getTypedRuleContext(NameContext, 0)
}

PrimaryContext.prototype.DER = function () {
  return this.getToken(modelicaParser.DER, 0)
}

PrimaryContext.prototype.INITIAL = function () {
  return this.getToken(modelicaParser.INITIAL, 0)
}

PrimaryContext.prototype.component_reference = function () {
  return this.getTypedRuleContext(Component_referenceContext, 0)
}

PrimaryContext.prototype.SYMBOL_LRBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_LRBRACKET, 0)
}

PrimaryContext.prototype.output_expression_list = function () {
  return this.getTypedRuleContext(Output_expression_listContext, 0)
}

PrimaryContext.prototype.SYMBOL_RRBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_RRBRACKET, 0)
}

PrimaryContext.prototype.SYMBOL_LSBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_LSBRACKET, 0)
}

PrimaryContext.prototype.expression_list = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(Expression_listContext)
  } else {
    return this.getTypedRuleContext(Expression_listContext, i)
  }
}

PrimaryContext.prototype.SYMBOL_RSBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_RSBRACKET, 0)
}

PrimaryContext.prototype.SYMBOL_SEMICOLON = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_SEMICOLON)
  } else {
    return this.getToken(modelicaParser.SYMBOL_SEMICOLON, i)
  }
}

PrimaryContext.prototype.SYMBOL_LCBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_LCBRACKET, 0)
}

PrimaryContext.prototype.function_arguments = function () {
  return this.getTypedRuleContext(Function_argumentsContext, 0)
}

PrimaryContext.prototype.SYMBOL_RCBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_RCBRACKET, 0)
}

PrimaryContext.prototype.END = function () {
  return this.getToken(modelicaParser.END, 0)
}

PrimaryContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterPrimary(this)
  }
}

PrimaryContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitPrimary(this)
  }
}

PrimaryContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitPrimary(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.PrimaryContext = PrimaryContext

modelicaParser.prototype.primary = function () {
  const localctx = new PrimaryContext(this, this._ctx, this.state)
  this.enterRule(localctx, 126, modelicaParser.RULE_primary)
  let _la = 0 // Token type
  try {
    this.state = 911
    this._errHandler.sync(this)
    const la_ = this._interp.adaptivePredict(this._input, 110, this._ctx)
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1)
        this.state = 880
        this.match(modelicaParser.UNSIGNED_NUMBER)
        break

      case 2:
        this.enterOuterAlt(localctx, 2)
        this.state = 881
        this.match(modelicaParser.STRING)
        break

      case 3:
        this.enterOuterAlt(localctx, 3)
        this.state = 882
        this.match(modelicaParser.FALSE)
        break

      case 4:
        this.enterOuterAlt(localctx, 4)
        this.state = 883
        this.match(modelicaParser.TRUE)
        break

      case 5:
        this.enterOuterAlt(localctx, 5)
        this.state = 887
        this._errHandler.sync(this)
        switch (this._input.LA(1)) {
          case modelicaParser.SYMBOL_DOT:
          case modelicaParser.IDENT:
            this.state = 884
            this.name()
            break
          case modelicaParser.DER:
            this.state = 885
            this.match(modelicaParser.DER)
            break
          case modelicaParser.INITIAL:
            this.state = 886
            this.match(modelicaParser.INITIAL)
            break
          default:
            throw new antlr4.error.NoViableAltException(this)
        }
        this.state = 889
        this.function_call_args()
        break

      case 6:
        this.enterOuterAlt(localctx, 6)
        this.state = 890
        this.component_reference()
        break

      case 7:
        this.enterOuterAlt(localctx, 7)
        this.state = 891
        this.match(modelicaParser.SYMBOL_LRBRACKET)
        this.state = 892
        this.output_expression_list()
        this.state = 893
        this.match(modelicaParser.SYMBOL_RRBRACKET)
        break

      case 8:
        this.enterOuterAlt(localctx, 8)
        this.state = 895
        this.match(modelicaParser.SYMBOL_LSBRACKET)
        this.state = 896
        this.expression_list()
        this.state = 901
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        while (_la === modelicaParser.SYMBOL_SEMICOLON) {
          this.state = 897
          this.match(modelicaParser.SYMBOL_SEMICOLON)
          this.state = 898
          this.expression_list()
          this.state = 903
          this._errHandler.sync(this)
          _la = this._input.LA(1)
        }
        this.state = 904
        this.match(modelicaParser.SYMBOL_RSBRACKET)
        break

      case 9:
        this.enterOuterAlt(localctx, 9)
        this.state = 906
        this.match(modelicaParser.SYMBOL_LCBRACKET)
        this.state = 907
        this.function_arguments()
        this.state = 908
        this.match(modelicaParser.SYMBOL_RCBRACKET)
        break

      case 10:
        this.enterOuterAlt(localctx, 10)
        this.state = 910
        this.match(modelicaParser.END)
        break
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function NameContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_name
  return this
}

NameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
NameContext.prototype.constructor = NameContext

NameContext.prototype.IDENT = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.IDENT)
  } else {
    return this.getToken(modelicaParser.IDENT, i)
  }
}

NameContext.prototype.SYMBOL_DOT = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_DOT)
  } else {
    return this.getToken(modelicaParser.SYMBOL_DOT, i)
  }
}

NameContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterName(this)
  }
}

NameContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitName(this)
  }
}

NameContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitName(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.NameContext = NameContext

modelicaParser.prototype.name = function () {
  const localctx = new NameContext(this, this._ctx, this.state)
  this.enterRule(localctx, 128, modelicaParser.RULE_name)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 914
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.SYMBOL_DOT) {
      this.state = 913
      this.match(modelicaParser.SYMBOL_DOT)
    }

    this.state = 916
    this.match(modelicaParser.IDENT)
    this.state = 921
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.SYMBOL_DOT) {
      this.state = 917
      this.match(modelicaParser.SYMBOL_DOT)
      this.state = 918
      this.match(modelicaParser.IDENT)
      this.state = 923
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Component_referenceContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_component_reference
  return this
}

Component_referenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Component_referenceContext.prototype.constructor = Component_referenceContext

Component_referenceContext.prototype.IDENT = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.IDENT)
  } else {
    return this.getToken(modelicaParser.IDENT, i)
  }
}

Component_referenceContext.prototype.SYMBOL_DOT = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_DOT)
  } else {
    return this.getToken(modelicaParser.SYMBOL_DOT, i)
  }
}

Component_referenceContext.prototype.array_subscripts = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(Array_subscriptsContext)
  } else {
    return this.getTypedRuleContext(Array_subscriptsContext, i)
  }
}

Component_referenceContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterComponent_reference(this)
  }
}

Component_referenceContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitComponent_reference(this)
  }
}

Component_referenceContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitComponent_reference(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Component_referenceContext = Component_referenceContext

modelicaParser.prototype.component_reference = function () {
  const localctx = new Component_referenceContext(this, this._ctx, this.state)
  this.enterRule(localctx, 130, modelicaParser.RULE_component_reference)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 925
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.SYMBOL_DOT) {
      this.state = 924
      this.match(modelicaParser.SYMBOL_DOT)
    }

    this.state = 927
    this.match(modelicaParser.IDENT)
    this.state = 929
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.SYMBOL_LSBRACKET) {
      this.state = 928
      this.array_subscripts()
    }

    this.state = 938
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.SYMBOL_DOT) {
      this.state = 931
      this.match(modelicaParser.SYMBOL_DOT)
      this.state = 932
      this.match(modelicaParser.IDENT)
      this.state = 934
      this._errHandler.sync(this)
      _la = this._input.LA(1)
      if (_la === modelicaParser.SYMBOL_LSBRACKET) {
        this.state = 933
        this.array_subscripts()
      }

      this.state = 940
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Function_call_argsContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_function_call_args
  return this
}

Function_call_argsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Function_call_argsContext.prototype.constructor = Function_call_argsContext

Function_call_argsContext.prototype.SYMBOL_LRBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_LRBRACKET, 0)
}

Function_call_argsContext.prototype.SYMBOL_RRBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_RRBRACKET, 0)
}

Function_call_argsContext.prototype.function_arguments = function () {
  return this.getTypedRuleContext(Function_argumentsContext, 0)
}

Function_call_argsContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterFunction_call_args(this)
  }
}

Function_call_argsContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitFunction_call_args(this)
  }
}

Function_call_argsContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitFunction_call_args(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Function_call_argsContext = Function_call_argsContext

modelicaParser.prototype.function_call_args = function () {
  const localctx = new Function_call_argsContext(this, this._ctx, this.state)
  this.enterRule(localctx, 132, modelicaParser.RULE_function_call_args)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 941
    this.match(modelicaParser.SYMBOL_LRBRACKET)
    this.state = 943
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << modelicaParser.T__6) | (1 << modelicaParser.T__7) | (1 << modelicaParser.T__8) | (1 << modelicaParser.DER) | (1 << modelicaParser.END))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (modelicaParser.FALSE - 36)) | (1 << (modelicaParser.FUNCTION - 36)) | (1 << (modelicaParser.IF - 36)) | (1 << (modelicaParser.INITIAL - 36)) | (1 << (modelicaParser.NOT - 36)) | (1 << (modelicaParser.TRUE - 36)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (modelicaParser.SYMBOL_LRBRACKET - 77)) | (1 << (modelicaParser.SYMBOL_LCBRACKET - 77)) | (1 << (modelicaParser.SYMBOL_LSBRACKET - 77)) | (1 << (modelicaParser.SYMBOL_DOT - 77)) | (1 << (modelicaParser.SYMBOL_PLUS - 77)) | (1 << (modelicaParser.IDENT - 77)) | (1 << (modelicaParser.STRING - 77)) | (1 << (modelicaParser.UNSIGNED_NUMBER - 77)))) !== 0)) {
      this.state = 942
      this.function_arguments()
    }

    this.state = 945
    this.match(modelicaParser.SYMBOL_RRBRACKET)
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Function_argumentsContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_function_arguments
  return this
}

Function_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Function_argumentsContext.prototype.constructor = Function_argumentsContext

Function_argumentsContext.prototype.function_argument = function () {
  return this.getTypedRuleContext(Function_argumentContext, 0)
}

Function_argumentsContext.prototype.SYMBOL_COMMA = function () {
  return this.getToken(modelicaParser.SYMBOL_COMMA, 0)
}

Function_argumentsContext.prototype.function_arguments = function () {
  return this.getTypedRuleContext(Function_argumentsContext, 0)
}

Function_argumentsContext.prototype.FOR = function () {
  return this.getToken(modelicaParser.FOR, 0)
}

Function_argumentsContext.prototype.for_indices = function () {
  return this.getTypedRuleContext(For_indicesContext, 0)
}

Function_argumentsContext.prototype.named_arguments = function () {
  return this.getTypedRuleContext(Named_argumentsContext, 0)
}

Function_argumentsContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterFunction_arguments(this)
  }
}

Function_argumentsContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitFunction_arguments(this)
  }
}

Function_argumentsContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitFunction_arguments(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Function_argumentsContext = Function_argumentsContext

modelicaParser.prototype.function_arguments = function () {
  const localctx = new Function_argumentsContext(this, this._ctx, this.state)
  this.enterRule(localctx, 134, modelicaParser.RULE_function_arguments)
  try {
    this.state = 955
    this._errHandler.sync(this)
    const la_ = this._interp.adaptivePredict(this._input, 119, this._ctx)
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1)
        this.state = 947
        this.function_argument()
        this.state = 952
        this._errHandler.sync(this)
        switch (this._input.LA(1)) {
          case modelicaParser.SYMBOL_COMMA:
            	this.state = 948
            	this.match(modelicaParser.SYMBOL_COMMA)
            	this.state = 949
            	this.function_arguments()
            	break
          case modelicaParser.FOR:
            	this.state = 950
            	this.match(modelicaParser.FOR)
            	this.state = 951
            	this.for_indices()
            	break
          case modelicaParser.SYMBOL_RRBRACKET:
          case modelicaParser.SYMBOL_RCBRACKET:
            	break
          default:
            	break
        }
        break

      case 2:
        this.enterOuterAlt(localctx, 2)
        this.state = 954
        this.named_arguments()
        break
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Named_argumentsContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_named_arguments
  return this
}

Named_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Named_argumentsContext.prototype.constructor = Named_argumentsContext

Named_argumentsContext.prototype.named_argument = function () {
  return this.getTypedRuleContext(Named_argumentContext, 0)
}

Named_argumentsContext.prototype.SYMBOL_COMMA = function () {
  return this.getToken(modelicaParser.SYMBOL_COMMA, 0)
}

Named_argumentsContext.prototype.named_arguments = function () {
  return this.getTypedRuleContext(Named_argumentsContext, 0)
}

Named_argumentsContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterNamed_arguments(this)
  }
}

Named_argumentsContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitNamed_arguments(this)
  }
}

Named_argumentsContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitNamed_arguments(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Named_argumentsContext = Named_argumentsContext

modelicaParser.prototype.named_arguments = function () {
  const localctx = new Named_argumentsContext(this, this._ctx, this.state)
  this.enterRule(localctx, 136, modelicaParser.RULE_named_arguments)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 957
    this.named_argument()
    this.state = 960
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.SYMBOL_COMMA) {
      this.state = 958
      this.match(modelicaParser.SYMBOL_COMMA)
      this.state = 959
      this.named_arguments()
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Named_argumentContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_named_argument
  return this
}

Named_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Named_argumentContext.prototype.constructor = Named_argumentContext

Named_argumentContext.prototype.IDENT = function () {
  return this.getToken(modelicaParser.IDENT, 0)
}

Named_argumentContext.prototype.SYMBOL_EQUAL = function () {
  return this.getToken(modelicaParser.SYMBOL_EQUAL, 0)
}

Named_argumentContext.prototype.function_argument = function () {
  return this.getTypedRuleContext(Function_argumentContext, 0)
}

Named_argumentContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterNamed_argument(this)
  }
}

Named_argumentContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitNamed_argument(this)
  }
}

Named_argumentContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitNamed_argument(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Named_argumentContext = Named_argumentContext

modelicaParser.prototype.named_argument = function () {
  const localctx = new Named_argumentContext(this, this._ctx, this.state)
  this.enterRule(localctx, 138, modelicaParser.RULE_named_argument)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 962
    this.match(modelicaParser.IDENT)
    this.state = 963
    this.match(modelicaParser.SYMBOL_EQUAL)
    this.state = 964
    this.function_argument()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Function_argumentContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_function_argument
  return this
}

Function_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Function_argumentContext.prototype.constructor = Function_argumentContext

Function_argumentContext.prototype.FUNCTION = function () {
  return this.getToken(modelicaParser.FUNCTION, 0)
}

Function_argumentContext.prototype.name = function () {
  return this.getTypedRuleContext(NameContext, 0)
}

Function_argumentContext.prototype.SYMBOL_LRBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_LRBRACKET, 0)
}

Function_argumentContext.prototype.SYMBOL_RRBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_RRBRACKET, 0)
}

Function_argumentContext.prototype.named_arguments = function () {
  return this.getTypedRuleContext(Named_argumentsContext, 0)
}

Function_argumentContext.prototype.expression = function () {
  return this.getTypedRuleContext(ExpressionContext, 0)
}

Function_argumentContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterFunction_argument(this)
  }
}

Function_argumentContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitFunction_argument(this)
  }
}

Function_argumentContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitFunction_argument(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Function_argumentContext = Function_argumentContext

modelicaParser.prototype.function_argument = function () {
  const localctx = new Function_argumentContext(this, this._ctx, this.state)
  this.enterRule(localctx, 140, modelicaParser.RULE_function_argument)
  let _la = 0 // Token type
  try {
    this.state = 975
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case modelicaParser.FUNCTION:
        this.enterOuterAlt(localctx, 1)
        this.state = 966
        this.match(modelicaParser.FUNCTION)
        this.state = 967
        this.name()
        this.state = 968
        this.match(modelicaParser.SYMBOL_LRBRACKET)
        this.state = 970
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        if (_la === modelicaParser.IDENT) {
          this.state = 969
          this.named_arguments()
        }

        this.state = 972
        this.match(modelicaParser.SYMBOL_RRBRACKET)
        break
      case modelicaParser.T__6:
      case modelicaParser.T__7:
      case modelicaParser.T__8:
      case modelicaParser.DER:
      case modelicaParser.END:
      case modelicaParser.FALSE:
      case modelicaParser.IF:
      case modelicaParser.INITIAL:
      case modelicaParser.NOT:
      case modelicaParser.TRUE:
      case modelicaParser.SYMBOL_LRBRACKET:
      case modelicaParser.SYMBOL_LCBRACKET:
      case modelicaParser.SYMBOL_LSBRACKET:
      case modelicaParser.SYMBOL_DOT:
      case modelicaParser.SYMBOL_PLUS:
      case modelicaParser.IDENT:
      case modelicaParser.STRING:
      case modelicaParser.UNSIGNED_NUMBER:
        this.enterOuterAlt(localctx, 2)
        this.state = 974
        this.expression()
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Output_expression_listContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_output_expression_list
  return this
}

Output_expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Output_expression_listContext.prototype.constructor = Output_expression_listContext

Output_expression_listContext.prototype.expression = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(ExpressionContext)
  } else {
    return this.getTypedRuleContext(ExpressionContext, i)
  }
}

Output_expression_listContext.prototype.SYMBOL_COMMA = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_COMMA)
  } else {
    return this.getToken(modelicaParser.SYMBOL_COMMA, i)
  }
}

Output_expression_listContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterOutput_expression_list(this)
  }
}

Output_expression_listContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitOutput_expression_list(this)
  }
}

Output_expression_listContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitOutput_expression_list(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Output_expression_listContext = Output_expression_listContext

modelicaParser.prototype.output_expression_list = function () {
  const localctx = new Output_expression_listContext(this, this._ctx, this.state)
  this.enterRule(localctx, 142, modelicaParser.RULE_output_expression_list)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 978
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << modelicaParser.T__6) | (1 << modelicaParser.T__7) | (1 << modelicaParser.T__8) | (1 << modelicaParser.DER) | (1 << modelicaParser.END))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (modelicaParser.FALSE - 36)) | (1 << (modelicaParser.IF - 36)) | (1 << (modelicaParser.INITIAL - 36)) | (1 << (modelicaParser.NOT - 36)) | (1 << (modelicaParser.TRUE - 36)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (modelicaParser.SYMBOL_LRBRACKET - 77)) | (1 << (modelicaParser.SYMBOL_LCBRACKET - 77)) | (1 << (modelicaParser.SYMBOL_LSBRACKET - 77)) | (1 << (modelicaParser.SYMBOL_DOT - 77)) | (1 << (modelicaParser.SYMBOL_PLUS - 77)) | (1 << (modelicaParser.IDENT - 77)) | (1 << (modelicaParser.STRING - 77)) | (1 << (modelicaParser.UNSIGNED_NUMBER - 77)))) !== 0)) {
      this.state = 977
      this.expression()
    }

    this.state = 986
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.SYMBOL_COMMA) {
      this.state = 980
      this.match(modelicaParser.SYMBOL_COMMA)
      this.state = 982
      this._errHandler.sync(this)
      _la = this._input.LA(1)
      if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << modelicaParser.T__6) | (1 << modelicaParser.T__7) | (1 << modelicaParser.T__8) | (1 << modelicaParser.DER) | (1 << modelicaParser.END))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (modelicaParser.FALSE - 36)) | (1 << (modelicaParser.IF - 36)) | (1 << (modelicaParser.INITIAL - 36)) | (1 << (modelicaParser.NOT - 36)) | (1 << (modelicaParser.TRUE - 36)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (modelicaParser.SYMBOL_LRBRACKET - 77)) | (1 << (modelicaParser.SYMBOL_LCBRACKET - 77)) | (1 << (modelicaParser.SYMBOL_LSBRACKET - 77)) | (1 << (modelicaParser.SYMBOL_DOT - 77)) | (1 << (modelicaParser.SYMBOL_PLUS - 77)) | (1 << (modelicaParser.IDENT - 77)) | (1 << (modelicaParser.STRING - 77)) | (1 << (modelicaParser.UNSIGNED_NUMBER - 77)))) !== 0)) {
        this.state = 981
        this.expression()
      }

      this.state = 988
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Expression_listContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_expression_list
  return this
}

Expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Expression_listContext.prototype.constructor = Expression_listContext

Expression_listContext.prototype.expression = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(ExpressionContext)
  } else {
    return this.getTypedRuleContext(ExpressionContext, i)
  }
}

Expression_listContext.prototype.SYMBOL_COMMA = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_COMMA)
  } else {
    return this.getToken(modelicaParser.SYMBOL_COMMA, i)
  }
}

Expression_listContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterExpression_list(this)
  }
}

Expression_listContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitExpression_list(this)
  }
}

Expression_listContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitExpression_list(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Expression_listContext = Expression_listContext

modelicaParser.prototype.expression_list = function () {
  const localctx = new Expression_listContext(this, this._ctx, this.state)
  this.enterRule(localctx, 144, modelicaParser.RULE_expression_list)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 989
    this.expression()
    this.state = 994
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.SYMBOL_COMMA) {
      this.state = 990
      this.match(modelicaParser.SYMBOL_COMMA)
      this.state = 991
      this.expression()
      this.state = 996
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function Array_subscriptsContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_array_subscripts
  return this
}

Array_subscriptsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
Array_subscriptsContext.prototype.constructor = Array_subscriptsContext

Array_subscriptsContext.prototype.SYMBOL_LSBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_LSBRACKET, 0)
}

Array_subscriptsContext.prototype.subscript = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(SubscriptContext)
  } else {
    return this.getTypedRuleContext(SubscriptContext, i)
  }
}

Array_subscriptsContext.prototype.SYMBOL_RSBRACKET = function () {
  return this.getToken(modelicaParser.SYMBOL_RSBRACKET, 0)
}

Array_subscriptsContext.prototype.SYMBOL_COMMA = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_COMMA)
  } else {
    return this.getToken(modelicaParser.SYMBOL_COMMA, i)
  }
}

Array_subscriptsContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterArray_subscripts(this)
  }
}

Array_subscriptsContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitArray_subscripts(this)
  }
}

Array_subscriptsContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitArray_subscripts(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.Array_subscriptsContext = Array_subscriptsContext

modelicaParser.prototype.array_subscripts = function () {
  const localctx = new Array_subscriptsContext(this, this._ctx, this.state)
  this.enterRule(localctx, 146, modelicaParser.RULE_array_subscripts)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 997
    this.match(modelicaParser.SYMBOL_LSBRACKET)
    this.state = 998
    this.subscript()
    this.state = 1003
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    while (_la === modelicaParser.SYMBOL_COMMA) {
      this.state = 999
      this.match(modelicaParser.SYMBOL_COMMA)
      this.state = 1000
      this.subscript()
      this.state = 1005
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    }
    this.state = 1006
    this.match(modelicaParser.SYMBOL_RSBRACKET)
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function SubscriptContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_subscript
  return this
}

SubscriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
SubscriptContext.prototype.constructor = SubscriptContext

SubscriptContext.prototype.SYMBOL_COLON = function () {
  return this.getToken(modelicaParser.SYMBOL_COLON, 0)
}

SubscriptContext.prototype.expression = function () {
  return this.getTypedRuleContext(ExpressionContext, 0)
}

SubscriptContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterSubscript(this)
  }
}

SubscriptContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitSubscript(this)
  }
}

SubscriptContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitSubscript(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.SubscriptContext = SubscriptContext

modelicaParser.prototype.subscript = function () {
  const localctx = new SubscriptContext(this, this._ctx, this.state)
  this.enterRule(localctx, 148, modelicaParser.RULE_subscript)
  try {
    this.state = 1010
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case modelicaParser.SYMBOL_COLON:
        this.enterOuterAlt(localctx, 1)
        this.state = 1008
        this.match(modelicaParser.SYMBOL_COLON)
        break
      case modelicaParser.T__6:
      case modelicaParser.T__7:
      case modelicaParser.T__8:
      case modelicaParser.DER:
      case modelicaParser.END:
      case modelicaParser.FALSE:
      case modelicaParser.IF:
      case modelicaParser.INITIAL:
      case modelicaParser.NOT:
      case modelicaParser.TRUE:
      case modelicaParser.SYMBOL_LRBRACKET:
      case modelicaParser.SYMBOL_LCBRACKET:
      case modelicaParser.SYMBOL_LSBRACKET:
      case modelicaParser.SYMBOL_DOT:
      case modelicaParser.SYMBOL_PLUS:
      case modelicaParser.IDENT:
      case modelicaParser.STRING:
      case modelicaParser.UNSIGNED_NUMBER:
        this.enterOuterAlt(localctx, 2)
        this.state = 1009
        this.expression()
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function CommentContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_comment
  return this
}

CommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
CommentContext.prototype.constructor = CommentContext

CommentContext.prototype.string_comment = function () {
  return this.getTypedRuleContext(String_commentContext, 0)
}

CommentContext.prototype.annotation = function () {
  return this.getTypedRuleContext(AnnotationContext, 0)
}

CommentContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterComment(this)
  }
}

CommentContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitComment(this)
  }
}

CommentContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitComment(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.CommentContext = CommentContext

modelicaParser.prototype.comment = function () {
  const localctx = new CommentContext(this, this._ctx, this.state)
  this.enterRule(localctx, 150, modelicaParser.RULE_comment)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 1012
    this.string_comment()
    this.state = 1014
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.ANNOTATION) {
      this.state = 1013
      this.annotation()
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function String_commentContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_string_comment
  return this
}

String_commentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
String_commentContext.prototype.constructor = String_commentContext

String_commentContext.prototype.STRING = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.STRING)
  } else {
    return this.getToken(modelicaParser.STRING, i)
  }
}

String_commentContext.prototype.SYMBOL_PLUS = function (i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(modelicaParser.SYMBOL_PLUS)
  } else {
    return this.getToken(modelicaParser.SYMBOL_PLUS, i)
  }
}

String_commentContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterString_comment(this)
  }
}

String_commentContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitString_comment(this)
  }
}

String_commentContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitString_comment(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.String_commentContext = String_commentContext

modelicaParser.prototype.string_comment = function () {
  const localctx = new String_commentContext(this, this._ctx, this.state)
  this.enterRule(localctx, 152, modelicaParser.RULE_string_comment)
  let _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 1024
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === modelicaParser.STRING) {
      this.state = 1016
      this.match(modelicaParser.STRING)
      this.state = 1021
      this._errHandler.sync(this)
      _la = this._input.LA(1)
      while (_la === modelicaParser.SYMBOL_PLUS) {
        this.state = 1017
        this.match(modelicaParser.SYMBOL_PLUS)
        this.state = 1018
        this.match(modelicaParser.STRING)
        this.state = 1023
        this._errHandler.sync(this)
        _la = this._input.LA(1)
      }
    }
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function AnnotationContext (parser, parent, invokingState) {
  if (parent === undefined) {
	    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = modelicaParser.RULE_annotation
  return this
}

AnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
AnnotationContext.prototype.constructor = AnnotationContext

AnnotationContext.prototype.ANNOTATION = function () {
  return this.getToken(modelicaParser.ANNOTATION, 0)
}

AnnotationContext.prototype.class_modification = function () {
  return this.getTypedRuleContext(Class_modificationContext, 0)
}

AnnotationContext.prototype.enterRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.enterAnnotation(this)
  }
}

AnnotationContext.prototype.exitRule = function (listener) {
  if (listener instanceof modelicaListener) {
    listener.exitAnnotation(this)
  }
}

AnnotationContext.prototype.accept = function (visitor) {
  if (visitor instanceof modelicaVisitor) {
    return visitor.visitAnnotation(this)
  } else {
    return visitor.visitChildren(this)
  }
}

modelicaParser.AnnotationContext = AnnotationContext

modelicaParser.prototype.annotation = function () {
  const localctx = new AnnotationContext(this, this._ctx, this.state)
  this.enterRule(localctx, 154, modelicaParser.RULE_annotation)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 1026
    this.match(modelicaParser.ANNOTATION)
    this.state = 1027
    this.class_modification()
  } catch (re) {
    	if (re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re
	        this._errHandler.reportError(this, re)
	        this._errHandler.recover(this, re)
	    } else {
	    	throw re
	    }
  } finally {
    this.exitRule()
  }
  return localctx
}

exports.modelicaParser = modelicaParser
